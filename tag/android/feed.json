{
    "version": "https://jsonfeed.org/version/1",
    "title": "友人帐🎴 • All posts by \"android\" tag",
    "description": "",
    "home_page_url": "https://isviolet.github.io",
    "items": [
        {
            "id": "https://isviolet.github.io/p/566cdd19.html",
            "url": "https://isviolet.github.io/p/566cdd19.html",
            "title": "OKHttp3.10.0最新版的极致封装",
            "date_published": "2021-05-18T13:12:12.353Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<blockquote>\n<p>我们都知道，Retrofit 目前是比较火的网络请求框架，本身就是是 OKHttp 进行了封装，实际干活的还是 OKhttp，所以为了更好的用好 Retrofit，很有必要复习一下 OKHTTP，并且 OKhttp 的最新版本 3.10.0 和之前版本的操作也是不尽相同，所以今天重新对他操作一波，从简单实用到常用使用方式的封装均有涉猎，亲测可以正常使用，本文以豆瓣的电影 api 做测试数据，详细源码下方会有下载地址，时间紧迫，废话不多说，代码就是最好的注释，欢迎 fork！ PS: 本文主要围绕以下四个文件做操作： ![file](<span class=\"exturl\" data-url=\"aHR0cDovL25hdmllbHVjay53YW5nL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDIwLzA5L2ltYWdlLTE1OTkwMzY2MjM1NDEucG5n\">http://navieluck.wang/wp-content/uploads/2020/09/image-1599036623541.png</span></p>\n</blockquote>\n<h1 id=\"okhttp310的get请求\"><a class=\"anchor\" href=\"#okhttp310的get请求\">#</a> OKHTTP3.10 的 GET 请求</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getDouBan1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">//1, 创建 OKHttpClient 对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">OkHttpClient</span> okHttpClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OkHttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">//2, 创建一个 Request</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Request</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constant</span><span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//3, 创建一个 call 对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Call</span> call <span class=\"token operator\">=</span> okHttpClient<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">//4, 将请求添加到调度中</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        call<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onResponse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Response</span> response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">isSuccessful</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    res <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token class-name\">ThreadPoolUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                            <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"okhttp310的post请求\"><a class=\"anchor\" href=\"#okhttp310的post请求\">#</a> OKHTTP3.10 的 POST 请求</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postDouBan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">//1, 创建 OKHttpClient 对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">OkHttpClient</span> okHttpClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OkHttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">//2, 创建一个 Request</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">RequestBody</span> requestBody <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormBody<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ytf\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Request</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constant</span><span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>requestBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//4, 将请求添加到调度中</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        okHttpClient<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onResponse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Response</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">isSuccessful</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    res <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token class-name\">ThreadPoolUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// Looper.prepare();// Toast.makeText(MainActivity.this, res, Toast.LENGTH_SHORT).show(); Log.d(TAG, res); EventBus.getDefault().post(res); &#125; &#125;); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125;); &#125;</span></pre></td></tr></table></figure><h1 id=\"okhttp310的get封装请求\"><a class=\"anchor\" href=\"#okhttp310的get封装请求\">#</a> OKHTTP3.10 的 GET 封装请求</h1>\n<h2 id=\"工具类的单例\"><a class=\"anchor\" href=\"#工具类的单例\">#</a> 工具类的单例：</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 懒汉式加锁单例模式</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OkHTTPManger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        okHttpClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OkHttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">OkHTTPManger</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance  <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">OkHTTPManger</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance  <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OkHTTPManger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"get同步请求\"><a class=\"anchor\" href=\"#get同步请求\">#</a> get 同步请求</h2>\n<h3 id=\"通过responsebodystring获取返回的字符串\"><a class=\"anchor\" href=\"#通过responsebodystring获取返回的字符串\">#</a> 通过 response.body ().string () 获取返回的字符串</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * get 同步请求不需要传参数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 通过 response.body ().string () 获取返回的字符串</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @param url</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getSyncBackString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Request</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Call</span> call <span class=\"token operator\">=</span> okHttpClient<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">Response</span> response <span class=\"token operator\">=</span> call<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 将 response 转化成 String</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">String</span> responseStr <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> responseStr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET同步请求解析为String异常\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"通过responsebodybytes获取返回的二进制字节数组\"><a class=\"anchor\" href=\"#通过responsebodybytes获取返回的二进制字节数组\">#</a> 通过 response.body ().bytes () 获取返回的二进制字节数组</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * get 同步请求</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 通过 response.body ().bytes () 获取返回的二进制字节数组</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @param url</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getSyncBackByteArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Request</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Call</span> call <span class=\"token operator\">=</span> okHttpClient<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">Response</span> response <span class=\"token operator\">=</span> call<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 将 response 转化成 String</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> responseStr <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> responseStr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET同步请求解析为byte数组异常\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"通过responsebodybytestream获取返回的二进制字节流\"><a class=\"anchor\" href=\"#通过responsebodybytestream获取返回的二进制字节流\">#</a> 通过 response.body ().byteStream () 获取返回的二进制字节流</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * get 同步请求</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 通过 response.body ().byteStream () 获取返回的二进制字节流</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @param url</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">InputStream</span> <span class=\"token function\">getSyncBackByteStream</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Request</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Call</span> call <span class=\"token operator\">=</span> okHttpClient<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">Response</span> response <span class=\"token operator\">=</span> call<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 将 response 转化成 String</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">InputStream</span> responseStr <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">byteStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> responseStr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET同步请求解析为String异常\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"通过responsebodybytestream获取返回的二进制字节流-2\"><a class=\"anchor\" href=\"#通过responsebodybytestream获取返回的二进制字节流-2\">#</a> 通过 response.body ().byteStream () 获取返回的二进制字节流</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * get 同步请求</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 通过 response.body ().byteStream () 获取返回的二进制字节流</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @param url</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Reader</span> <span class=\"token function\">getSyncBackCharReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Request</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Call</span> call <span class=\"token operator\">=</span> okHttpClient<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">Response</span> response <span class=\"token operator\">=</span> call<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 将 response 转化成 String</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">Reader</span> responseStr <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">charStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> responseStr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET同步请求解析为Reader异常\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"get异步请求\"><a class=\"anchor\" href=\"#get异步请求\">#</a> get 异步请求</h2>\n<h3 id=\"get异步请求不传参数\"><a class=\"anchor\" href=\"#get异步请求不传参数\">#</a> get 异步请求不传参数</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * get 异步请求不传参数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 通过 response.body ().string () 获取返回的字符串</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * 异步返回值不能更新 UI，要开启新线程</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @param url</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getAsynBackStringWithoutParms</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MyDataCallBack</span> myDataCallBack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Request</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">Call</span> call <span class=\"token operator\">=</span> okHttpClient<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">onBefore</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 请求加入调度</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        call<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//                 Logger.e (\"GET 异步请求为 String 失败\"+e.toString ());                    myDataCallBack.requestFailure (request, e);                &#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onResponse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Response</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                responseStrGETAsyn <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">requestSuccess</span><span class=\"token punctuation\">(</span>responseStrGETAsyn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>GET异步请求为<span class=\"token class-name\">String</span>解析异常失败<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">onAfter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>GET异步请求解析为<span class=\"token class-name\">String</span>异常<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">return</span> responseStrGETAsyn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"get异步请求传参数可以传null\"><a class=\"anchor\" href=\"#get异步请求传参数可以传null\">#</a> get 异步请求传参数 (可以传 null)</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * get 异步请求传参数 (可以传 null)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 通过 response.body ().string () 获取返回的字符串</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * 异步返回值不能更新 UI，要开启新线程</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @param url</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getAsynBackStringWithParms</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> params<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MyDataCallBack</span> myDataCallBack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>params  <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            params <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 请求 url（baseUrl + 参数）</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">String</span> doUrl <span class=\"token operator\">=</span> <span class=\"token function\">urlJoint</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Request</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>doUrl<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//                .header (\"Cookie\", \"自动管理更新需要携带的 Cookie\")</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Call</span> call <span class=\"token operator\">=</span> okHttpClient<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">onBefore</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">// 请求加入调度</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            call<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//                 Logger.e (\"GET 异步请求为 String 失败\"+e.toString ());                    myDataCallBack.requestFailure (request, e);                &#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onResponse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Response</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                responseStrGETAsyn <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">requestSuccess</span><span class=\"token punctuation\">(</span>responseStrGETAsyn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>GET异步请求为<span class=\"token class-name\">String</span>解析异常失败<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">onAfter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>GET异步请求解析为<span class=\"token class-name\">String</span>异常<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">return</span> responseStrGETAsyn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"明文传参拼接url\"><a class=\"anchor\" href=\"#明文传参拼接url\">#</a> 明文传参拼接 URL</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * @param url    实际 URL 的 path</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * @param params</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">urlJoint</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">StringBuilder</span> realURL <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constant</span><span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        realURL <span class=\"token operator\">=</span> realURL<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">boolean</span> isFirst <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>params  <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            params <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> entrySet <span class=\"token operator\">=</span> params<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> entry <span class=\"token operator\">:</span> entrySet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isFirst <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    isFirst <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    realURL<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    realURL<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                realURL<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                realURL<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    realURL<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    realURL<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">return</span> realURL<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"okhttp310的post封装请求\"><a class=\"anchor\" href=\"#okhttp310的post封装请求\">#</a> OKHTTP3.10 的 POST 封装请求</h1>\n<h2 id=\"post异步请求map传参\"><a class=\"anchor\" href=\"#post异步请求map传参\">#</a> post 异步请求 map 传参</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * post 异步请求 map 传参</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 通过 response.body ().string () 获取返回的字符串</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * 异步返回值不能更新 UI，要开启新线程</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @param url</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">postAsynBackString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> params<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MyDataCallBack</span> myDataCallBack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">RequestBody</span> requestBody<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>params  <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            params <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">FormBody<span class=\"token punctuation\">.</span>Builder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormBody<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * 在这对添加的参数进行遍历</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">addMapParmsToFromBody</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> builder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    requestBody <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">String</span> realURL <span class=\"token operator\">=</span> <span class=\"token function\">urlJoint</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 结果返回</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Request</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>realURL<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>requestBody<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token class-name\">Call</span> call <span class=\"token operator\">=</span> okHttpClient<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">onBefore</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 请求加入调度</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        call<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">requestFailure</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onResponse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Response</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                responseStrGETAsyn <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 此处也可以解析为 byte [],Reader,InputStream</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">requestSuccess</span><span class=\"token punctuation\">(</span>responseStrGETAsyn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>POST异步请求为<span class=\"token class-name\">String</span>解析异常失败<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">onAfter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>POST异步请求解析为<span class=\"token class-name\">String</span>异常<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">return</span> responseStrGETAsyn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"将参数添加到请求体\"><a class=\"anchor\" href=\"#将参数添加到请求体\">#</a> 将参数添加到请求体</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addMapParmsToFromBody</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> params<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FormBody<span class=\"token punctuation\">.</span>Builder</span> builder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">:</span> params<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token class-name\">String</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>             * 判断值是否是空的</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                value <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                value <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>             * 把 key 和 value 添加到 formbody 中</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            builder<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"post异步请求json传参\"><a class=\"anchor\" href=\"#post异步请求json传参\">#</a> post 异步请求 json 传参</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * post 异步请求 json 传参</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 通过 response.body ().string () 获取返回的字符串</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * 异步返回值不能更新 UI，要开启新线程</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @param url</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">postAsynRequireJson</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> params<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MyDataCallBack</span> myDataCallBack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>params  <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        params <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 将 map 转换成 json, 需要引入 Gson 包</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">String</span> mapToJson <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Gson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJson</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> realURL <span class=\"token operator\">=</span> <span class=\"token function\">urlJoint</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Request</span> request <span class=\"token operator\">=</span> <span class=\"token function\">buildJsonPostRequest</span><span class=\"token punctuation\">(</span>realURL<span class=\"token punctuation\">,</span> mapToJson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">Call</span> call <span class=\"token operator\">=</span> okHttpClient<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">onBefore</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 请求加入调度</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        call<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">requestFailure</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onResponse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Response</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                responseStrGETAsyn <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 此处也可以解析为 byte [],Reader,InputStream</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">requestSuccess</span><span class=\"token punctuation\">(</span>responseStrGETAsyn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>POST异步请求为<span class=\"token class-name\">String</span>解析异常失败<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">onAfter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>POST异步请求解析为<span class=\"token class-name\">String</span>异常<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">return</span> responseStrGETAsyn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"以json方式传入请求体\"><a class=\"anchor\" href=\"#以json方式传入请求体\">#</a> 以 json 方式传入请求体</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token operator\">*</span> <span class=\"token class-name\">Json_POST</span>请求参数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token operator\">*</span> <span class=\"token annotation punctuation\">@param</span> url  url</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token operator\">*</span> <span class=\"token annotation punctuation\">@param</span> json json</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token operator\">*</span> <span class=\"token annotation punctuation\">@return</span> requestBody</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token operator\">*</span><span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Request</span> <span class=\"token function\">buildJsonPostRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> json<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//        RequestBody requestBody = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), json);</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">RequestBody</span> requestBody <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestBody</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>JSON<span class=\"token punctuation\">,</span> json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>requestBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"以string方式传入请求体\"><a class=\"anchor\" href=\"#以string方式传入请求体\">#</a> 以 String 方式传入请求体</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * String_POST 请求参数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * @param url  url</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @param json json</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @return requestBody</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Request</span> <span class=\"token function\">buildStringPostRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> json<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">RequestBody</span> requestBody <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestBody</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>MEDIA_TYPE_MARKDOWN<span class=\"token punctuation\">,</span> json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>requestBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"文件上传\"><a class=\"anchor\" href=\"#文件上传\">#</a> 文件上传：</h1>\n<h2 id=\"基于http的文件上传传入文件名和key\"><a class=\"anchor\" href=\"#基于http的文件上传传入文件名和key\">#</a> 基于 http 的文件上传（传入文件名和 key）</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 基于 http 的文件上传（传入文件名和 key）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 通过 addFormDataPart</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @param url            URL 的 Path 部分</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @param myDataCallBack 自定义回调接口</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     *                       将 file 作为请求体传入到服务端.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @param fileKey        文件传入服务器的键 \"image\"</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * @fileName: \"pic.png\"</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">upLoadMultiFileSimple</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> fileKey<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MyDataCallBack</span> myDataCallBack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Environment</span><span class=\"token punctuation\">.</span><span class=\"token function\">getExternalStorageDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">RequestBody</span> fileBody <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestBody</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"application/octet-stream\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">RequestBody</span> requestBody <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MultipartBody<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">setType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MultipartBody</span><span class=\"token punctuation\">.</span>FORM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">addFormDataPart</span><span class=\"token punctuation\">(</span>fileKey<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">,</span> fileBody<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> realURL <span class=\"token operator\">=</span> <span class=\"token function\">urlJoint</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Request</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>realURL<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>requestBody<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token class-name\">Call</span> call <span class=\"token operator\">=</span> okHttpClient<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">onBefore</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 请求加入调度</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        call<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">requestFailure</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onResponse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Response</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">requestSuccess</span><span class=\"token punctuation\">(</span>responseStrGETAsyn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>POST异步文件上传失败<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">onAfter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>POST异步文件上传异常<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"基于http的文件上传混合参数和文件请求\"><a class=\"anchor\" href=\"#基于http的文件上传混合参数和文件请求\">#</a> 基于 http 的文件上传，混合参数和文件请求</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 基于 http 的文件上传（传入文件数组和 key）混合参数和文件请求</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 通过 addFormDataPart 可以添加多个上传的文件</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @param url            URL 的 Path 部分</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @param myDataCallBack 自定义回调接口</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     *                       将 file 作为请求体传入到服务端.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @param files          上传的文件</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * @param fileKeys       上传的文件 key 集合</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">upLoadMultiFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> files<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fileKeys<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> params<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MyDataCallBack</span> myDataCallBack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>params  <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            params <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> realURL <span class=\"token operator\">=</span> <span class=\"token function\">urlJoint</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">FormBody<span class=\"token punctuation\">.</span>Builder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormBody<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">addMapParmsToFromBody</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> builder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">RequestBody</span> requestBody <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">MultipartBody<span class=\"token punctuation\">.</span>Builder</span> multipartBody <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MultipartBody<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        multipartBody<span class=\"token punctuation\">.</span><span class=\"token function\">setType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MultipartBody</span><span class=\"token punctuation\">.</span>ALTERNATIVE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">addPart</span><span class=\"token punctuation\">(</span>requestBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>files <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">RequestBody</span> fileBody <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> files<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> files<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">String</span> fileName <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            fileBody <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestBody</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token function\">guessMimeType</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">//TODO 根据文件名设置 contentType</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            multipartBody<span class=\"token punctuation\">.</span><span class=\"token function\">addPart</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Headers</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token class-name\">Content</span><span class=\"token operator\">-</span><span class=\"token class-name\">Disposition</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>form<span class=\"token operator\">-</span>data<span class=\"token punctuation\">;</span> name<span class=\"token operator\">=</span>\\<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span> fileKeys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>\\<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span> filename<span class=\"token operator\">=</span>\\<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span> fileName <span class=\"token operator\">+</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>\\<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    fileBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Request</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>realURL<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>multipartBody<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token class-name\">Call</span> call <span class=\"token operator\">=</span> okHttpClient<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">onBefore</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// 请求加入调度</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        call<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">requestFailure</span><span class=\"token punctuation\">(</span>call<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onResponse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Response</span> response<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                    myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">requestSuccess</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>POST异步文件上传失败<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">onAfter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>POST异步文件上传异常<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">guessMimeType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>        <span class=\"token class-name\">FileNameMap</span> fileNameMap <span class=\"token operator\">=</span> <span class=\"token class-name\">URLConnection</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFileNameMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token class-name\">String</span> contentTypeFor <span class=\"token operator\">=</span> fileNameMap<span class=\"token punctuation\">.</span><span class=\"token function\">getContentTypeFor</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>contentTypeFor  <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>            contentTypeFor <span class=\"token operator\">=</span> <span class=\"token string\">\"application/octet-stream\"</span><span class=\"token punctuation\">;</span>        <span class=\"token punctuation\">&#125;</span>        <span class=\"token keyword\">return</span> contentTypeFor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"文件下载\"><a class=\"anchor\" href=\"#文件下载\">#</a> 文件下载</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 文件下载</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * @param url path 路径</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * @param destFileDir 本地存储的文件夹路径</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @param myDataCallBack 自定义回调接口</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">downLoadFileAsyn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> destFileDir<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MyDataCallBack</span> myDataCallBack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">String</span> realURL<span class=\"token operator\">=</span><span class=\"token function\">urlJoint</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Request</span> request<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>realURL<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Call</span> call<span class=\"token operator\">=</span>okHttpClient<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        call<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">requestFailure</span><span class=\"token punctuation\">(</span>call<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onResponse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Response</span> response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">InputStream</span> is <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token class-name\">FileOutputStream</span> fos <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            is <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">byteStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>destFileDir<span class=\"token punctuation\">,</span> <span class=\"token function\">getFileName</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">=</span> is<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    fos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                fos<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>文件下载异常：<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                        is<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                        <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>文件流关闭异常：<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fos <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                        fos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                        <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>文件流关闭异常：<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token comment\">// 如果下载文件成功，第一个参数为文件的绝对路径</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token function\">sendSuccessResultCallback</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> myDataCallBack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">requestSuccess</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getFileName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>        <span class=\"token keyword\">int</span> separatorIndex <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>separatorIndex <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> url <span class=\"token operator\">:</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>separatorIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendSuccessResultCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> absolutePath<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MyDataCallBack</span> myDataCallBack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token class-name\">ThreadPoolUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myDataCallBack<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">requestSuccess</span><span class=\"token punctuation\">(</span>absolutePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"自定义callback回调mydatacallback\"><a class=\"anchor\" href=\"#自定义callback回调mydatacallback\">#</a> 自定义 CallBack 回调 MyDataCallBack</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>ytf<span class=\"token punctuation\">.</span>httpdemo<span class=\"token punctuation\">.</span>okhttp</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>gson<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GsonTypes</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStream</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Reader</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ParameterizedType</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Type</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Request</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>@author ytf</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>正常情况下多数返回的是 string 格式，</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>如果要接收返回其他类型的数据可以依照需求放开注释，</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>使用参照同步请求做法</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>/public abstract class MyDataCallBack&lt;T> &#123;  // 请求数据的返回类型，包含常见的（Bean，List 等）  Type mType;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  public MyDataCallBack () &#123;//        mType=getSuperclassTypeParameter (getClass ());  &#125;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  /**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>通过反射返回想要的类型</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>@param subclass</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>@return</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>/</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>static Type getSuperclassTypeParameter (Class&lt;?> subclass) &#123;  Type superclass = subclass.getGenericSuperclass ();  if (superclass instanceof Class) &#123;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  throw new RuntimeException (&amp;quot; 未知返回类型 & amp;quot;);</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  &#125;  ParameterizedType parameterized = (ParameterizedType) superclass;  return GsonTypes.canonicalize (parameterized.getActualTypeArguments ()[0]);&#125;/**</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>在请求之前的方法，一般用于加载进度框 ProgressBar 展示</pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>@param request</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>/public  abstract void onBefore (Request request);</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>public abstract void requestSuccess (T result);</pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>//    void requestSuccess (Reader result) throws Exception;//    void requestSuccess (InputStream result) throws Exception;//    void requestSuccess (byte [] result) throws Exception;</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>public abstract void requestFailure (Request request, IOException e);</pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"46\"></td><td><pre> * 在请求之后的方法，一般用于加载框隐藏</pre></td></tr><tr><td data-num=\"47\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onAfter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"自定义日志拦截器\"><a class=\"anchor\" href=\"#自定义日志拦截器\">#</a> 自定义日志拦截器</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>ytf<span class=\"token punctuation\">.</span>httpdemo<span class=\"token punctuation\">.</span>okhttp</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orhanobut<span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Logger</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Locale</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Interceptor</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Request</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Response</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>@author ytf 自定义拦截器 Chain 对象可以拿到当前请求的 Request 对象，然后我们可以对 Request 做二次处理， 最后生成我们需要的请求，然后再通过网络发送请求到服务端，这样就完成了一次拦截 /public class HeaderInterceptor implements Interceptor &#123;@Override public Response intercept (Chain chain) throws IOException &#123; Request request = chain.request (); Logger.d (String.format (&amp;quot;Sending request % s on % s% n% s&amp;quot;, request.url (), chain.connection (), request.headers ())); long t1 = System.nanoTime (); okhttp3.Response response = chain.proceed (chain.request ()); long t2 = System.nanoTime (); Logger.d (String.format (Locale.getDefault (), &amp;quot;Received response for % s in %.1fms% n% s&amp;quot;, response.request ().url (), (t2 - t1) / 1e6d, response.headers ())); okhttp3.MediaType mediaType = response.body ().contentType (); String content = response.body ().string (); Logger.json (content); Response response1=chain.proceed (request); Logger.d (&amp;quot; 返回 response：&amp;quot;,response1.toString ()); return response.newBuilder () .header (&amp;quot;Authorization&amp;quot;, &amp;quot; 请求头授权信息拦截 & amp;quot;) .body (okhttp3.ResponseBody.create (mediaType, content)) .build ();&#125;&#125;</span></pre></td></tr></table></figure><h2 id=\"自定义网络拦截器\"><a class=\"anchor\" href=\"#自定义网络拦截器\">#</a> 自定义网络拦截器</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>ytf<span class=\"token punctuation\">.</span>httpdemo<span class=\"token punctuation\">.</span>okhttp</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Context</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConnectivityManager</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NetworkInfo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>ytf<span class=\"token punctuation\">.</span>httpdemo<span class=\"token punctuation\">.</span></span>APP<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CacheControl</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Interceptor</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Request</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Response</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>@author ytf</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>设置网络拦截器，实现在线和离线缓存</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>/public class CacheInterceptor implements Interceptor &#123;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  @Override  public Response intercept (Chain chain) throws IOException &#123;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  Request request = chain.request ();</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  if (!isNetworkConnected ()) &#123;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      request = request.newBuilder ()</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>              .cacheControl (CacheControl.FORCE_CACHE)</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>              .build ();</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  Response originalResponse = chain.proceed (request);</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  if (isNetworkConnected ()) &#123;</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      // 有网的时候读接口上的 @Headers 里的配置，你可以在这里进行统一的设置 (注掉部分)</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      String cacheControl = request.cacheControl ().toString ();</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      return originalResponse.newBuilder ()</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>              .header (&amp;quot;Cache-Control&amp;quot;, cacheControl)</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>              //.header (&amp;quot;Cache-Control&amp;quot;, &amp;quot;max-age=3600&amp;quot;)</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>              .removeHeader (&amp;quot;Pragma&amp;quot;) // 清除头信息，因为服务器如果不支持，会返回一些干扰信息，不清除下面无法生效</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>              .build ();</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  &#125; else &#123;</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>//1. 不需要缓存：Cache-Control: no-cache 或 Cache-Control: max-age=0//2. 如果想先显示数据，在请求。（类似于微博等）：Cache-Control: only-if-cached</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      int maxAge = 60 * 60;</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      return originalResponse.newBuilder ()</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>              .header (&amp;quot;Cache-Control&amp;quot;, &amp;quot;public, only-if-cached, max-age=&amp;quot; + maxAge)</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>              .removeHeader (&amp;quot;Pragma&amp;quot;)</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>              .build ();</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  /**</pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>判断网络是否可用的方法</pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>@return</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>/private boolean isNetworkConnected () &#123;  ConnectivityManager connectivity = (ConnectivityManager) APP.getInstance ()      .getSystemService (Context.CONNECTIVITY_SERVICE);</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  if (null != connectivity) &#123;  NetworkInfo info = connectivity.getActiveNetworkInfo ();</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  if (null != info &amp;amp;&amp;amp; info.isConnected ()) &#123;</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      if (info.getState ()  NetworkInfo.State.CONNECTED) &#123;</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>          return true;</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  &#125;  return false;&#125;</pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>&#125;</span></pre></td></tr></table></figure><h2 id=\"工具类详细代码\"><a class=\"anchor\" href=\"#工具类详细代码\">#</a> 工具类详细代码：</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>ytf<span class=\"token punctuation\">.</span>httpdemo<span class=\"token punctuation\">.</span>okhttp</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Environment</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>ytf<span class=\"token punctuation\">.</span>httpdemo<span class=\"token punctuation\">.</span></span>APP<span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>ytf<span class=\"token punctuation\">.</span>httpdemo<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Constant</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>ytf<span class=\"token punctuation\">.</span>httpdemo<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ThreadPoolUtil</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>gson<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Gson</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>gson<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GsonTypes</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orhanobut<span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Logger</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileNotFoundException</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStream</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Reader</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ParameterizedType</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Type</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConnectException</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileNameMap</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SocketException</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SocketTimeoutException</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">URLConnection</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UnknownHostException</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ParameterMetaData</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Set</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Cache</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Call</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Callback</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CookieJar</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FormBody</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Headers</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpUrl</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MultipartBody</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">OkHttpClient</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Request</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestBody</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Response</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResponseBody</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>@author ytf</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>/public class OkHTTPManger &#123;private static OkHttpClient okHttpClient;  private volatile static OkHTTPManger instance;// 防止多个线程同时访问  // 提交 json 数据  private static final MediaType JSON = MediaType.parse (\"application/json;charset=utf-8\");  // 提交字符串数据  private static final MediaType MEDIA_TYPE_MARKDOWN = MediaType.parse (\"text/x-markdown;charset=utf-8\");  private static String responseStrGETAsyn;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  private final HashMap&lt;String, List&lt;Cookie>> cookieStore = new HashMap&lt;>();// 使用 getCacheDir () 来作为缓存文件的存放路径（/data/data/ 包名 /cache） ，// 如果你想看到缓存文件可以临时使用 getExternalCacheDir ()（/sdcard/Android/data/ 包名 /cache）。  private static File cacheFile;  private static Cache cache;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  public OkHTTPManger () &#123;//        if (APP.getInstance ().getApplicationContext ().getCacheDir ()!=null)&#123;//            cacheFile = new File (APP.getInstance ().getCacheDir (), \"Test\");//            cache = new Cache (cacheFile, 1024 * 1024 * 10);//        &#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  okHttpClient = new OkHttpClient ();</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  okHttpClient.newBuilder ()</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>//                .addInterceptor (new HeaderInterceptor ())//                .addNetworkInterceptor (new CacheInterceptor ())//                .cache (cache)</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          .connectTimeout (10, TimeUnit.SECONDS)</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          .readTimeout (10, TimeUnit.SECONDS)</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          .writeTimeout (10, TimeUnit.SECONDS)</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          .cookieJar (new CookieJar () &#123;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>              @Override</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>              public void saveFromResponse (HttpUrl url, List&amp;lt;Cookie&amp;gt; cookies) &#123;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                  cookieStore.put (url.host (), cookies);</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>              &#125;</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>              @Override</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>              public List&amp;lt;Cookie&amp;gt; loadForRequest (HttpUrl url) &#123;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                  List&amp;lt;Cookie&amp;gt; cookies = cookieStore.get (url.host ());</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                  return cookies != null ? cookies : new ArrayList&amp;lt;Cookie&amp;gt;();</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>// 自动管理 Cookie 发送 Request 都不用管 Cookie 这个参数也不用去 response 获取新 Cookie 什么的了。还能通过 cookieStore 获取当前保存的 Cookie。</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>              &#125;</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>          &#125;);</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  /**</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>懒汉式加锁单例模式</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>@return</pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>/public static OkHTTPManger getInstance () &#123;  if (instance  null) &#123;</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  synchronized (OkHTTPManger.class) &#123;</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      if (instance  null) &#123;</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>          instance = new OkHTTPManger ();</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  &#125;  return instance;&#125;</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>get 同步请求不需要传参数</pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>通过 response.body ().string () 获取返回的字符串</pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>@param url</pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>@return</pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>/public String getSyncBackString (String url) &#123;  Request request = new Request.Builder ()</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>      .url (url)</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      .build ();</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  Call call = okHttpClient.newCall (request);  try &#123;</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  Response response = call.execute ();</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  // 将 response 转化成 String</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  String responseStr = response.body ().string ();</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  return responseStr;</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  &#125; catch (IOException e) &#123;</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  Logger.e (&amp;quot;GET 同步请求解析为 String 异常 & amp;quot; + e.toString ());</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  e.printStackTrace ();</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  &#125;  return null;&#125;</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>get 同步请求</pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>通过 response.body ().bytes () 获取返回的二进制字节数组</pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>@param url</pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>@return</pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>/public byte [] getSyncBackByteArray (String url) &#123;  Request request = new Request.Builder ()</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>      .url (url)</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>      .build ();</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  Call call = okHttpClient.newCall (request);  try &#123;</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  Response response = call.execute ();</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>  // 将 response 转化成 String</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  byte [] responseStr = response.body ().bytes ();</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  return responseStr;</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>  &#125; catch (IOException e) &#123;</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>  Logger.e (&amp;quot;GET 同步请求解析为 byte 数组异常 & amp;quot; + e.toString ());</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>  e.printStackTrace ();</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  &#125;  return null;&#125;</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>get 同步请求</pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>通过 response.body ().byteStream () 获取返回的二进制字节流</pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>@param url</pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>@return</pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>/public InputStream getSyncBackByteStream (String url) &#123;  Request request = new Request.Builder ()</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>      .url (url)</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>      .build ();</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>  Call call = okHttpClient.newCall (request);  try &#123;</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>  Response response = call.execute ();</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>  // 将 response 转化成 String</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>  InputStream responseStr = response.body ().byteStream ();</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>  return responseStr;</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  &#125; catch (IOException e) &#123;</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>  Logger.e (&amp;quot;GET 同步请求解析为 String 异常 & amp;quot; + e.toString ());</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>  e.printStackTrace ();</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>  &#125;  return null;&#125;</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>get 同步请求</pre></td></tr><tr><td data-num=\"119\"></td><td><pre></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>通过 response.body ().byteStream () 获取返回的二进制字节流</pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>@param url</pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>@return</pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>/public Reader getSyncBackCharReader (String url) &#123;  Request request = new Request.Builder ()</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>      .url (url)</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>      .build ();</pre></td></tr><tr><td data-num=\"130\"></td><td><pre>  Call call = okHttpClient.newCall (request);  try &#123;</pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  Response response = call.execute ();</pre></td></tr><tr><td data-num=\"132\"></td><td><pre>  // 将 response 转化成 String</pre></td></tr><tr><td data-num=\"133\"></td><td><pre>  Reader responseStr = response.body ().charStream ();</pre></td></tr><tr><td data-num=\"134\"></td><td><pre>  return responseStr;</pre></td></tr><tr><td data-num=\"135\"></td><td><pre>  &#125; catch (IOException e) &#123;</pre></td></tr><tr><td data-num=\"136\"></td><td><pre>  Logger.e (&amp;quot;GET 同步请求解析为 Reader 异常 & amp;quot; + e.toString ());</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>  e.printStackTrace ();</pre></td></tr><tr><td data-num=\"138\"></td><td><pre>  &#125;  return null;&#125;</pre></td></tr><tr><td data-num=\"139\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"140\"></td><td><pre></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>get 异步请求不传参数</pre></td></tr><tr><td data-num=\"142\"></td><td><pre></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>通过 response.body ().string () 获取返回的字符串</pre></td></tr><tr><td data-num=\"144\"></td><td><pre></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>异步返回值不能更新 UI，要开启新线程</pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>@param url</pre></td></tr><tr><td data-num=\"149\"></td><td><pre></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>@return</pre></td></tr><tr><td data-num=\"151\"></td><td><pre></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>/public String getAsynBackStringWithoutParms (String url, final MyDataCallBack myDataCallBack) &#123;</pre></td></tr><tr><td data-num=\"153\"></td><td><pre>  final Request request = new Request.Builder ()</pre></td></tr><tr><td data-num=\"154\"></td><td><pre>      .url (url)</pre></td></tr><tr><td data-num=\"155\"></td><td><pre>      .build ();</pre></td></tr><tr><td data-num=\"156\"></td><td><pre>  Call call = okHttpClient.newCall (request);  try &#123;</pre></td></tr><tr><td data-num=\"157\"></td><td><pre>  myDataCallBack.onBefore (request);</pre></td></tr><tr><td data-num=\"158\"></td><td><pre>  // 请求加入调度</pre></td></tr><tr><td data-num=\"159\"></td><td><pre>  call.enqueue (new Callback () &#123;</pre></td></tr><tr><td data-num=\"160\"></td><td><pre></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>      @Override</pre></td></tr><tr><td data-num=\"162\"></td><td><pre>      public void onFailure (Call call, IOException e) &#123;</pre></td></tr><tr><td data-num=\"163\"></td><td><pre>//                 Logger.e (\"GET 异步请求为 String 失败\"+e.toString ());</pre></td></tr><tr><td data-num=\"164\"></td><td><pre>          myDataCallBack.requestFailure (request, e);</pre></td></tr><tr><td data-num=\"165\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"166\"></td><td><pre></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>      @Override</pre></td></tr><tr><td data-num=\"168\"></td><td><pre>      public void onResponse (Call call, Response response) throws IOException &#123;</pre></td></tr><tr><td data-num=\"169\"></td><td><pre>          responseStrGETAsyn = response.body ().string ();</pre></td></tr><tr><td data-num=\"170\"></td><td><pre>          try &#123;</pre></td></tr><tr><td data-num=\"171\"></td><td><pre>              myDataCallBack.requestSuccess (responseStrGETAsyn);</pre></td></tr><tr><td data-num=\"172\"></td><td><pre></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>          &#125; catch (Exception e) &#123;</pre></td></tr><tr><td data-num=\"174\"></td><td><pre>              e.printStackTrace ();</pre></td></tr><tr><td data-num=\"175\"></td><td><pre>              Logger.e (&amp;quot;GET 异步请求为 String 解析异常失败 & amp;quot; + e.toString ());</pre></td></tr><tr><td data-num=\"176\"></td><td><pre>          &#125;</pre></td></tr><tr><td data-num=\"177\"></td><td><pre></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"179\"></td><td><pre>  &#125;);</pre></td></tr><tr><td data-num=\"180\"></td><td><pre></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>  myDataCallBack.onAfter ();</pre></td></tr><tr><td data-num=\"182\"></td><td><pre>  &#125; catch (Exception e) &#123;</pre></td></tr><tr><td data-num=\"183\"></td><td><pre>  Logger.e (&amp;quot;GET 异步请求解析为 String 异常 & amp;quot; + e.toString ());</pre></td></tr><tr><td data-num=\"184\"></td><td><pre>  e.printStackTrace ();</pre></td></tr><tr><td data-num=\"185\"></td><td><pre>  &#125;  return responseStrGETAsyn;&#125;</pre></td></tr><tr><td data-num=\"186\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"187\"></td><td><pre></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>get 异步请求传参数 (可以传 null)</pre></td></tr><tr><td data-num=\"189\"></td><td><pre></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>通过 response.body ().string () 获取返回的字符串</pre></td></tr><tr><td data-num=\"191\"></td><td><pre></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>异步返回值不能更新 UI，要开启新线程</pre></td></tr><tr><td data-num=\"193\"></td><td><pre></pre></td></tr><tr><td data-num=\"194\"></td><td><pre></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>@param url</pre></td></tr><tr><td data-num=\"196\"></td><td><pre></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>@return</pre></td></tr><tr><td data-num=\"198\"></td><td><pre></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>/public String getAsynBackStringWithParms (String url, Map&lt;String, String> params, final MyDataCallBack myDataCallBack) &#123;  if (params  null) &#123;</pre></td></tr><tr><td data-num=\"200\"></td><td><pre>  params = new HashMap&amp;lt;&amp;gt;();</pre></td></tr><tr><td data-num=\"201\"></td><td><pre>  &#125;  // 请求 url（baseUrl + 参数）  String doUrl = urlJoint (url, params);  final Request request = new Request.Builder ()</pre></td></tr><tr><td data-num=\"202\"></td><td><pre>      .url (doUrl)</pre></td></tr><tr><td data-num=\"203\"></td><td><pre>//                .header (\"Cookie\", \"自动管理更新需要携带的 Cookie\")</pre></td></tr><tr><td data-num=\"204\"></td><td><pre>      .build ();</pre></td></tr><tr><td data-num=\"205\"></td><td><pre>  Call call = okHttpClient.newCall (request);  try &#123;</pre></td></tr><tr><td data-num=\"206\"></td><td><pre>  myDataCallBack.onBefore (request);</pre></td></tr><tr><td data-num=\"207\"></td><td><pre>  // 请求加入调度</pre></td></tr><tr><td data-num=\"208\"></td><td><pre>  call.enqueue (new Callback () &#123;</pre></td></tr><tr><td data-num=\"209\"></td><td><pre></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>      @Override</pre></td></tr><tr><td data-num=\"211\"></td><td><pre>      public void onFailure (Call call, IOException e) &#123;</pre></td></tr><tr><td data-num=\"212\"></td><td><pre>//                 Logger.e (\"GET 异步请求为 String 失败\"+e.toString ());</pre></td></tr><tr><td data-num=\"213\"></td><td><pre>          myDataCallBack.requestFailure (request, e);</pre></td></tr><tr><td data-num=\"214\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"215\"></td><td><pre></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>      @Override</pre></td></tr><tr><td data-num=\"217\"></td><td><pre>      public void onResponse (Call call, Response response) throws IOException &#123;</pre></td></tr><tr><td data-num=\"218\"></td><td><pre>          responseStrGETAsyn = response.body ().string ();</pre></td></tr><tr><td data-num=\"219\"></td><td><pre>          try &#123;</pre></td></tr><tr><td data-num=\"220\"></td><td><pre>              myDataCallBack.requestSuccess (responseStrGETAsyn);</pre></td></tr><tr><td data-num=\"221\"></td><td><pre></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>          &#125; catch (Exception e) &#123;</pre></td></tr><tr><td data-num=\"223\"></td><td><pre>              e.printStackTrace ();</pre></td></tr><tr><td data-num=\"224\"></td><td><pre>              Logger.e (&amp;quot;GET 异步请求为 String 解析异常失败 & amp;quot; + e.toString ());</pre></td></tr><tr><td data-num=\"225\"></td><td><pre>          &#125;</pre></td></tr><tr><td data-num=\"226\"></td><td><pre></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"228\"></td><td><pre>  &#125;);</pre></td></tr><tr><td data-num=\"229\"></td><td><pre></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>  myDataCallBack.onAfter ();</pre></td></tr><tr><td data-num=\"231\"></td><td><pre>  &#125; catch (Exception e) &#123;</pre></td></tr><tr><td data-num=\"232\"></td><td><pre>  Logger.e (&amp;quot;GET 异步请求解析为 String 异常 & amp;quot; + e.toString ());</pre></td></tr><tr><td data-num=\"233\"></td><td><pre>  e.printStackTrace ();</pre></td></tr><tr><td data-num=\"234\"></td><td><pre>  &#125;  return responseStrGETAsyn;&#125;</pre></td></tr><tr><td data-num=\"235\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"236\"></td><td><pre></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>post 异步请求 map 传参</pre></td></tr><tr><td data-num=\"238\"></td><td><pre></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>通过 response.body ().string () 获取返回的字符串</pre></td></tr><tr><td data-num=\"240\"></td><td><pre></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>异步返回值不能更新 UI，要开启新线程</pre></td></tr><tr><td data-num=\"242\"></td><td><pre></pre></td></tr><tr><td data-num=\"243\"></td><td><pre></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>@param url</pre></td></tr><tr><td data-num=\"245\"></td><td><pre></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>@return</pre></td></tr><tr><td data-num=\"247\"></td><td><pre></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>/public String postAsynBackString (String url, Map&lt;String, String> params, final MyDataCallBack myDataCallBack) &#123;  RequestBody requestBody;  if (params  null) &#123;</pre></td></tr><tr><td data-num=\"249\"></td><td><pre>  params = new HashMap&amp;lt;&amp;gt;();</pre></td></tr><tr><td data-num=\"250\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"251\"></td><td><pre>  FormBody.Builder builder = new FormBody.Builder ();  /**</pre></td></tr><tr><td data-num=\"252\"></td><td><pre></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>在这对添加的参数进行遍历</pre></td></tr><tr><td data-num=\"254\"></td><td><pre></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>/addMapParmsToFromBody (params, builder);</pre></td></tr><tr><td data-num=\"256\"></td><td><pre>requestBody = builder.build ();String realURL = urlJoint (url, null);// 结果返回 final Request request = new Request.Builder ()</pre></td></tr><tr><td data-num=\"257\"></td><td><pre>  .url (realURL)</pre></td></tr><tr><td data-num=\"258\"></td><td><pre>  .post (requestBody)</pre></td></tr><tr><td data-num=\"259\"></td><td><pre>  .build ();</pre></td></tr><tr><td data-num=\"260\"></td><td><pre>Call call = okHttpClient.newCall (request);try &#123;  myDataCallBack.onBefore (request);  // 请求加入调度  call.enqueue (new Callback () &#123;</pre></td></tr><tr><td data-num=\"261\"></td><td><pre>  @Override</pre></td></tr><tr><td data-num=\"262\"></td><td><pre>  public void onFailure (Call call, IOException e) &#123;</pre></td></tr><tr><td data-num=\"263\"></td><td><pre>      myDataCallBack.requestFailure (request, e);</pre></td></tr><tr><td data-num=\"264\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"265\"></td><td><pre></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>  @Override</pre></td></tr><tr><td data-num=\"267\"></td><td><pre>  public void onResponse (Call call, Response response) throws IOException &#123;</pre></td></tr><tr><td data-num=\"268\"></td><td><pre>      responseStrGETAsyn = response.body ().string ();// 此处也可以解析为 byte [],Reader,InputStream</pre></td></tr><tr><td data-num=\"269\"></td><td><pre>      try &#123;</pre></td></tr><tr><td data-num=\"270\"></td><td><pre>          myDataCallBack.requestSuccess (responseStrGETAsyn);</pre></td></tr><tr><td data-num=\"271\"></td><td><pre></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>      &#125; catch (Exception e) &#123;</pre></td></tr><tr><td data-num=\"273\"></td><td><pre>          e.printStackTrace ();</pre></td></tr><tr><td data-num=\"274\"></td><td><pre>          Logger.e (&amp;quot;POST 异步请求为 String 解析异常失败 & amp;quot; + e.toString ());</pre></td></tr><tr><td data-num=\"275\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"276\"></td><td><pre></pre></td></tr><tr><td data-num=\"277\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"278\"></td><td><pre>  &#125;);</pre></td></tr><tr><td data-num=\"279\"></td><td><pre>  myDataCallBack.onAfter ();&#125; catch (Exception e) &#123;  Logger.e (\"POST 异步请求解析为 String 异常\" + e.toString ());  e.printStackTrace ();&#125; return responseStrGETAsyn;&#125;</pre></td></tr><tr><td data-num=\"280\"></td><td><pre></pre></td></tr><tr><td data-num=\"281\"></td><td><pre></pre></td></tr><tr><td data-num=\"282\"></td><td><pre>private void addMapParmsToFromBody (Map&lt;String, String> params, FormBody.Builder builder) &#123;  for (Map.Entry&lt;String, String> map : params.entrySet ()) &#123;</pre></td></tr><tr><td data-num=\"283\"></td><td><pre>  String key = map.getKey ();</pre></td></tr><tr><td data-num=\"284\"></td><td><pre>  String value;</pre></td></tr><tr><td data-num=\"285\"></td><td><pre>  /**</pre></td></tr><tr><td data-num=\"286\"></td><td><pre>   * 判断值是否是空的</pre></td></tr><tr><td data-num=\"287\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"288\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>      value <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"291\"></td><td><pre>      value <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"293\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"294\"></td><td><pre>   * 把 key 和 value 添加到 formbody 中</pre></td></tr><tr><td data-num=\"295\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre>  builder<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"297\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"298\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"299\"></td><td><pre></pre></td></tr><tr><td data-num=\"300\"></td><td><pre>post 异步请求 json 传参</pre></td></tr><tr><td data-num=\"301\"></td><td><pre></pre></td></tr><tr><td data-num=\"302\"></td><td><pre>通过 response.body ().string () 获取返回的字符串</pre></td></tr><tr><td data-num=\"303\"></td><td><pre></pre></td></tr><tr><td data-num=\"304\"></td><td><pre>异步返回值不能更新 UI，要开启新线程</pre></td></tr><tr><td data-num=\"305\"></td><td><pre></pre></td></tr><tr><td data-num=\"306\"></td><td><pre></pre></td></tr><tr><td data-num=\"307\"></td><td><pre>@param url</pre></td></tr><tr><td data-num=\"308\"></td><td><pre></pre></td></tr><tr><td data-num=\"309\"></td><td><pre>@return</pre></td></tr><tr><td data-num=\"310\"></td><td><pre></pre></td></tr><tr><td data-num=\"311\"></td><td><pre>/public String postAsynRequireJson (String url, Map&lt;String, String> params, final MyDataCallBack myDataCallBack) &#123;</pre></td></tr><tr><td data-num=\"312\"></td><td><pre>  if (params  null) &#123;</pre></td></tr><tr><td data-num=\"313\"></td><td><pre>  params = new HashMap&amp;lt;&amp;gt;();</pre></td></tr><tr><td data-num=\"314\"></td><td><pre>  &#125;  // 将 map 转换成 json, 需要引入 Gson 包  String mapToJson = new Gson ().toJson (params);  final String realURL = urlJoint (url, null);  final Request request = buildJsonPostRequest (realURL, mapToJson);  Call call = okHttpClient.newCall (request);  try &#123;</pre></td></tr><tr><td data-num=\"315\"></td><td><pre>  myDataCallBack.onBefore (request);</pre></td></tr><tr><td data-num=\"316\"></td><td><pre>  // 请求加入调度</pre></td></tr><tr><td data-num=\"317\"></td><td><pre>  call.enqueue (new Callback () &#123;</pre></td></tr><tr><td data-num=\"318\"></td><td><pre></pre></td></tr><tr><td data-num=\"319\"></td><td><pre>      @Override</pre></td></tr><tr><td data-num=\"320\"></td><td><pre>      public void onFailure (Call call, IOException e) &#123;</pre></td></tr><tr><td data-num=\"321\"></td><td><pre>          myDataCallBack.requestFailure (request, e);</pre></td></tr><tr><td data-num=\"322\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"323\"></td><td><pre></pre></td></tr><tr><td data-num=\"324\"></td><td><pre>      @Override</pre></td></tr><tr><td data-num=\"325\"></td><td><pre>      public void onResponse (Call call, Response response) throws IOException &#123;</pre></td></tr><tr><td data-num=\"326\"></td><td><pre>          responseStrGETAsyn = response.body ().string ();// 此处也可以解析为 byte [],Reader,InputStream</pre></td></tr><tr><td data-num=\"327\"></td><td><pre>          try &#123;</pre></td></tr><tr><td data-num=\"328\"></td><td><pre>              myDataCallBack.requestSuccess (responseStrGETAsyn);</pre></td></tr><tr><td data-num=\"329\"></td><td><pre></pre></td></tr><tr><td data-num=\"330\"></td><td><pre>          &#125; catch (Exception e) &#123;</pre></td></tr><tr><td data-num=\"331\"></td><td><pre>              e.printStackTrace ();</pre></td></tr><tr><td data-num=\"332\"></td><td><pre>              Logger.e (&amp;quot;POST 异步请求为 String 解析异常失败 & amp;quot; + e.toString ());</pre></td></tr><tr><td data-num=\"333\"></td><td><pre>          &#125;</pre></td></tr><tr><td data-num=\"334\"></td><td><pre></pre></td></tr><tr><td data-num=\"335\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"336\"></td><td><pre>  &#125;);</pre></td></tr><tr><td data-num=\"337\"></td><td><pre></pre></td></tr><tr><td data-num=\"338\"></td><td><pre>  myDataCallBack.onAfter ();</pre></td></tr><tr><td data-num=\"339\"></td><td><pre>  &#125; catch (Exception e) &#123;</pre></td></tr><tr><td data-num=\"340\"></td><td><pre>  Logger.e (&amp;quot;POST 异步请求解析为 String 异常 & amp;quot; + e.toString ());</pre></td></tr><tr><td data-num=\"341\"></td><td><pre>  e.printStackTrace ();</pre></td></tr><tr><td data-num=\"342\"></td><td><pre>  &#125;  return responseStrGETAsyn;&#125;</pre></td></tr><tr><td data-num=\"343\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"344\"></td><td><pre></pre></td></tr><tr><td data-num=\"345\"></td><td><pre>Json_POST 请求参数</pre></td></tr><tr><td data-num=\"346\"></td><td><pre></pre></td></tr><tr><td data-num=\"347\"></td><td><pre></pre></td></tr><tr><td data-num=\"348\"></td><td><pre>@param url  url</pre></td></tr><tr><td data-num=\"349\"></td><td><pre></pre></td></tr><tr><td data-num=\"350\"></td><td><pre>@param json json</pre></td></tr><tr><td data-num=\"351\"></td><td><pre></pre></td></tr><tr><td data-num=\"352\"></td><td><pre>@return requestBody</pre></td></tr><tr><td data-num=\"353\"></td><td><pre></pre></td></tr><tr><td data-num=\"354\"></td><td><pre>/private Request buildJsonPostRequest (String url, String json) &#123;//        RequestBody requestBody = RequestBody.create (MediaType.parse (\"application/json; charset=utf-8\"), json);  RequestBody requestBody = RequestBody.create (JSON, json);  return new Request.Builder ().url (url).post (requestBody).build ();&#125;</pre></td></tr><tr><td data-num=\"355\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"356\"></td><td><pre></pre></td></tr><tr><td data-num=\"357\"></td><td><pre>String_POST 请求参数</pre></td></tr><tr><td data-num=\"358\"></td><td><pre></pre></td></tr><tr><td data-num=\"359\"></td><td><pre></pre></td></tr><tr><td data-num=\"360\"></td><td><pre>@param url  url</pre></td></tr><tr><td data-num=\"361\"></td><td><pre></pre></td></tr><tr><td data-num=\"362\"></td><td><pre>@param json json</pre></td></tr><tr><td data-num=\"363\"></td><td><pre></pre></td></tr><tr><td data-num=\"364\"></td><td><pre>@return requestBody</pre></td></tr><tr><td data-num=\"365\"></td><td><pre></pre></td></tr><tr><td data-num=\"366\"></td><td><pre>/private Request buildStringPostRequest (String url, String json) &#123;  RequestBody requestBody = RequestBody.create (MEDIA_TYPE_MARKDOWN, json);  return new Request.Builder ().url (url).post (requestBody).build ();&#125;</pre></td></tr><tr><td data-num=\"367\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"368\"></td><td><pre></pre></td></tr><tr><td data-num=\"369\"></td><td><pre>@param url    实际 URL 的 path</pre></td></tr><tr><td data-num=\"370\"></td><td><pre></pre></td></tr><tr><td data-num=\"371\"></td><td><pre>@param params</pre></td></tr><tr><td data-num=\"372\"></td><td><pre></pre></td></tr><tr><td data-num=\"373\"></td><td><pre>@return</pre></td></tr><tr><td data-num=\"374\"></td><td><pre></pre></td></tr><tr><td data-num=\"375\"></td><td><pre>/private static String urlJoint (String url, Map&lt;String, String> params) &#123;  StringBuilder realURL = new StringBuilder (Constant.URL);  realURL = realURL.append (url);  boolean isFirst = true;  if (params  null) &#123;</pre></td></tr><tr><td data-num=\"376\"></td><td><pre>  params = new HashMap&amp;lt;&amp;gt;();</pre></td></tr><tr><td data-num=\"377\"></td><td><pre>  &#125; else &#123;</pre></td></tr><tr><td data-num=\"378\"></td><td><pre>  Set&amp;lt;Map.Entry&amp;lt;String, String&amp;gt;&amp;gt; entrySet = params.entrySet ();</pre></td></tr><tr><td data-num=\"379\"></td><td><pre>  for (Map.Entry&amp;lt;String, String&amp;gt; entry : entrySet) &#123;</pre></td></tr><tr><td data-num=\"380\"></td><td><pre>      if (isFirst &amp;amp;&amp;amp; !url.contains (&amp;quot;?&amp;quot;)) &#123;</pre></td></tr><tr><td data-num=\"381\"></td><td><pre>          isFirst = false;</pre></td></tr><tr><td data-num=\"382\"></td><td><pre>          realURL.append (&amp;quot;?&amp;quot;);</pre></td></tr><tr><td data-num=\"383\"></td><td><pre>      &#125; else &#123;</pre></td></tr><tr><td data-num=\"384\"></td><td><pre>          realURL.append (&amp;quot;&amp;amp;&amp;quot;);</pre></td></tr><tr><td data-num=\"385\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"386\"></td><td><pre>      realURL.append (entry.getKey ());</pre></td></tr><tr><td data-num=\"387\"></td><td><pre>      realURL.append (&amp;quot;=&amp;quot;);</pre></td></tr><tr><td data-num=\"388\"></td><td><pre>      if (entry.getValue ()  null) &#123;</pre></td></tr><tr><td data-num=\"389\"></td><td><pre>          realURL.append (&amp;quot; &amp;quot;);</pre></td></tr><tr><td data-num=\"390\"></td><td><pre>      &#125; else &#123;</pre></td></tr><tr><td data-num=\"391\"></td><td><pre>          realURL.append (entry.getValue ());</pre></td></tr><tr><td data-num=\"392\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"393\"></td><td><pre></pre></td></tr><tr><td data-num=\"394\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"395\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"396\"></td><td><pre>  return realURL.toString ();&#125;</pre></td></tr><tr><td data-num=\"397\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"398\"></td><td><pre></pre></td></tr><tr><td data-num=\"399\"></td><td><pre>基于 http 的文件上传（传入文件名和 key）</pre></td></tr><tr><td data-num=\"400\"></td><td><pre></pre></td></tr><tr><td data-num=\"401\"></td><td><pre>通过 addFormDataPart</pre></td></tr><tr><td data-num=\"402\"></td><td><pre></pre></td></tr><tr><td data-num=\"403\"></td><td><pre></pre></td></tr><tr><td data-num=\"404\"></td><td><pre>@param url            URL 的 Path 部分</pre></td></tr><tr><td data-num=\"405\"></td><td><pre></pre></td></tr><tr><td data-num=\"406\"></td><td><pre>@param myDataCallBack 自定义回调接口</pre></td></tr><tr><td data-num=\"407\"></td><td><pre></pre></td></tr><tr><td data-num=\"408\"></td><td><pre>将 file 作为请求体传入到服务端.</pre></td></tr><tr><td data-num=\"409\"></td><td><pre></pre></td></tr><tr><td data-num=\"410\"></td><td><pre>@param fileKey        文件传入服务器的键 \"image\"</pre></td></tr><tr><td data-num=\"411\"></td><td><pre></pre></td></tr><tr><td data-num=\"412\"></td><td><pre>@fileName: \"pic.png\"</pre></td></tr><tr><td data-num=\"413\"></td><td><pre></pre></td></tr><tr><td data-num=\"414\"></td><td><pre>/private void upLoadMultiFileSimple (String url, String fileName, String fileKey, final MyDataCallBack myDataCallBack) &#123;  File file = new File (Environment.getExternalStorageDirectory (), fileName);  RequestBody fileBody = RequestBody.create (MediaType.parse (\"application/octet-stream\"), file);  RequestBody requestBody = new MultipartBody.Builder ()</pre></td></tr><tr><td data-num=\"415\"></td><td><pre>      .setType (MultipartBody.FORM)</pre></td></tr><tr><td data-num=\"416\"></td><td><pre>      .addFormDataPart (fileKey, fileName, fileBody)</pre></td></tr><tr><td data-num=\"417\"></td><td><pre>      .build ();</pre></td></tr><tr><td data-num=\"418\"></td><td><pre>  final String realURL = urlJoint (url, null);  final Request request = new Request.Builder ()</pre></td></tr><tr><td data-num=\"419\"></td><td><pre>      .url (realURL)</pre></td></tr><tr><td data-num=\"420\"></td><td><pre>      .post (requestBody)</pre></td></tr><tr><td data-num=\"421\"></td><td><pre>      .build ();</pre></td></tr><tr><td data-num=\"422\"></td><td><pre>  Call call = okHttpClient.newCall (request);  try &#123;</pre></td></tr><tr><td data-num=\"423\"></td><td><pre>  myDataCallBack.onBefore (request);</pre></td></tr><tr><td data-num=\"424\"></td><td><pre>  // 请求加入调度</pre></td></tr><tr><td data-num=\"425\"></td><td><pre>  call.enqueue (new Callback () &#123;</pre></td></tr><tr><td data-num=\"426\"></td><td><pre></pre></td></tr><tr><td data-num=\"427\"></td><td><pre>      @Override</pre></td></tr><tr><td data-num=\"428\"></td><td><pre>      public void onFailure (Call call, IOException e) &#123;</pre></td></tr><tr><td data-num=\"429\"></td><td><pre>          myDataCallBack.requestFailure (request, e);</pre></td></tr><tr><td data-num=\"430\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"431\"></td><td><pre></pre></td></tr><tr><td data-num=\"432\"></td><td><pre>      @Override</pre></td></tr><tr><td data-num=\"433\"></td><td><pre>      public void onResponse (Call call, Response response) throws IOException &#123;</pre></td></tr><tr><td data-num=\"434\"></td><td><pre>          try &#123;</pre></td></tr><tr><td data-num=\"435\"></td><td><pre>              myDataCallBack.requestSuccess (responseStrGETAsyn);</pre></td></tr><tr><td data-num=\"436\"></td><td><pre></pre></td></tr><tr><td data-num=\"437\"></td><td><pre>          &#125; catch (Exception e) &#123;</pre></td></tr><tr><td data-num=\"438\"></td><td><pre>              e.printStackTrace ();</pre></td></tr><tr><td data-num=\"439\"></td><td><pre>              Logger.e (&amp;quot;POST 异步文件上传失败 & amp;quot; + e.toString ());</pre></td></tr><tr><td data-num=\"440\"></td><td><pre>          &#125;</pre></td></tr><tr><td data-num=\"441\"></td><td><pre></pre></td></tr><tr><td data-num=\"442\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"443\"></td><td><pre>  &#125;);</pre></td></tr><tr><td data-num=\"444\"></td><td><pre></pre></td></tr><tr><td data-num=\"445\"></td><td><pre>  myDataCallBack.onAfter ();</pre></td></tr><tr><td data-num=\"446\"></td><td><pre>  &#125; catch (Exception e) &#123;</pre></td></tr><tr><td data-num=\"447\"></td><td><pre>  Logger.e (&amp;quot;POST 异步文件上传异常 & amp;quot; + e.toString ());</pre></td></tr><tr><td data-num=\"448\"></td><td><pre>  e.printStackTrace ();</pre></td></tr><tr><td data-num=\"449\"></td><td><pre>  &#125;&#125;</pre></td></tr><tr><td data-num=\"450\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"451\"></td><td><pre></pre></td></tr><tr><td data-num=\"452\"></td><td><pre>基于 http 的文件上传（传入文件数组和 key）混合参数和文件请求</pre></td></tr><tr><td data-num=\"453\"></td><td><pre></pre></td></tr><tr><td data-num=\"454\"></td><td><pre>通过 addFormDataPart 可以添加多个上传的文件</pre></td></tr><tr><td data-num=\"455\"></td><td><pre></pre></td></tr><tr><td data-num=\"456\"></td><td><pre></pre></td></tr><tr><td data-num=\"457\"></td><td><pre>@param url            URL 的 Path 部分</pre></td></tr><tr><td data-num=\"458\"></td><td><pre></pre></td></tr><tr><td data-num=\"459\"></td><td><pre>@param myDataCallBack 自定义回调接口</pre></td></tr><tr><td data-num=\"460\"></td><td><pre></pre></td></tr><tr><td data-num=\"461\"></td><td><pre>将 file 作为请求体传入到服务端.</pre></td></tr><tr><td data-num=\"462\"></td><td><pre></pre></td></tr><tr><td data-num=\"463\"></td><td><pre>@param files          上传的文件</pre></td></tr><tr><td data-num=\"464\"></td><td><pre></pre></td></tr><tr><td data-num=\"465\"></td><td><pre>@param fileKeys       上传的文件 key 集合</pre></td></tr><tr><td data-num=\"466\"></td><td><pre></pre></td></tr><tr><td data-num=\"467\"></td><td><pre>/private void upLoadMultiFile (String url, File [] files, String [] fileKeys, Map&lt;String, String> params, final MyDataCallBack myDataCallBack) &#123;  if (params  null) &#123;</pre></td></tr><tr><td data-num=\"468\"></td><td><pre>  params = new HashMap&amp;lt;&amp;gt;();</pre></td></tr><tr><td data-num=\"469\"></td><td><pre>  &#125;  final String realURL = urlJoint (url, null);  FormBody.Builder builder = new FormBody.Builder ();  addMapParmsToFromBody (params, builder);  RequestBody requestBody = builder.build ();  MultipartBody.Builder multipartBody = new MultipartBody.Builder ();  multipartBody.setType (MultipartBody.ALTERNATIVE)</pre></td></tr><tr><td data-num=\"470\"></td><td><pre>      .addPart (requestBody);</pre></td></tr><tr><td data-num=\"471\"></td><td><pre>  if (files != null) &#123;</pre></td></tr><tr><td data-num=\"472\"></td><td><pre>  RequestBody fileBody = null;</pre></td></tr><tr><td data-num=\"473\"></td><td><pre>  for (int i = 0; i &amp;lt; files.length; i++) &#123;</pre></td></tr><tr><td data-num=\"474\"></td><td><pre>      File file = files [i];</pre></td></tr><tr><td data-num=\"475\"></td><td><pre>      String fileName = file.getName ();</pre></td></tr><tr><td data-num=\"476\"></td><td><pre>      fileBody = RequestBody.create (MediaType.parse (guessMimeType (fileName)), file);</pre></td></tr><tr><td data-num=\"477\"></td><td><pre>      //TODO 根据文件名设置 contentType</pre></td></tr><tr><td data-num=\"478\"></td><td><pre>      multipartBody.addPart (Headers.of (&amp;quot;Content-Disposition&amp;quot;,</pre></td></tr><tr><td data-num=\"479\"></td><td><pre>              &amp;quot;form-data; name=\\&amp;quot;&amp;quot; + fileKeys [i] + &amp;quot;\\&amp;quot;; filename=\\&amp;quot;&amp;quot; + fileName + &amp;quot;\\&amp;quot;&amp;quot;),</pre></td></tr><tr><td data-num=\"480\"></td><td><pre>              fileBody);</pre></td></tr><tr><td data-num=\"481\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"482\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"483\"></td><td><pre>  final Request request = new Request.Builder ()</pre></td></tr><tr><td data-num=\"484\"></td><td><pre>      .url (realURL)</pre></td></tr><tr><td data-num=\"485\"></td><td><pre>      .post (multipartBody.build ())</pre></td></tr><tr><td data-num=\"486\"></td><td><pre>      .build ();</pre></td></tr><tr><td data-num=\"487\"></td><td><pre>  Call call = okHttpClient.newCall (request);  try &#123;</pre></td></tr><tr><td data-num=\"488\"></td><td><pre>  myDataCallBack.onBefore (request);</pre></td></tr><tr><td data-num=\"489\"></td><td><pre>  // 请求加入调度</pre></td></tr><tr><td data-num=\"490\"></td><td><pre>  call.enqueue (new Callback () &#123;</pre></td></tr><tr><td data-num=\"491\"></td><td><pre></pre></td></tr><tr><td data-num=\"492\"></td><td><pre>      @Override</pre></td></tr><tr><td data-num=\"493\"></td><td><pre>      public void onFailure (Call call, IOException e) &#123;</pre></td></tr><tr><td data-num=\"494\"></td><td><pre>          myDataCallBack.requestFailure (call.request (), e);</pre></td></tr><tr><td data-num=\"495\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"496\"></td><td><pre></pre></td></tr><tr><td data-num=\"497\"></td><td><pre>      @Override</pre></td></tr><tr><td data-num=\"498\"></td><td><pre>      public void onResponse (Call call, Response response)  &#123;</pre></td></tr><tr><td data-num=\"499\"></td><td><pre>          try &#123;</pre></td></tr><tr><td data-num=\"500\"></td><td><pre>              myDataCallBack.requestSuccess (response.body ().string ());</pre></td></tr><tr><td data-num=\"501\"></td><td><pre></pre></td></tr><tr><td data-num=\"502\"></td><td><pre>          &#125; catch (Exception e) &#123;</pre></td></tr><tr><td data-num=\"503\"></td><td><pre>              e.printStackTrace ();</pre></td></tr><tr><td data-num=\"504\"></td><td><pre>              Logger.e (&amp;quot;POST 异步文件上传失败 & amp;quot; + e.toString ());</pre></td></tr><tr><td data-num=\"505\"></td><td><pre>          &#125;</pre></td></tr><tr><td data-num=\"506\"></td><td><pre></pre></td></tr><tr><td data-num=\"507\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"508\"></td><td><pre>  &#125;);</pre></td></tr><tr><td data-num=\"509\"></td><td><pre></pre></td></tr><tr><td data-num=\"510\"></td><td><pre>  myDataCallBack.onAfter ();</pre></td></tr><tr><td data-num=\"511\"></td><td><pre>  &#125; catch (Exception e) &#123;</pre></td></tr><tr><td data-num=\"512\"></td><td><pre>  Logger.e (&amp;quot;POST 异步文件上传异常 & amp;quot; + e.toString ());</pre></td></tr><tr><td data-num=\"513\"></td><td><pre>  e.printStackTrace ();</pre></td></tr><tr><td data-num=\"514\"></td><td><pre>  &#125;&#125;</pre></td></tr><tr><td data-num=\"515\"></td><td><pre>private String guessMimeType (String fileName) &#123;  FileNameMap fileNameMap = URLConnection.getFileNameMap ();  String contentTypeFor = fileNameMap.getContentTypeFor (fileName);  if (contentTypeFor == null) &#123;</pre></td></tr><tr><td data-num=\"516\"></td><td><pre>  contentTypeFor = &amp;quot;application/octet-stream&amp;quot;;</pre></td></tr><tr><td data-num=\"517\"></td><td><pre>  &#125;  return contentTypeFor;</pre></td></tr><tr><td data-num=\"518\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"519\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"520\"></td><td><pre></pre></td></tr><tr><td data-num=\"521\"></td><td><pre>文件下载</pre></td></tr><tr><td data-num=\"522\"></td><td><pre></pre></td></tr><tr><td data-num=\"523\"></td><td><pre>@param url path 路径</pre></td></tr><tr><td data-num=\"524\"></td><td><pre></pre></td></tr><tr><td data-num=\"525\"></td><td><pre>@param destFileDir 本地存储的文件夹路径</pre></td></tr><tr><td data-num=\"526\"></td><td><pre></pre></td></tr><tr><td data-num=\"527\"></td><td><pre>@param myDataCallBack 自定义回调接口</pre></td></tr><tr><td data-num=\"528\"></td><td><pre></pre></td></tr><tr><td data-num=\"529\"></td><td><pre>/private void downLoadFileAsyn (final String url, final String destFileDir, final MyDataCallBack myDataCallBack)&#123;  String realURL=urlJoint (url,null);  Request request=new Request.Builder ()</pre></td></tr><tr><td data-num=\"530\"></td><td><pre>      .url (realURL)</pre></td></tr><tr><td data-num=\"531\"></td><td><pre>      .build ();</pre></td></tr><tr><td data-num=\"532\"></td><td><pre>  Call call=okHttpClient.newCall (request);  call.enqueue (new Callback () &#123;</pre></td></tr><tr><td data-num=\"533\"></td><td><pre>  @Override</pre></td></tr><tr><td data-num=\"534\"></td><td><pre>  public void onFailure (Call call, IOException e) &#123;</pre></td></tr><tr><td data-num=\"535\"></td><td><pre>      myDataCallBack.requestFailure (call.request (),e);</pre></td></tr><tr><td data-num=\"536\"></td><td><pre></pre></td></tr><tr><td data-num=\"537\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"538\"></td><td><pre></pre></td></tr><tr><td data-num=\"539\"></td><td><pre>  @Override</pre></td></tr><tr><td data-num=\"540\"></td><td><pre>  public void onResponse (Call call, Response response) &#123;</pre></td></tr><tr><td data-num=\"541\"></td><td><pre>      InputStream is = null;</pre></td></tr><tr><td data-num=\"542\"></td><td><pre>      byte [] buf = new byte [2048];</pre></td></tr><tr><td data-num=\"543\"></td><td><pre>      int len = 0;</pre></td></tr><tr><td data-num=\"544\"></td><td><pre>      FileOutputStream fos = null;</pre></td></tr><tr><td data-num=\"545\"></td><td><pre>      is = response.body ().byteStream ();</pre></td></tr><tr><td data-num=\"546\"></td><td><pre>      File file = new File (destFileDir, getFileName (url));</pre></td></tr><tr><td data-num=\"547\"></td><td><pre>      try &#123;</pre></td></tr><tr><td data-num=\"548\"></td><td><pre>          fos = new FileOutputStream (file);</pre></td></tr><tr><td data-num=\"549\"></td><td><pre>          while ((len = is.read (buf)) != -1)</pre></td></tr><tr><td data-num=\"550\"></td><td><pre>          &#123;</pre></td></tr><tr><td data-num=\"551\"></td><td><pre>              fos.write (buf, 0, len);</pre></td></tr><tr><td data-num=\"552\"></td><td><pre>          &#125;</pre></td></tr><tr><td data-num=\"553\"></td><td><pre>          fos.flush ();</pre></td></tr><tr><td data-num=\"554\"></td><td><pre>      &#125; catch (IOException e) &#123;</pre></td></tr><tr><td data-num=\"555\"></td><td><pre>          Logger.e (&amp;quot; 文件下载异常：&amp;quot;,e.getMessage ());</pre></td></tr><tr><td data-num=\"556\"></td><td><pre>          e.printStackTrace ();</pre></td></tr><tr><td data-num=\"557\"></td><td><pre>      &#125; finally &#123;</pre></td></tr><tr><td data-num=\"558\"></td><td><pre>          if (is != null) &#123;</pre></td></tr><tr><td data-num=\"559\"></td><td><pre>              try &#123;</pre></td></tr><tr><td data-num=\"560\"></td><td><pre>                  is.close ();</pre></td></tr><tr><td data-num=\"561\"></td><td><pre>              &#125; catch (IOException e) &#123;</pre></td></tr><tr><td data-num=\"562\"></td><td><pre>                  Logger.e (&amp;quot; 文件流关闭异常：&amp;quot;,e.getMessage ());</pre></td></tr><tr><td data-num=\"563\"></td><td><pre>                  e.printStackTrace ();</pre></td></tr><tr><td data-num=\"564\"></td><td><pre>              &#125;</pre></td></tr><tr><td data-num=\"565\"></td><td><pre>          &#125;</pre></td></tr><tr><td data-num=\"566\"></td><td><pre>          if (fos != null) &#123;</pre></td></tr><tr><td data-num=\"567\"></td><td><pre>              try &#123;</pre></td></tr><tr><td data-num=\"568\"></td><td><pre>                  fos.close ();</pre></td></tr><tr><td data-num=\"569\"></td><td><pre>              &#125; catch (IOException e) &#123;</pre></td></tr><tr><td data-num=\"570\"></td><td><pre>                  Logger.e (&amp;quot; 文件流关闭异常：&amp;quot;,e.getMessage ());</pre></td></tr><tr><td data-num=\"571\"></td><td><pre>                  e.printStackTrace ();</pre></td></tr><tr><td data-num=\"572\"></td><td><pre>              &#125;</pre></td></tr><tr><td data-num=\"573\"></td><td><pre>          &#125;</pre></td></tr><tr><td data-num=\"574\"></td><td><pre></pre></td></tr><tr><td data-num=\"575\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"576\"></td><td><pre></pre></td></tr><tr><td data-num=\"577\"></td><td><pre>      // 如果下载文件成功，第一个参数为文件的绝对路径</pre></td></tr><tr><td data-num=\"578\"></td><td><pre>      sendSuccessResultCallback (file.getAbsolutePath (), myDataCallBack);</pre></td></tr><tr><td data-num=\"579\"></td><td><pre></pre></td></tr><tr><td data-num=\"580\"></td><td><pre>      myDataCallBack.requestSuccess (response.body ().toString ());</pre></td></tr><tr><td data-num=\"581\"></td><td><pre></pre></td></tr><tr><td data-num=\"582\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"583\"></td><td><pre>  &#125;);&#125;</pre></td></tr><tr><td data-num=\"584\"></td><td><pre>private String getFileName (String url) &#123;  int separatorIndex = url.lastIndexOf (\"/\");  return (separatorIndex &lt; 0) ? url : url.substring (separatorIndex + 1, url.length ());</pre></td></tr><tr><td data-num=\"585\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"586\"></td><td><pre>private void sendSuccessResultCallback (final String absolutePath, final MyDataCallBack myDataCallBack) &#123;  ThreadPoolUtil.execute (new Runnable () &#123;</pre></td></tr><tr><td data-num=\"587\"></td><td><pre>  @Override</pre></td></tr><tr><td data-num=\"588\"></td><td><pre>  public void run () &#123;</pre></td></tr><tr><td data-num=\"589\"></td><td><pre>      if (myDataCallBack!=null)&#123;</pre></td></tr><tr><td data-num=\"590\"></td><td><pre>          myDataCallBack.requestSuccess (absolutePath);</pre></td></tr><tr><td data-num=\"591\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"592\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"593\"></td><td><pre>  &#125;);&#125;</pre></td></tr><tr><td data-num=\"594\"></td><td><pre></pre></td></tr><tr><td data-num=\"595\"></td><td><pre></pre></td></tr><tr><td data-num=\"596\"></td><td><pre></pre></td></tr><tr><td data-num=\"597\"></td><td><pre></pre></td></tr><tr><td data-num=\"598\"></td><td><pre>&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>下载 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vYmxpc3N5YW5nL0h0dHBEZW1v\">demo</span></p>\n</blockquote>\n<hr />\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l0ZnVubnlzaXRlL2FydGljbGUvZGV0YWlscy84MTAwMjEyMD91dG1fbWVkaXVtPWRpc3RyaWJ1dGUucGNfcmVsZXZhbnQubm9uZS10YXNrLWJsb2ctQmxvZ0NvbW1lbmRGcm9tTWFjaGluZUxlYXJuUGFpMi0xLm5vbmVjYXNlJmFtcDtkZXB0aF8xLXV0bV9zb3VyY2U9ZGlzdHJpYnV0ZS5wY19yZWxldmFudC5ub25lLXRhc2stYmxvZy1CbG9nQ29tbWVuZEZyb21NYWNoaW5lTGVhcm5QYWkyLTEubm9uZWNhc2U=\">原文</span></p>\n",
            "tags": [
                "Android"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/7137d869.html",
            "url": "https://isviolet.github.io/p/7137d869.html",
            "title": "android studio修改配置文件夹(.android .gradle .AndroidStudio)位置.md",
            "date_published": "2021-05-18T12:37:57.533Z",
            "content_html": "<blockquote>\n<p>Android studio 安装之后一般默认在 c:/user/userid (*****)/;（比如:c:/user/xiaohong/）其他软件在安装中要创建缓存文件夹，那么也会在这个目录创建，比如 Notepad++ 等 <img data-src=\"https://i.loli.net/2021/05/18/B5p2FzrwxL4v8eI.png\" alt=\"file\" /></p>\n</blockquote>\n<h4 id=\"这三个文件夹的作用\"><a class=\"anchor\" href=\"#这三个文件夹的作用\">#</a> 这三个文件夹的作用：</h4>\n<ul>\n<li>.android 这个文件夹是 Android SDK 生成的 AVD（Android Virtual Device Manager）即模拟器存放路径</li>\n<li>.AndroidStudio 这个文件夹是 Android Studio 的配置文件夹，主要存放一些 AndroidStudio 设置和插件和项目的缓存信息</li>\n<li>.gradle 这个文件夹是构建工具 Gradle 的配置文件夹，也会存储一些项目的构建缓存信息</li>\n</ul>\n<h4 id=\"默认创建路径在c盘比较占空间现在来转移至d盘\"><a class=\"anchor\" href=\"#默认创建路径在c盘比较占空间现在来转移至d盘\">#</a> 默认创建路径在 C 盘，比较占空间，现在来转移至 D 盘</h4>\n<ol>\n<li>.android 文件夹的修改 这个文件夹是由 Android SDK 配置模拟器生成的，也是最占空间的一个。首先，需要添加一个系统的环境变量 ANDROID_SDK_HOME，如下图： <img data-src=\"https://i.loli.net/2021/05/18/Md5E1qCopWLJk8U.png\" alt=\"file\" /> 创建模拟器后默认位置还是在 C 盘，复制到 D 盘，修改如下图： <img data-src=\"https://i.loli.net/2021/05/18/VGPm1QqpNHWJ3OC.png\" alt=\"file\" /></li>\n<li>.AndroidStudio 文件夹的修改 进入 Android Studio 的安装目录，进入 bin 文件夹，用文本编辑软件打开 idea.properties，去掉以下两项的注释符号 #，修改对应的路径为新路径即可。 <img data-src=\"https://i.loli.net/2021/05/18/F6Pb7UAxofhNlHK.png\" alt=\"file\" /></li>\n<li>.gradle 文件夹的修改 <img data-src=\"https://i.loli.net/2021/05/18/Pg6OCnkUSbXZEHB.png\" alt=\"file\" /></li>\n</ol>\n",
            "tags": [
                "Android"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/1effa57a.html",
            "url": "https://isviolet.github.io/p/1effa57a.html",
            "title": "Gradle的缓存路径修改的四种方法",
            "date_published": "2021-05-18T12:36:30.357Z",
            "content_html": "<ol>\n<li>\n<p>方法一，修改 gradle.properties 文件，增加一句 gradle.user.home=D:\\Android.gradle <img data-src=\"https://i.loli.net/2021/05/18/5AWhiPnayZeFUcq.png\" alt=\"file\" /></p>\n<blockquote>\n<p>但这种方法，需要每个项目文件都要改一遍，如果只是临时修改，可以采用这种方法，如果是针对所有项目的，不建议这种方法.</p>\n</blockquote>\n</li>\n<li>\n<p>方法二，在 Android Studio 中修改 gradle 用户目录，打开设置 (快捷键 Ctrl+alt+S)，定位到 Gradle 菜单，作如下设置 <img data-src=\"https://i.loli.net/2021/05/18/muBl1LA8FTrXG7O.png\" alt=\"file\" /></p>\n<blockquote>\n<pre><code>    但是这个方法现在好像没用,不过可以试试,万一就可以了呢(手动滑稽).\n</code></pre>\n</blockquote>\n</li>\n<li>\n<p>方法三，修改 gradle 启动脚本，进入 gradle 安装的 bin 目录，使用文本编辑器打开 gradle.bat 文件，在如图的位置添加以下语句 <strong>set GRADLE_OPTS=&quot;-Dgradle.user.home=D:\\Android.gradle&quot;</strong> <img data-src=\"https://i.loli.net/2021/05/18/kDR5LKouTXfGJxF.png\" alt=\"file\" /></p>\n</li>\n<li>\n<p>方法四：以上几种方法，都不是最理想的方法，下面推荐 Windows 环境变量设置 gradle 用户目录，通过环境变量的方式，gradle 会读取环境变量，所有的项目都会自动修改过来，非常方便。打开环境变量设置方法如图 (win10 下用快捷键 win+Q 呼出小娜，其他版本可以进控制面板查找到系统 -&gt; 高级系统设置) <img data-src=\"https://i.loli.net/2021/05/18/ITs9hDBfcg2ojHq.png\" alt=\"file\" /></p>\n</li>\n</ol>\n",
            "tags": [
                "Android"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/4bb2eacc.html",
            "url": "https://isviolet.github.io/p/4bb2eacc.html",
            "title": "Android下拉刷新SwipeRefreshLayout简单用法",
            "date_published": "2021-05-18T12:33:58.115Z",
            "content_html": "<blockquote>\n<p>之前一直都想用下拉刷新，感觉上是庞大的工程，所以搁置了。现在学习了一下其实真的超级简单。 看了《第一行代码》以及 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8zYzQwMmE5ZTRiN2QlRTYlOTYlODclRTclQUIlQTA=\">https://www.jianshu.com/p/3c402a9e4b7d 文章</span> 看上去是真的简单。SwipeRefreshLayout 下嵌套一个控件</p>\n</blockquote>\n<ol>\n<li>\n<p>布局代码</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>android.support.v4.widget.SwipeRefreshLayout</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/mswipeRefreshLayout<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>WebView</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    android:id=<span class=\"token entity named-entity\" title=\"&quot;\">&amp;quot;</span>@+id/mwebview<span class=\"token entity named-entity\" title=\"&quot;\">&amp;quot;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    android:layout_width=<span class=\"token entity named-entity\" title=\"&quot;\">&amp;quot;</span>match_parent<span class=\"token entity named-entity\" title=\"&quot;\">&amp;quot;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    android:layout_height=<span class=\"token entity named-entity\" title=\"&quot;\">&amp;quot;</span>match_parent<span class=\"token entity named-entity\" title=\"&quot;\">&amp;quot;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token entity named-entity\" title=\"&gt;\">&amp;gt;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>/WebView<span class=\"token entity named-entity\" title=\"&gt;\">&amp;gt;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>android.support.v4.widget.SwipeRefreshLayout</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>Activity 代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mSwipe <span class=\"token operator\">=</span>  <span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>mswipeRefreshLayout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setSwipe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    * 设置下拉刷新球颜色</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    mSwipe<span class=\"token punctuation\">.</span><span class=\"token function\">setColorSchemeResources</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>swipeColor1<span class=\"token punctuation\">,</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>swipeColor2<span class=\"token punctuation\">,</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>swipeColor3<span class=\"token punctuation\">,</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>swipeColor4<span class=\"token punctuation\">,</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>swipeColor5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    * 设置下拉刷新的监听</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    mSwipe<span class=\"token punctuation\">.</span><span class=\"token function\">setOnRefreshListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SwipeRefreshLayout<span class=\"token punctuation\">.</span>OnRefreshListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onRefresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 刷新需执行的操作</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>我们可以在 res/values/colors.xml 文件中设置我们想要的颜色</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>color</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>swipeColor1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>#3F51B5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>color</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>color</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>swipeColor2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>#000000<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>color</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>......</pre></td></tr></table></figure></li>\n<li>\n<p>加载完毕后需要关闭下拉刷新球  <code>mSwipe.setRefreshing(false); </code></p>\n</li>\n<li>\n<p>打开页面自动刷新  <code>mSwipe.measure(0,0); mSwipe.setRefreshing(true);</code></p>\n<blockquote>\n<p>在 onMeasure 之前 单独使用 setRefreshing (true) 是没有效果的</p>\n</blockquote>\n</li>\n<li>\n<p>还可以复写 onWindowFocusChanged 当页面获得焦点的时刷新</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onWindowFocusChanged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> hasFocus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onWindowFocusChanged</span><span class=\"token punctuation\">(</span>hasFocus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    mSwipe<span class=\"token punctuation\">.</span><span class=\"token function\">setRefreshing</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>也可以放到 ui 线程消息循环中排队</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mSwipe<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        mSwipe<span class=\"token punctuation\">.</span><span class=\"token function\">setRefreshing</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>code<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>pre<span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>在刷新结束后关闭刷新球 <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">SwipeIsFinish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mSwipe<span class=\"token punctuation\">.</span><span class=\"token function\">isRefreshing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> mSwipe<span class=\"token punctuation\">.</span><span class=\"token function\">setRefreshing</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": [
                "Android"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/65e770b4.html",
            "url": "https://isviolet.github.io/p/65e770b4.html",
            "title": "Android开发",
            "date_published": "2021-05-18T12:31:59.858Z",
            "content_html": "<p>&lt;p&gt;&lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FuZHJvaWQxNTcvYXJ0aWNsZS9kZXRhaWxzLzg4OTEyNjc2\">https://blog.csdn.net/android157/article/details/88912676</span>&quot;title=&quot;Android 开发：如何将工程改造成库，并上传到 Github 作为依赖，提供引用 &quot;&gt;Android 开发：如何将工程改造成库，并上传到 Github 作为依赖，提供引用 &lt;/a&gt;&lt;/p&gt;</p>\n<p>&lt;p&gt;&lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kNzYyM2QzMjY0ZDY=\">https://www.jianshu.com/p/d7623d3264d6</span>&quot;title=&quot;Android 实习生 —— 网络请求及数据解析 &quot;&gt;Android 实习生 —— 网络请求及数据解析 &lt;/a&gt;&lt;/p&gt;</p>\n",
            "tags": [
                "Android"
            ]
        }
    ]
}