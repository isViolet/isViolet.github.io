{
    "version": "https://jsonfeed.org/version/1",
    "title": "友人帐🎴 • All posts by \"编程语言\" category",
    "description": "",
    "home_page_url": "https://isviolet.github.io",
    "items": [
        {
            "id": "https://isviolet.github.io/p/9eeb6c91.html",
            "url": "https://isviolet.github.io/p/9eeb6c91.html",
            "title": "Java基础学习笔记二 Java基础语法之变量、数据类型",
            "date_published": "2022-03-05T13:47:34.291Z",
            "content_html": "<h2 id=\"注释\"><a class=\"anchor\" href=\"#注释\">#</a> 注释</h2>\n<p>注释用来解释和说明程序的文字，注释是不会被执行的.</p>\n<p>单行注释</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 这是一条单行注释 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>多行注释</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 这是</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 一段注释，</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>* 它跨越了多个行</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>文档注释</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/** The first Thinking in Java example program.</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* Lists system information on current machine.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>* @author Bruce Eckel</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>* @author http://www.BruceEckel.com</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>* @version 1.0</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Property</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/** Sole entry point to class &amp; application</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>* @param args array of string arguments</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>* @return No return value</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>* @exception exceptions No exceptions thrown</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">Properties</span> p <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--- Memory Usage:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token class-name\">Runtime</span> rt <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Total Memory = \"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token operator\">+</span> rt<span class=\"token punctuation\">.</span><span class=\"token function\">totalMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token operator\">+</span> <span class=\"token string\">\" Free Memory = \"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token operator\">+</span> rt<span class=\"token punctuation\">.</span><span class=\"token function\">freeMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对于单行和多行注释，被注释的文字，不会被 JVM 解释执行；对于文档注释，可以被 JDK 提供的工具 javadoc 所解析，生成一套以网页文件形式体现的该程序的说明文档；单行注释可以嵌套使用，多行注释不能嵌套使用。</p>\n<h2 id=\"关键字\"><a class=\"anchor\" href=\"#关键字\">#</a> <strong>关键字</strong></h2>\n<p>是被 Java 语言赋予特殊含义，具有专门用途的单词，比如 class，int，double 均为 Java 已经预设好的；</p>\n<p>组成关键字的字母全部小写，注意 String 不是关键字；</p>\n<p>goto 与 const 是 Java 中的保留字，即没有赋予特殊含义却仍被 Java 占用的单词；</p>\n<h2 id=\"标识符\"><a class=\"anchor\" href=\"#标识符\">#</a> <strong>标识符</strong></h2>\n<p>就是给类，接口，方法，变量等起名字时使用的字符序列，组成规则只能包含下面的内容，不能有其它内容:</p>\n<ul>\n<li>英文大小写字母</li>\n<li>数字字符</li>\n<li>$ 和_</li>\n</ul>\n<h3 id=\"注意事项\"><a class=\"anchor\" href=\"#注意事项\">#</a> 注意事项</h3>\n<ul>\n<li>数字不能开头</li>\n<li>不可以使用关键字</li>\n<li>严格区分大小写，不限制长度</li>\n<li>起名时，尽量见名知意</li>\n</ul>\n<h3 id=\"标识符中常见的命名规则\"><a class=\"anchor\" href=\"#标识符中常见的命名规则\">#</a> 标识符中常见的命名规则</h3>\n<ul>\n<li>包名：多单词组成时所有字母均小写，使用。连接。比如：aaa.bbb.ccc</li>\n<li>类名 &amp; 接口名：大驼峰式。比如：AaaBbbCcc</li>\n<li>变量名 &amp; 方法名：小驼峰式。比如：aaaBbbCcc</li>\n<li>常量名：多单词组成是所有字母均大写，使用_连接。比如：AAA_BBB_CCC</li>\n</ul>\n<h2 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h2>\n<p>为什么有数据类型？</p>\n<p>Java 是强类型语言，对于每一种数据都定义了明确的具体数据类型，变量必须要有明确的类型，什么类型的变量装载什么类型的数据。</p>\n<h3 id=\"数据类型的分类\"><a class=\"anchor\" href=\"#数据类型的分类\">#</a> 数据类型的分类</h3>\n<p>基本数据类型</p>\n<p>基本数据类型是 Java 语言中内置的类型，分别是整数类型、小数类型、字符类型、布尔类型。</p>\n<p>这四类基本类型是最简单、最基础的类型。</p>\n<ul>\n<li>整数（byte、short、int、long），默认的整数类型是 int 类型，long 类型需添加 &quot;L&quot; 后缀。</li>\n<li>小数（float、double）、字符类型 (char)，默认的浮点类型是 double 类型。在 Java 中所有没有后缀以及使用 “D” 后缀（小写也可以，但建议使用大写）的小数都是 double 类型；float 类型常量必须添加 “F” 后缀</li>\n<li>字符类型（char）</li>\n<li>布尔类型（boolean）</li>\n</ul>\n<p>引用数据类型</p>\n<p>引用数据类型是强大的数据类型，它是基于基本数据类型创建的。JavaSE 中提供了一个超级类库，类库中包含了近万种引用数据类型。比如：数组、类、接口。</p>\n<h2 id=\"常量\"><a class=\"anchor\" href=\"#常量\">#</a> <strong>常量</strong></h2>\n<p>常量就是不变的数据量，在程序执行的过程中其值不可以发生改变</p>\n<h3 id=\"常量分类\"><a class=\"anchor\" href=\"#常量分类\">#</a> 常量分类</h3>\n<p>整数类型</p>\n<ul>\n<li>十进制表示方式：正常数字，如 13、25 等</li>\n<li>二进制表示方式：以 0b (0B) 开头，如 0b1011 、0B1001</li>\n<li>十六进制表示方式：以 0x (0X) 开头，数字以 0-9 及 A-F 组成  如 0x23A2、0xa、0x10</li>\n<li>八进制表示方式：以 0 开头，如 01、07、0721</li>\n</ul>\n<p>小数类型，如 1.0、-3.15、3.168 等</p>\n<p>布尔类型， true、false</p>\n<p>字符类型，字符必须使用’’ 包裹，并且其中只能且仅能包含一个字符。如 'a'，'A', '0', ' 家'</p>\n<p>字符串类型，一种引用类型，字符串必须使用 &quot;&quot;包裹，其中可以包含 0~N 个字符。如&quot; 我爱 Java&quot;，&quot;0123&quot;，&quot;&quot;，&quot;null&quot;</p>\n<h3 id=\"在程序中输出java中的常量\"><a class=\"anchor\" href=\"#在程序中输出java中的常量\">#</a> <strong>在程序中输出 Java 中的常量</strong></h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 输出整数 十进制</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//50</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 输出整数，二进制，数字开头 0B</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">0B11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//3</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 输出整数，八进制，数字开头 0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">051</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//41</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 输出整数，十六进制，数组开头 0X  0-9 A-F</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">0XE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//14</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 输出浮点数据</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">5.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//5.0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 输出布尔数据，只有 2 个值，true，false 关键字</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 输出字符常量，单引号包裹，只能写 1 个字符</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//a</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 输出字符串常量，双引号包裹，可以写 0-n 个字符</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//HelloWorld</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"变量\"><a class=\"anchor\" href=\"#变量\">#</a> <strong>变量</strong></h2>\n<h3 id=\"什么是变量\"><a class=\"anchor\" href=\"#什么是变量\">#</a> <strong>什么是变量？</strong></h3>\n<p>变量是一个内存中的小盒子（小容器），容器是什么？生活中也有很多容器，例如水杯是容器，用来装载水；你家里的大衣柜是容器，用来装载衣裤；饭盒是容器，用来装载饭菜。</p>\n<p>那么变量是装载什么的呢？答案是数据！结论：变量是内存中装载数据的小盒子，你只能用它来存数据和取数据。</p>\n<h3 id=\"定义变量\"><a class=\"anchor\" href=\"#定义变量\">#</a> 定义变量</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>数据类型  变量名  <span class=\"token operator\">=</span>  数据值；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span>         a    <span class=\"token operator\">=</span>  <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"变量使用的注意事项\"><a class=\"anchor\" href=\"#变量使用的注意事项\">#</a> <strong>变量使用的注意事项</strong></h3>\n<p>变量定义后可以不赋值，使用时再赋值。不赋值不能使用。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 为 x 赋值 20</span></pre></td></tr></table></figure><p>变量使用时有作用域的限制。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 读取 x 变量中的值，再打印</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 读取 y 变量中的值失败，失败原因，找不到 y 变量，因为超出了 y 变量作用范围，所以不能使用 y 变量</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>变量不可以重复定义。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5.5</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 编译失败，变量重复定义</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"数据类型转换\"><a class=\"anchor\" href=\"#数据类型转换\">#</a> 数据类型转换</h2>\n<p>不同类型的变量可以在一起运算，但要先进行类型转换再运算。</p>\n<ul>\n<li>范围小的数据类型值（如 byte），可以直接转换为范围大的数据类型值（如 int）；</li>\n<li>范围大的数据类型值（如 int），不可以直接转换为范围小的数据类型值（如 byte）</li>\n</ul>\n<p>数据范围从小到大依次列出：byte -&gt; short -&gt; int -&gt; long -&gt; float -&gt; double</p>\n<p>两种方式的数据类型转换</p>\n<p>自动类型转换：表示范围小的数据类型转换成范围大的数据类型。格式：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>范围大的数据类型 变量 <span class=\"token operator\">=</span> 范围小的数据类型值；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>比如：<span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>强制类型转换：表示范围大的数据类型转换成范围小的数据类型</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>范围小的数据类型  变量 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>范围小的数据类型<span class=\"token punctuation\">)</span> 范围大的数据类型值<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>比如：<span class=\"token keyword\">int</span>  i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token number\">6.718</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//i 的值为 6</span></pre></td></tr></table></figure><h2 id=\"运算符\"><a class=\"anchor\" href=\"#运算符\">#</a> 运算符</h2>\n<h3 id=\"算数运算符\"><a class=\"anchor\" href=\"#算数运算符\">#</a> 算数运算符</h3>\n<p>加号（ +）、减号和负号（ -）、乘号（ *）、除号（ /）、取模（%）、自增（++）、自减（--）以及等号（ =）的用法与其他所有编程语言都是类似的 。</p>\n<p>++,-- 运算符后置时，先使用变量 a 原有值参与运算操作，运算操作完成后，变量 a 的值自增 1 或者自减 1。</p>\n<p>l ++，-- 运算符前置时，先将变量 a 的值自增 1 或者自减 1，然后使用更新后的新值参与运算操作。</p>\n<h3 id=\"赋值运算符\"><a class=\"anchor\" href=\"#赋值运算符\">#</a> 赋值运算符</h3>\n<p>赋值（=）、加后赋值（+=）、减后赋值（-=）、乘后赋值（*=）、整除后赋值（/=）取模后赋值（%=）的用法与其他所有编程语言都是类似的 。</p>\n<h3 id=\"关系运算符\"><a class=\"anchor\" href=\"#关系运算符\">#</a> 关系运算符</h3>\n<p>等于（==）  不等于（!=） 小于（&lt;） 大于（&gt;）  小于等于（&lt;=） 大于等于（&gt;=）的用法与其他所有编程语言都是类似的 。</p>\n<h3 id=\"逻辑运算符\"><a class=\"anchor\" href=\"#逻辑运算符\">#</a> <strong>逻辑运算符</strong></h3>\n<p>与（&amp;&amp;）、或（||）、非（!）的用法与其他所有编程语言都是类似的 。</p>\n<p>短路：当使用与或者或时，只要能判断出结果则后边的部分就不再判断。</p>\n<h3 id=\"三元运算符\"><a class=\"anchor\" href=\"#三元运算符\">#</a> <strong>三元运算符</strong></h3>\n<p>(条件表达式)？表达式 1：表达式 2；</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token operator\">></span><span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">4</span><span class=\"token operator\">></span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">100</span> <span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 逻辑运算后的结果为 false，运算结果为表达式 2 的值 200, 然后将结果 200 赋值给了变量 n</span></pre></td></tr></table></figure><h2 id=\"商场库存清单案例\"><a class=\"anchor\" href=\"#商场库存清单案例\">#</a> 商场库存清单案例</h2>\n<p>案例输出结果如下：</p>\n<p><img data-src=\"https://images2015.cnblogs.com/blog/612774/201707/612774-20170702005415883-632304767.png\" alt=\"img\" /></p>\n<h3 id=\"案例需求分析\"><a class=\"anchor\" href=\"#案例需求分析\">#</a> <strong>案例需求分析</strong></h3>\n<p>观察清单后，可将清单分解为三个部分（清单顶部、清单中部、清单底部）</p>\n<p>清单顶部为固定的数据，直接打印即可<br />\n清单中部为商品，为变化的数据，需要记录商品信息后，打印，经过观察，我们确定一项商品应该有如下几个属性：</p>\n<ul>\n<li>品牌型号：即商品名称，String 型</li>\n<li>尺寸：物品大小，double 型</li>\n<li>价格：物品单价，double 型</li>\n<li>配置：这一项为每种商品的配置信息，String 型</li>\n<li>库存数：这一项为每种商品的库存个数，int 型</li>\n</ul>\n<p>清单底部包含了统计操作，需经过计算后，打印，我们发现两个单独的可变化量：</p>\n<ul>\n<li>总库存数：所有商品总个数，int 型</li>\n<li>库存商品总金额：所有商品金额，double 型</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 苹果笔记本电脑</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">String</span> macBrand <span class=\"token operator\">=</span> <span class=\"token string\">\"MacBookAir\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">double</span> macSize <span class=\"token operator\">=</span> <span class=\"token number\">13.3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">double</span> macPrice <span class=\"token operator\">=</span> <span class=\"token number\">6988.88</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> macCount <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 联想 Thinkpad 笔记本电脑</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">String</span> thinkpadBrand <span class=\"token operator\">=</span> <span class=\"token string\">\"ThinkpadT450\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">double</span> thinkpadSize <span class=\"token operator\">=</span> <span class=\"token number\">14.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">double</span> thinkpadPrice <span class=\"token operator\">=</span> <span class=\"token number\">5999.99</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> thinkpadCount <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 华硕 ASUS 笔记本电脑</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">String</span> <span class=\"token class-name\">ASUSBrand</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ASUS-FL5800\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">double</span> <span class=\"token class-name\">ASUSSize</span> <span class=\"token operator\">=</span> <span class=\"token number\">15.6</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">double</span> <span class=\"token class-name\">ASUSPrice</span> <span class=\"token operator\">=</span> <span class=\"token number\">4999.50</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token class-name\">ASUSCount</span> <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 统计所有库存商品数量与金额</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 统计库存总个数、库存总金额</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">int</span> totalCount <span class=\"token operator\">=</span> macCount <span class=\"token operator\">+</span> thinkpadCount <span class=\"token operator\">+</span> <span class=\"token class-name\">ASUSCount</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">double</span> totalMoney <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>macCount <span class=\"token operator\">*</span> macPrice<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>thinkpadCount <span class=\"token operator\">*</span> thinkpadPrice<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ASUSCount</span> <span class=\"token operator\">*</span> <span class=\"token class-name\">ASUSPrice</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 打印库存清单顶部信息</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------------------------商城库存清单-----------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"品牌型号    尺寸    价格    库存数\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 打印库存清单中部信息</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>macBrand <span class=\"token operator\">+</span> <span class=\"token string\">\"    \"</span> <span class=\"token operator\">+</span> macSize <span class=\"token operator\">+</span> <span class=\"token string\">\"    \"</span> <span class=\"token operator\">+</span> macPrice <span class=\"token operator\">+</span> <span class=\"token string\">\"    \"</span> <span class=\"token operator\">+</span> macCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>thinkpadBrand <span class=\"token operator\">+</span> <span class=\"token string\">\"    \"</span> <span class=\"token operator\">+</span> thinkpadSize <span class=\"token operator\">+</span> <span class=\"token string\">\"    \"</span> <span class=\"token operator\">+</span> thinkpadPrice <span class=\"token operator\">+</span> <span class=\"token string\">\"    \"</span> <span class=\"token operator\">+</span> thinkpadCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ASUSBrand</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"    \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">ASUSSize</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"    \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">ASUSPrice</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"    \"</span><span class=\"token operator\">+</span><span class=\"token class-name\">ASUSCount</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 打印库存清单底部信息</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----------------------------------------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"总库存数：\"</span> <span class=\"token operator\">+</span> totalCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"库存商品总金额：\"</span> <span class=\"token operator\">+</span> totalMoney<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://isviolet.github.io/p/63ac44f1.html",
            "url": "https://isviolet.github.io/p/63ac44f1.html",
            "title": "Java基础学习笔记一 Java介绍",
            "date_published": "2022-03-05T12:35:18.111Z",
            "content_html": "<h2 id=\"java语言概述\"><a class=\"anchor\" href=\"#java语言概述\">#</a> java 语言概述</h2>\n<p>Java 是 sun 公司开发的一门编程语言，目前被 Oracle 公司收购，编程语言就是用来编写软件的。</p>\n<h3 id=\"java的应用\"><a class=\"anchor\" href=\"#java的应用\">#</a> Java 的应用</h3>\n<ul>\n<li>开发 QQ、迅雷程序 (桌面应用软件)</li>\n<li>淘宝、京东 (互联网应用软件)</li>\n<li>安卓应用程序</li>\n</ul>\n<h3 id=\"java的擅长\"><a class=\"anchor\" href=\"#java的擅长\">#</a> Java 的擅长</h3>\n<ul>\n<li>互联网：电商、P2P 等等</li>\n<li>企业级应用：ERP、CRM、BOS、OA 等等</li>\n</ul>\n<h3 id=\"java语言平台\"><a class=\"anchor\" href=\"#java语言平台\">#</a> Java 语言平台</h3>\n<ul>\n<li>JavaSE（标准版）部分，JavaSE 并不能开发大型项目。</li>\n<li>JavaEE（企业版）部分，学习完 JavaEE 部分就可以开发各种大型项目了。</li>\n</ul>\n<h2 id=\"java语言开发环境\"><a class=\"anchor\" href=\"#java语言开发环境\">#</a> java 语言开发环境</h2>\n<p>JDK 是 Java 开发环境，官网 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5vcmFjbGUuY29tL2NuL2luZGV4Lmh0bWw=\">http://www.oracle.com/cn/index.html</span></p>\n<h3 id=\"jdk的安装\"><a class=\"anchor\" href=\"#jdk的安装\">#</a> JDK 的安装</h3>\n<p>傻瓜式安装，双击安装程序，然后一路 next 即可，安装的推荐方式：</p>\n<ul>\n<li>安装路径不要有中文或者特殊符号如空格等。</li>\n<li>所有和开发相关的软件最好安装目录统一。</li>\n<li>当提示安装 JRE 时，可以选择不安装。建议还是安装上。</li>\n</ul>\n<p>验证安装是否成功，通过 DOS 命令，切换到 JDK 安装的 bin 目录下。比如  <code>D:\\develop\\Java\\jdk1.7.0_72\\bin</code> ，然后分别输入 javac 和 java，如果正常显示一些内容，说明安装成功。</p>\n<h3 id=\"配置环境变量\"><a class=\"anchor\" href=\"#配置环境变量\">#</a> 配置环境变量</h3>\n<p>环境变量的作用：由于 javac 和 java 命令只能在固定的目录下才能执行，而我们写的代码如果都和 javac 及 java 命令放在相同的目录中的话，会显得很乱”，为了让 Java 的 bin 目录下的 javac 命令可以在任意目录下执行，就得配置环境变量。</p>\n<p>具体安装参考：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jbmJsb2dzLmNvbS9CZWxpZWZsZWUvcC80Nzc4MzE1Lmh0bWw=\">JAVA 开发环境的搭建（配置 JAVA 开发环境）</span></p>\n<p><strong>JDK 和 JRE 以及跨平台</strong></p>\n<p>JDK 与 JRE 的关系</p>\n<ul>\n<li>JDK：Java Development Kit ，Java 语言的开发工具包，提供了 Java 语言的开发工具，它里面包含了 JRE，同时也就包含了 JVM（Java 虚拟机）。</li>\n<li>JRE：Java Runtime Environment，它是 Java 运行环境，如果你不需要开发只需要运行 Java 程序，那么你可以安装 JRE。例如程序员开发出的程序最终卖给了用户，用户不用开发，只需要运行程序，所以用户在电脑上安装 JRE 即可。它包含了 Java 虚拟机，也就是 JVM，同时还包含了 Java 语言运行需要的核心类库。</li>\n</ul>\n<p>跨平台特性：平台指的是操作系统 （Windows，Linux，Mac）。只需在相应的平台上安装 Java 虚拟机，就可以运行 Java 程序。</p>\n<h2 id=\"使用intellij-idea打印hello-world\"><a class=\"anchor\" href=\"#使用intellij-idea打印hello-world\">#</a> 使用 IntelliJ IDEA 打印 Hello World</h2>\n<h3 id=\"第一步创建新项目\"><a class=\"anchor\" href=\"#第一步创建新项目\">#</a> 第一步：创建新项目</h3>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/612774-20170701211232211-2109811476.png\" alt=\"img\" /></p>\n<h3 id=\"第二步选择jdk然后next\"><a class=\"anchor\" href=\"#第二步选择jdk然后next\">#</a> 第二步：选择 jdk，然后 next</h3>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/612774-20170701211457883-150724723.png\" alt=\"img\" /></p>\n<h3 id=\"第三步选择hello-world模板然后next\"><a class=\"anchor\" href=\"#第三步选择hello-world模板然后next\">#</a> 第三步：选择 Hello World 模板，然后 Next</h3>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/612774-20170701211626743-101552981.png\" alt=\"img\" /></p>\n<h3 id=\"第四步输入项目名称然后finish\"><a class=\"anchor\" href=\"#第四步输入项目名称然后finish\">#</a> 第四步：输入项目名称，然后 Finish</h3>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/612774-20170701211759305-689114650.png\" alt=\"img\" /></p>\n<h3 id=\"第五步运行\"><a class=\"anchor\" href=\"#第五步运行\">#</a> 第五步：运行</h3>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/612774-20170701211901883-623625448.png\" alt=\"img\" /></p>\n<h3 id=\"第六步查看结果\"><a class=\"anchor\" href=\"#第六步查看结果\">#</a> 第六步：查看结果</h3>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/612774-20170701211940899-68699482.png\" alt=\"img\" /></p>\n<h2 id=\"java代码的编写执行过程\"><a class=\"anchor\" href=\"#java代码的编写执行过程\">#</a> Java 代码的编写执行过程</h2>\n<p>源文件：编写 Java 源文件（我们也称之为源代码文件），它的扩展名为.java；</p>\n<p>编译：然后通过编译器把源文件编译成字节码文件，字节码文件扩展名为.class；</p>\n<p>运行：最后使用解释器来运行字节码文件。</p>\n<h2 id=\"centos7下java8安装\"><a class=\"anchor\" href=\"#centos7下java8安装\">#</a> CentOS7 下 Java8 安装</h2>\n<ol>\n<li>\n<p>到 https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html 找到 jdk-8u221-linux-x64.tar.gz 的下载地址，需要登录。</p>\n</li>\n<li>\n<p>打开终端，使用 wget 命令下载。比如：wget <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb3dubG9hZC5vcmFjbGUuY29tL290bi9qYXZhL2pkay84dTIyMS1iMTEvMjMwZGViMThkYjNlNDAxNGJiOGUzZTgzMjRmODFiNDMvamRrLTh1MjIxLWxpbnV4LXg2NC50YXIuZ3o/QXV0aFBhcmFtPTE1Njk2NDE1MzBfMDVjNjk5YTAwYWMyYWZlMGMwZGRlN2NjNTc4NGU0ZDU=\">https://download.oracle.com/otn/java/jdk/8u221-b11/230deb18db3e4014bb8e3e8324f81b43/jdk-8u221-linux-x64.tar.gz?AuthParam=1569641530_05c699a00ac2afe0c0dde7cc5784e4d5</span></p>\n</li>\n<li>\n<p>解压，tar -xzvf jdk-8u221-linux-x64.tar.gz?AuthParam=1569641530_05c699a00ac2afe0c0dde7cc5784e4d5</p>\n</li>\n<li>\n<p>移动到 /usr/local 目录下，mv jdk-8u221-linux-x64.tar.gz?AuthParam=1569641530_05c699a00ac2afe0c0dde7cc5784e4d5 /opt/usr</p>\n</li>\n<li>\n<p>切换到 opt 目录下，cd /opt/usr</p>\n</li>\n<li>\n<p>改名为 java8，mv jdk-8u221-linux-x64.tar.gz?AuthParam=1569641530_05c699a00ac2afe0c0dde7cc5784e4d5 java8</p>\n</li>\n<li>\n<p>配置环境变量，vi /etc/profile, 在文件后面追加以下代码：</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">JAVA_HOME</span><span class=\"token operator\">=</span>/usr/local/java8</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">JRE_HOME</span><span class=\"token operator\">=</span>/usr/local/java8/jre</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$JAVA_HOME</span>/bin:<span class=\"token variable\">$JRE_HOME</span>/bin</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">CLASSPATH</span><span class=\"token operator\">=</span>.:<span class=\"token variable\">$JAVA_HOME</span>/lib/dt.jar:<span class=\"token variable\">$JAVA_HOME</span>/lib/tools.jar:<span class=\"token variable\">$JRE_HOME</span>/lib</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">export</span> JAVA_HOME JRE_HOME <span class=\"token environment constant\">PATH</span> CLASSPATH</pre></td></tr></table></figure><ol start=\"8\">\n<li>执行 source /etc/profile 命令使配置生效，到这一步就算安装完成了，使用 java -version 查看安装是否成功。</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://isviolet.github.io/p/d1cf2272.html",
            "url": "https://isviolet.github.io/p/d1cf2272.html",
            "title": "Json转实体类",
            "date_published": "2021-05-18T13:14:08.853Z",
            "content_html": "<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>这里使用 fastJson 的 JSON.parseObject () 方法，左边是 json 字符串，右边是要转换的实体类，即上面生成的实体类。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Entiy</span> entiy <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Entiy</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "JAVA开发手册"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/8d639fd2.html",
            "url": "https://isviolet.github.io/p/8d639fd2.html",
            "title": "编程规约の常量定义",
            "date_published": "2021-05-18T13:02:40.305Z",
            "content_html": "<p>1.【强制】不允许任何魔法值（即未经预先定义的常量）直接出现在代码中。<br />\n反例：String key = &quot;Id#taobao_&quot;+ tradeId;<br />\ncache.put(key, value)</p>\n<p>2.【强制】在 long 或者 Long 赋值时，数值后使用大写的 L，不能是小写的 l，小写容易跟数字 1 混淆，造成误解。<br />\n说明：Long a = 2l; 写的是数字的 21，还是 Long 型的 2?</p>\n<p>3.【推荐】不要使用一个常量类维护所有常量，要按<strong>常量功能</strong>进行归类，分开维护。<br />\n说明：大而全的常量类，杂乱无章，使用查找功能才能定位到修改的常量，不利于理解和维护。<br />\n正例：缓存相关常量放在类 CacheConsts 下；系统配置相关常量放在类 ConfigConsts 下。</p>\n<p>4.【推荐】常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。<br />\n1） 跨应用共享常量：放置在二方库中，通常是 client.jar 中的 constant 目录下。<br />\n2） 应用内共享常量：放置在一方库中，通常是子模块中的 constant 目录下。<br />\n反例：易懂变量也要统一定义成应用内共享常量，两位攻城师在两个类中分别定义了表示 “是” 的变量：<br />\n类 A 中：public static final String YES = &quot;yes&quot;;<br />\n 类 B 中：public static final String YES = &quot;y&quot;;<br />\nA.YES.equals (B.YES)，预期是 true，但实际返回为 false，导致线上问题。<br />\n3） 子工程内部共享常量：即在当前子工程的 constant 目录下。<br />\n4） 包内共享常量：即在当前包下单独的 constant 目录下。<br />\n5） 类内共享常量：直接在类内部 private static final 定义。</p>\n<p>5.【推荐】如果变量值仅在一个固定范围内变化用 enum 类型来定义。<br />\n说明：如果存在名称之外的延伸属性应使用 enum 类型，下面正例中的数字就是延伸信息，表示一年中的第几个季节。<br />\n正例：<br />\npublic enum SeasonEnum {<br />\nSPRING(1), SUMMER(2), AUTUMN(3), WINTER(4);<br />\nprivate int seq;<br />\nSeasonEnum(int seq){<br />\nthis.seq = seq;<br />\n}<br />\n}</p>\n",
            "tags": [
                "JAVA开发手册"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/f50429c.html",
            "url": "https://isviolet.github.io/p/f50429c.html",
            "title": "编程规约の命名风格",
            "date_published": "2021-05-18T13:00:49.598Z",
            "content_html": "<ol>\n<li>【强制】代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。</li>\n</ol>\n<p>反例：_name / <strong>name / <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><mi>a</mi><mi>m</mi><msub><mi>e</mi><mi mathvariant=\"normal\">/</mi></msub><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">name / name_ / name</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1052em;vertical-align:-0.3551999999999999em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">e</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">m</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.34480000000000005em;\"><span style=\"top:-2.5198em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">/</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3551999999999999em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">e</span></span></span></span> / name</strong></p>\n<hr />\n<ol start=\"2\">\n<li>\n<p>【强制】代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。<br />\n说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用。<br />\n正例：alibaba /taobao/youku /hangzhou 等国际通用的名称，可视同英文。<br />\n反例：DaZhePromotion [打折] /getPingfenByName () [评分] /int 某变量 = 3</p>\n</li>\n<li>\n<p>【强制】类名使用 UpperCamelCase 风格，但以下情形例外：DO / BO / DTO / VO / AO /PO/ UID 等。<br />\n正例：MarcoPolo / UserDO / XmlService / TcpUdpDeal / TaPromotion<br />\n 反例：macroPolo / UserDo / XMLService / TCPUDPDeal / TAPromotion</p>\n</li>\n<li>\n<p>【强制】方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。<br />\n正例： localValue /getHttpMessage () /inputUserId</p>\n</li>\n<li>\n<p>【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。<br />\n正例：MAX_STOCK_COUNT<br />\n 反例：MAX_COUNT</p>\n</li>\n<li>\n<p>【强制】抽象类命名使用 Abstract 或 Base 开头；异常类命名使用 Exception 结尾；测试类命名以它要测试的类的名称开始，以 Test 结尾。</p>\n</li>\n<li>\n<p>【强制】类型与中括号紧挨相连来表示数组。<br />\n正例：定义整形数组 int [] arrayDemo;<br />\n 反例：在 main 参数中，使用 String args [] 来定义。</p>\n</li>\n<li>\n<p>【强制】POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误。<br />\n反例：定义为基本数据类型 Boolean isDeleted 的属性，它的方法也是 isDeleted ()，RPC 框架在反向解析的时候，“误以为” 对应的属性名称是 deleted，导致属性获取不到，进而抛出异常。</p>\n</li>\n<li>\n<p>【强制】包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。<br />\n正例：应用工具类包名为 com.alibaba.ai.util、类名为 MessageUtils（此规则参考 spring 的框架结构）</p>\n</li>\n<li>\n<p>【强制】杜绝完全不规范的缩写，避免望文不知义。<br />\n反例：AbstractClass “缩写” 命名成 AbsClass；condition “缩写” 命名成 condi，此类随意缩写严重降低了代码的可阅读性。</p>\n</li>\n<li>\n<p>【推荐】为了达到代码自解释的目标，任何自定义编程元素在命名时，使用尽量完整的单词组合来表达其意。<br />\n正例：在 JDK 中，表达原子更新的类名为：AtomicReferenceFieldUpdater。<br />\n反例：变量 int a 的随意命名方式。</p>\n</li>\n<li>\n<p>【推荐】如果模块、接口、类、方法使用了设计模式，在命名时需体现出具体模式。说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计理念。<br />\n正例：public class OrderFactory;<br />\npublic class LoginProxy;<br />\npublic class ResourceObserver;</p>\n</li>\n<li>\n<p>【推荐】接口类中的方法和属性不要加任何修饰符号（public 也不要加），保持代码的简洁性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。<br />\n正例：接口方法签名 void commit ();<br />\n 接口基础常量 String COMPANY = &quot;alibaba&quot;;<br />\n 反例：接口方法定义 public abstract void f ();<br />\n 说明：JDK8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默认实现。</p>\n</li>\n<li>\n<p>接口和实现类的命名有两套规则：<br />\n1）【强制】对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部的实现类用 Impl 的后缀与接口区别。<br />\n正例：CacheServiceImpl 实现 CacheService 接口。<br />\n2）【推荐】如果是形容能力的接口名称，取对应的形容词为接口名（通常是–able 的形式）。<br />\n正例：AbstractTranslator 实现 Translatable 接口。</p>\n</li>\n<li>\n<p>【参考】枚举类名建议带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。<br />\n说明：枚举其实就是特殊的类，域成员均为常量，且构造方法被默认强制是私有。<br />\n正例：枚举名字为 ProcessStatusEnum 的成员名称：SUCCESS / UNKNOWN_REASON。</p>\n</li>\n<li>\n<p>【参考】各层命名规约：<br />\nA) Service/DAO 层方法命名规约<br />\n 1） 获取单个对象的方法用 get 做前缀。<br />\n2） 获取多个对象的方法用 list 做前缀，复数形式结尾如：listObjects。<br />\n3） 获取统计值的方法用 count 做前缀。<br />\n4） 插入的方法用 save/insert 做前缀。<br />\n5） 删除的方法用 remove/delete 做前缀。<br />\n6） 修改的方法用 update 做前缀。<br />\nB) 领域模型命名规约<br />\n 1） 数据对象：xxxDO，xxx 即为数据表名。<br />\n2） 数据传输对象：xxxDTO，xxx 为业务领域相关的名称。<br />\n3） 展示对象：xxxVO，xxx 一般为网页名称。<br />\n4） POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。</p>\n</li>\n</ol>\n",
            "tags": [
                "JAVA开发手册"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/f5608694.html",
            "url": "https://isviolet.github.io/p/f5608694.html",
            "title": "java获取网络图片的宽和高",
            "date_published": "2021-05-18T12:24:25.051Z",
            "content_html": "<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 获取网络图片的宽和高</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * @param url</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getWidthAndHeight</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">InputStream</span> is <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">openStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">BufferedImage</span> sourceImg <span class=\"token operator\">=</span> <span class=\"token class-name\">ImageIO</span><span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">int</span> width <span class=\"token operator\">=</span> sourceImg<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">int</span> height <span class=\"token operator\">=</span> sourceImg<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> width<span class=\"token operator\">+</span><span class=\"token string\">\"*\"</span><span class=\"token operator\">+</span>height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取图片宽高失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "JAVA"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/518e9178.html",
            "url": "https://isviolet.github.io/p/518e9178.html",
            "title": "Java 基础语法",
            "date_published": "2021-05-18T12:10:29.874Z",
            "content_html": "<h3 id=\"java-基础语法\"><a class=\"anchor\" href=\"#java-基础语法\">#</a> Java 基础语法</h3>\n<p>一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念。</p>\n<ul>\n<li>对象：<strong>对象是类的一个实例</strong>，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</li>\n<li>类：类是一个<strong>模板</strong>，它描述一类对象的行为和状态。</li>\n<li>方法：<strong>方法就是行为</strong>，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。</li>\n<li>实例变量：每个<strong>对象都有独特的实例变量</strong>，对象的状态由这些<strong>实例变量的值</strong>决定。</li>\n</ul>\n<h3 id=\"第一个java程序\"><a class=\"anchor\" href=\"#第一个java程序\">#</a> 第一个 Java 程序</h3>\n<p>下面看一个简单的 Java 程序，它将打印字符串 Hello World</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/* 第一个 Java 程序</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 它将打印字符串 Hello World</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印 Hello World</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"基本语法\"><a class=\"anchor\" href=\"#基本语法\">#</a> 基本语法</h3>\n<p>编写 Java 程序时，应注意以下几点：</p>\n<ul>\n<li><strong>大小写敏感</strong>：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。</li>\n<li>类名：对于所有的类来说，<strong>类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass</strong> 。</li>\n<li>方法名：<strong>所有的方法名都应该以小写字母开头</strong>。<strong>如果方法名含有若干单词，则后面的每个单词首字母大写。</strong></li>\n<li>源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。</li>\n<li>主方法入口：所有的 Java 程序由 public static void main (String [] args) 方法开始执行。</li>\n</ul>\n<h3 id=\"java-标识符\"><a class=\"anchor\" href=\"#java-标识符\">#</a> Java 标识符</h3>\n<p>Java 所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。</p>\n<p>关于 Java 标识符，有以下几点需要注意：</p>\n<ul>\n<li>所有的标识符都应该以字母（A-Z 或者 a-z）, 美元符（$）、或者下划线（_）开始</li>\n<li>首字符之后可以是字母（A-Z 或者 a-z）, 美元符（$）、下划线（_）或数字的任何字符组合</li>\n<li>关键字不能用作标识符</li>\n<li>标识符是大小写敏感的</li>\n<li>合法标识符举例：age、$salary、_value、__1_value</li>\n<li>非法标识符举例：123abc、-salary</li>\n</ul>\n<h3 id=\"java修饰符\"><a class=\"anchor\" href=\"#java修饰符\">#</a> Java 修饰符</h3>\n<p>像其他语言一样，Java 可以使用修饰符来修饰类中方法和属性。主要有两类修饰符：</p>\n<ul>\n<li>访问控制修饰符 : default, public , protected, private</li>\n<li>非访问控制修饰符 : final, abstract, static, synchronized</li>\n</ul>\n<h3 id=\"java-变量\"><a class=\"anchor\" href=\"#java-变量\">#</a> Java 变量</h3>\n<p>java 中主要有如下几种类型的变量</p>\n<ul>\n<li>局部变量</li>\n<li>类变量（静态变量）</li>\n<li>成员变量（非静态变量）</li>\n</ul>\n<h3 id=\"java-数组\"><a class=\"anchor\" href=\"#java-数组\">#</a> Java 数组</h3>\n<p>数组是储存在堆上的对象，可以保存多个同类型变量。在后面的章节中，我们将会学到如何声明、构造以及初始化一个数组。</p>\n<h3 id=\"java-枚举\"><a class=\"anchor\" href=\"#java-枚举\">#</a> Java 枚举</h3>\n<p>Java 5.0 引入了枚举，枚举限制变量只能是预先设定好的值。使用枚举可以减少代码中的 bug。</p>\n<p>例如，我们为果汁店设计一个程序，它将限制果汁为小杯、中杯、大杯。这就意味着它不允许顾客点除了这三种尺寸外的果汁。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">FreshJuice</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">enum</span> <span class=\"token class-name\">FreshJuiceSize</span><span class=\"token punctuation\">&#123;</span> SMALL<span class=\"token punctuation\">,</span> MEDIUM <span class=\"token punctuation\">,</span> LARGE <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token class-name\">FreshJuiceSize</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FreshJuiceTest</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token class-name\">FreshJuice</span> juice <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FreshJuice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> juice<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token class-name\">FreshJuice<span class=\"token punctuation\">.</span>FreshJuiceSize</span><span class=\"token punctuation\">.</span>MEDIUM <span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意：枚举可以单独声明或者声明在类里面。方法、变量、构造函数也可以在枚举中定义。</p>\n<h3 id=\"java-关键字\"><a class=\"anchor\" href=\"#java-关键字\">#</a> Java 关键字</h3>\n<p>下面列出了 Java 关键字。这些保留字不能用于常量、变量、和任何标识符的名称。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类别</th>\n<th style=\"text-align:center\">关键字</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">访问控制</td>\n<td style=\"text-align:center\">private</td>\n<td style=\"text-align:center\">私有的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">protected</td>\n<td style=\"text-align:center\">受保护的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">public</td>\n<td style=\"text-align:center\">公共的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">default</td>\n<td style=\"text-align:center\">默认</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">类、方法和变量修饰符</td>\n<td style=\"text-align:center\">abstract</td>\n<td style=\"text-align:center\">声明抽象</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"java注释\"><a class=\"anchor\" href=\"#java注释\">#</a> Java 注释</h3>\n<p>类似于 C/C++、Java 也支持单行以及多行注释。注释中的字符将被 Java 编译器忽略。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">/* 这是第一个 Java 程序</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    * 它将打印 Hello World</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    * 这是一个多行注释的示例</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token comment\">// 这是单行注释的示例</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token comment\">/* 这个也是单行注释的示例 */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"java-空行\"><a class=\"anchor\" href=\"#java-空行\">#</a> Java 空行</h3>\n<p>空白行或者有注释的行，Java 编译器都会忽略掉。</p>\n<h3 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h3>\n<p>在 Java 中，一个类可以由其他类派生。如果你要创建一个类，而且已经存在一个类具有你所需要的属性或方法，那么你可以将新创建的类继承该类。</p>\n<p>利用继承的方法，可以重用已存在类的方法和属性，而不用重写这些代码。被继承的类称为超类（super class），派生类称为子类（subclass）。</p>\n<h3 id=\"接口\"><a class=\"anchor\" href=\"#接口\">#</a> 接口</h3>\n<p>在 Java 中，接口可理解为对象间相互通信的协议。接口在继承中扮演着很重要的角色。</p>\n<p>接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类。</p>\n<h3 id=\"java-源程序与编译型运行区别\"><a class=\"anchor\" href=\"#java-源程序与编译型运行区别\">#</a> Java 源程序与编译型运行区别</h3>\n<p><img data-src=\"https://i.loli.net/2021/05/18/9tewhnfaI18sz6S.jpg\" alt=\"img\" /></p>\n",
            "tags": [
                "JAVA"
            ]
        }
    ]
}