{
    "version": "https://jsonfeed.org/version/1",
    "title": "友人帐 • All posts by \"栈\" category",
    "description": "",
    "home_page_url": "https://isviolet.github.io",
    "items": [
        {
            "id": "https://isviolet.github.io/p/1899f14b.html",
            "url": "https://isviolet.github.io/p/1899f14b.html",
            "title": "栈的概念及其应用",
            "date_published": "2021-05-18T13:04:47.386Z",
            "content_html": "<h2 id=\"栈的概念及其应用\"><a class=\"anchor\" href=\"#栈的概念及其应用\">#</a> 栈的概念及其应用</h2>\n<ul>\n<li>栈是仅限制在表尾进行插入和删除操作的特殊线性表</li>\n<li>栈中限制操作的表尾端称为 “栈顶”，另一端称为 “栈底”</li>\n<li>栈具有后进先出或先进后出的操作特性</li>\n</ul>\n<p>栈的生活应用：抽纸盒，子弹压入和弹出</p>\n<p>栈的计算机的应用：表达式求值，迷宫求解，函数递归</p>\n<h2 id=\"顺序栈基本操作的实现\"><a class=\"anchor\" href=\"#顺序栈基本操作的实现\">#</a> 顺序栈基本操作的实现</h2>\n<p>栈的顺序存储结构描述：</p>\n<pre><code>typedef struct&#123;\n    SElemType *base;//栈底指针\n    SElemType *top;//栈顶指针\n    int stacksize;\n&#125;SqStack;\n</code></pre>\n<h3 id=\"顺序栈入栈操作\"><a class=\"anchor\" href=\"#顺序栈入栈操作\">#</a> <strong>顺序栈入栈操作</strong></h3>\n<p>分析：将元素 e 插入到顺序栈 S 内，将其成为新的栈顶元素。</p>\n<ul>\n<li>入栈步骤</li>\n</ul>\n<ol>\n<li>检测（判断栈是否满）</li>\n</ol>\n<p>如果 S.top-S.base &gt;= S.stacksize, 则需要用 realloc 函数追加空间</p>\n<ol start=\"2\">\n<li>压入（将 e 压入到栈顶指针所指示的存储单元）</li>\n</ol>\n<p>*S.top = e;</p>\n<ol start=\"3\">\n<li>修正栈顶指针（栈顶指针后移一位）</li>\n</ol>\n<p>S.top = S.top+1;</p>\n<ul>\n<li>时间复杂度为 O (1)</li>\n</ul>\n<h3 id=\"顺序栈出栈操作\"><a class=\"anchor\" href=\"#顺序栈出栈操作\">#</a> <strong>顺序栈出栈操作</strong></h3>\n<p>分析：当栈非空时，删除栈顶元素，并返回该元素</p>\n<ul>\n<li>出栈步骤</li>\n</ul>\n<ol>\n<li>检测（判断栈是否满）</li>\n</ol>\n<p>若 S.top S.base，则结束操作</p>\n<ol start=\"2\">\n<li>将栈顶指针前移一位</li>\n</ol>\n<p>S.top = S.top -1;</p>\n<ol start=\"3\">\n<li>读取到被删的栈顶元素并存入 e 中</li>\n</ol>\n<p>e = *S.top;</p>\n<h2 id=\"链栈基本操作的实现\"><a class=\"anchor\" href=\"#链栈基本操作的实现\">#</a> 链栈基本操作的实现</h2>\n<h3 id=\"链栈入栈操作的实现\"><a class=\"anchor\" href=\"#链栈入栈操作的实现\">#</a> <strong>链栈入栈操作的实现</strong></h3>\n<p>分析：将元素 e 插入到链栈中，使其成为新的栈顶元素</p>\n<ol>\n<li>确定插入位置</li>\n</ol>\n<p>插入到 S 指针所指示的结点前面</p>\n<ol start=\"2\">\n<li>产生待插入的新结点</li>\n</ol>\n<p>p = (LinkList)malloc(sizeof(SNode));</p>\n<p>p-&gt;data = e;</p>\n<ol start=\"3\">\n<li>修改链指针（使新结点链入链表的指定位置）</li>\n</ol>\n<p>p-&gt;next = S;</p>\n<p>S = p;</p>\n<h3 id=\"链栈出栈操作的实现\"><a class=\"anchor\" href=\"#链栈出栈操作的实现\">#</a> <strong>链栈出栈操作的实现</strong></h3>\n<p>分析： 当栈非空时，删除栈顶元素，并返回该元素</p>\n<ol>\n<li>判断链栈是否空</li>\n</ol>\n<p>若 S NULL; 则结束操作</p>\n<ol start=\"2\">\n<li>确定待删结点</li>\n</ol>\n<p>p = S;</p>\n<ol start=\"3\">\n<li>修改链指针，使待删结点从链中脱离出来</li>\n</ol>\n<p>S = p-&gt;next;</p>\n<ol start=\"4\">\n<li>释放空间</li>\n</ol>\n<p>e = p-&gt;data;</p>\n<p>free(p);</p>\n",
            "tags": [
                "栈"
            ]
        }
    ]
}