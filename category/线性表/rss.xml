<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Violet • Posts by &#34;线性表&#34; category</title>
        <link>https://isviolet.github.io</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Tue, 18 May 2021 20:53:09 +0800</pubDate>
        <lastBuildDate>Tue, 18 May 2021 20:53:09 +0800</lastBuildDate>
        <category>Android</category>
        <category>JAVAWEB</category>
        <category>springboot</category>
        <category>unity3D</category>
        <category>极限和连续</category>
        <category>HTTP</category>
        <category>CDC</category>
        <category>bug</category>
        <category>linux</category>
        <category>python</category>
        <category>爬虫</category>
        <category>线性表</category>
        <category>JAVA</category>
        <category>栈</category>
        <category>JAVA开发手册</category>
        <category>无穷小</category>
        <category>数据库</category>
        <item>
            <guid isPermalink="true">https://isviolet.github.io/p/95c1e261.html</guid>
            <title>线性表的顺序存储及其实现</title>
            <link>https://isviolet.github.io/p/95c1e261.html</link>
            <category>线性表</category>
            <pubDate>Tue, 18 May 2021 20:53:09 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;顺序表的插入操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#顺序表的插入操作&#34;&gt;#&lt;/a&gt; 顺序表的插入操作&lt;/h2&gt;
&lt;p&gt;主要操作步骤及其实现方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检测（判断参数 i 是否合理及空间是否满）
&lt;ol&gt;
&lt;li&gt;若 i&amp;lt;1||i&amp;gt;L.length+1，插入位置不合理，算法结束；&lt;/li&gt;
&lt;li&gt;若 L.length&amp;gt;=L.listsize，则存储空间已满，需增加分配空间&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;后移（插入位置及之后的所有元素后移一位）&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;q = &amp;amp;(L.elem[i-1]); //q指示插入位置
for(p = &amp;amp;(L.elem[L.length-1]);p&amp;gt;=q;--p)
\*(p+1) = *p; //后移一位
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;插入（将新元素插入到指定位置上）&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;*q = e; //插入e
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;修正表长（表长加 1）&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;++L.length; //表长增1
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;顺序表的删除操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#顺序表的删除操作&#34;&gt;#&lt;/a&gt; 顺序表的删除操作&lt;/h2&gt;
&lt;p&gt;主要操作步骤及其实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检测（判断参数 i 是否合理）若 i&amp;lt;1||i&amp;gt;L.length，删除位置不合理，算法结束&lt;/li&gt;
&lt;li&gt;前移（删除元素之后的所有元素前移一位）&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;p = &amp;amp;(L.elem[i-1]); //p指示删除位置
e = *p; //用e返回被删除元素的值
q = &amp;amp;(L.elem[L.length-1]); //p指示表尾位置
for(p++; p&amp;gt;=q; --p)
    *(p+1) = *p; //后移一位
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;修正表长（表长减 1）&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;--L.length; //表长减1
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://isviolet.github.io/p/9913f71d.html</guid>
            <title>线性表的存储结构</title>
            <link>https://isviolet.github.io/p/9913f71d.html</link>
            <category>线性表</category>
            <pubDate>Tue, 18 May 2021 20:52:08 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;线性表的顺序存储结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线性表的顺序存储结构&#34;&gt;#&lt;/a&gt; 线性表的顺序存储结构：&lt;/h2&gt;
&lt;p&gt;是用一组地址连续的存储单元依次存放线性表中的数据元素的存储结构。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下标为 0 的元素是线性表的起始地址，称为线性表的基地址，n 为表的长度，用 a1 表示&lt;/li&gt;
&lt;li&gt;用顺序存储的线性表就称为顺序表&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据元素的地址计算公式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据元素的地址计算公式&#34;&gt;#&lt;/a&gt; 数据元素的地址计算公式：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;LOC(a[i]) = LOC(a[i-1]) + C&lt;/li&gt;
&lt;li&gt;LOC(a[i]) = LOC(a[1]) + (i-1) * C&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a [1] 是线性表的基地址&lt;/li&gt;
&lt;li&gt;(i-1) 表示所求元素的下标 (下标从 0 开始)&lt;/li&gt;
&lt;li&gt;C 代表一个数据元素所占的存储量&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;线性表的顺序存储结构描述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线性表的顺序存储结构描述&#34;&gt;#&lt;/a&gt; 线性表的顺序存储结构描述：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;静态顺序存储结构的描述
&lt;ul&gt;
&lt;li&gt;当前定义的表的长度固定&lt;/li&gt;
&lt;li&gt;静态顺序表类型名：SqListtp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#define MAXLEN 80
typedef struct &amp;#123;
    ElemType elem[MAXLEN];
    int length; //当前表的长度
&amp;#125; SqListtp;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;动态顺序存储结构的描述
&lt;ul&gt;
&lt;li&gt;元素类型是存储空间的基址&lt;/li&gt;
&lt;li&gt;有预分配的空间容量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;typedef struct &amp;#123;
    ElemType *elem; //存储空间的基址
    int length; //当前表的长度
    int listsize;//当前预分配的空间容量
&amp;#125; SqList;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;重要组成要素
&lt;ol&gt;
&lt;li&gt;顺序表 L 的基地址：L.elem&lt;/li&gt;
&lt;li&gt;顺序表 L 的长度：L.length&lt;/li&gt;
&lt;li&gt;顺序表 L 的容量：L.listsize&lt;/li&gt;
&lt;li&gt;数据元素 a [i]：L.elem [i-1]&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;线性表的链式存储结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线性表的链式存储结构&#34;&gt;#&lt;/a&gt; 线性表的链式存储结构：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;链式存储中每个节点只含一个指针域，则称为单链表或线性链表&lt;/li&gt;
&lt;li&gt;链式存储中每个节点含多个指针域，则称为多链表
&lt;ul&gt;
&lt;li&gt;单链表的存储结构描述：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个结点：data（数据域），next（指针域）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;typedef struct LNode &amp;#123;
    ElemType data; //数据域
    struct LNode *next; //指针域
&amp;#125;LNode,*LinkList;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;顺序存储结构的特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#顺序存储结构的特点&#34;&gt;#&lt;/a&gt; 顺序存储结构的特点：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;优势
&lt;ol&gt;
&lt;li&gt;存储密度高；&lt;/li&gt;
&lt;li&gt;便于随机存储；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;劣势
&lt;ol&gt;
&lt;li&gt;不便于插入、删除。（会造成大量数据移动）&lt;/li&gt;
&lt;li&gt;需预分配空间充足，造成空间浪费&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;链式存储结构的特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#链式存储结构的特点&#34;&gt;#&lt;/a&gt; 链式存储结构的特点：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;优势
&lt;ol&gt;
&lt;li&gt;便于插入、删除操作&lt;/li&gt;
&lt;li&gt;能有效利用存储空间&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;劣势不能随机存取数据元素，只能顺序存取数据元素&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://isviolet.github.io/p/6f136d02.html</guid>
            <title>线性表相关概念</title>
            <link>https://isviolet.github.io/p/6f136d02.html</link>
            <category>线性表</category>
            <pubDate>Tue, 18 May 2021 20:51:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;线性表的定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线性表的定义&#34;&gt;#&lt;/a&gt; 线性表的定义：&lt;/h2&gt;
&lt;p&gt;线性表是由 n (n&amp;gt;=0) 个数据元素（结点）所构成的有限序列。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个元素：开始结点 a1&lt;/li&gt;
&lt;li&gt;最后一个元素：终端结点 an&lt;/li&gt;
&lt;li&gt;数据元素：（a1，a2，a3，…，an），当 n 为 0 时，称为空表&lt;/li&gt;
&lt;li&gt;a (i-1) 是 ai 的直接前趋，a (i+1) 是 ai 的直接后趋&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;线性表的结构逻辑结构特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线性表的结构逻辑结构特点&#34;&gt;#&lt;/a&gt; 线性表的结构（逻辑结构）特点：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;它由 n (n&amp;gt;=0) 个同类型的元素组成；&lt;/li&gt;
&lt;li&gt;有且仅有一个开始结点 (第一个元素) 和终端结点 (最后 - 个元素) ;&lt;/li&gt;
&lt;li&gt;每个元素除开始结点和终端结点之外，有且仅有一个前驱和一个后继。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;线性表的抽象数据类型定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线性表的抽象数据类型定义&#34;&gt;#&lt;/a&gt; 线性表的抽象数据类型定义：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;数据对象 (D)：D= 元素集合；&lt;/li&gt;
&lt;li&gt;数据关系 (S)：R= 相邻关系&lt;/li&gt;
&lt;li&gt;基本操作 (P)：
&lt;ol&gt;
&lt;li&gt;初始化操作：initList (&amp;amp;L)&lt;/li&gt;
&lt;li&gt;结构销毁操作：destroyList (&amp;amp;L)&lt;/li&gt;
&lt;li&gt;线性表判空操：listEmpty (L)&lt;/li&gt;
&lt;li&gt;求线性表的长度操作：listLength (L)&lt;/li&gt;
&lt;li&gt;求数据元素的前驱操作：priorElem (L, cur_e, &amp;amp;pre_e);&lt;/li&gt;
&lt;li&gt;求数据元素的后继操作：NextElem (L, cur_e, &amp;amp;next_e)&lt;/li&gt;
&lt;li&gt;取线性表中某个数据元素操作：GetElem (L, i, &amp;amp;e)&lt;/li&gt;
&lt;li&gt;定位 (查找) 操作：LocateElem (L, e, compare ())&lt;/li&gt;
&lt;li&gt;遍历线性表操作：ListTraverse (L, visit ())&lt;/li&gt;
&lt;li&gt;线性表置空操作：ClearList (&amp;amp;L)&lt;/li&gt;
&lt;li&gt;插入操作：ListInsert (&amp;amp;L, i, e)&lt;/li&gt;
&lt;li&gt;删除操作：ListDelete (&amp;amp;L, i, &amp;amp;e)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
