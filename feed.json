{
    "version": "https://jsonfeed.org/version/1",
    "title": "友人帐🎴",
    "description": "",
    "home_page_url": "https://isviolet.github.io",
    "items": [
        {
            "id": "https://isviolet.github.io/p/7bff8c7a.html",
            "url": "https://isviolet.github.io/p/7bff8c7a.html",
            "title": "2.人物孵化、移动路线制作",
            "date_published": "2022-03-09T04:52:13.956Z",
            "content_html": "<blockquote>\n<p>最近有些忙碌了，关于明日方舟的模仿制作进度有些耽搁了，今天打算把人物的生成，路线的规划，人物移动的动画等功能做个了结</p>\n</blockquote>\n<h1 id=\"素材准备\"><a class=\"anchor\" href=\"#素材准备\">#</a> 素材准备</h1>\n<p>因为是模仿明日方舟，我手上也没有现成的素材可以使用，所以准备借用方舟的小人模型进行学习使用，本人不会用于任何商业用途，不进行分享传播，只是个人使用。（强烈的求生欲）</p>\n<h2 id=\"如何获取小人模型\"><a class=\"anchor\" href=\"#如何获取小人模型\">#</a> 如何获取小人模型</h2>\n<ol>\n<li>\n<p>哔哩哔哩上有提取人物模型的教程 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3JlYWQvY3Y2MDE0MjE0\">明日方舟人物素材提取的补充【20200510】</span></p>\n</li>\n<li>\n<p>哔哩哔哩有 Up 上传了部分的小人模型，大约十个左右，对于我学习来说够用了，有兴趣可以自行去搜索</p>\n</li>\n</ol>\n<h2 id=\"制作动画序列图\"><a class=\"anchor\" href=\"#制作动画序列图\">#</a> 制作动画序列图</h2>\n<h3 id=\"动画原料\"><a class=\"anchor\" href=\"#动画原料\">#</a> 动画原料</h3>\n<p>如果要制作小人动画，就需要很多的序列图，这里我搞到了一个透明背景的 MOV 视频</p>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220309180330853.png\" alt=\"image-20220309180330853\" /></p>\n<p>但是仅仅视频是完全不行的，需要的是图片，也就是帧，接下来我就去寻找如果去获取序列图了。</p>\n<hr />\n<h3 id=\"截取视频\"><a class=\"anchor\" href=\"#截取视频\">#</a> 截取视频</h3>\n<p>发现视频播放器可以截图，保存帧的各个图片，于是我立刻就去截图了，但是发现出来的并不是透明背景的，而且图片尺寸不是小人的大小，还包含了边上的没用的部分</p>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220309180330853.png\" alt=\"\" /></p>\n<p>效果类似上面这样，如果这样放进 unity，会有一坨黑色的背景。</p>\n<p>于是我又开始寻找如何去背景水印和截图了。</p>\n<h3 id=\"批量截图\"><a class=\"anchor\" href=\"#批量截图\">#</a> 批量截图</h3>\n<p>最终我也没找到什么软件可以一键批量截图，只找到一个批量导入再一张一张裁剪的软件，然而要钱🤬</p>\n<p>我想到自己选个区域录频，然后再截图，那裁剪的工作就完成了，算是投机取巧了。</p>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220309180401208.png\" alt=\"image-20220309180401208\" /></p>\n<p>效果类似这样了，接下来就是去背景水印了。</p>\n<h3 id=\"去背景水印\"><a class=\"anchor\" href=\"#去背景水印\">#</a> 去背景水印</h3>\n<p>也是一样，不是功能鸡肋就是要钱，最可气的是功能鸡肋还要钱的软件了🤬🤬🤬</p>\n<p>最后找到一款不错的去背景软件<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmVtb3ZlLmJnL3poL2hlbHAvcmVtb3ZlLWJnLWZvci1kZXNrdG9w\"> Remove.bg</span>，安装在电脑上，注册个账号获取 API 密钥，就可以批量导入然后获得透明背景的图片了。</p>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220309180408880.png\" alt=\"image-20220309180408880\" /></p>\n<hr />\n<blockquote>\n<p>搞了半天终于完成了这个工作，但有人会说为什么不用 Ps 和 Ae，因为我没下载，也不会用。🤬</p>\n</blockquote>\n<h1 id=\"敌人路径\"><a class=\"anchor\" href=\"#敌人路径\">#</a> 敌人路径</h1>\n<p>首先展示下地图全貌</p>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220309172449791.png\" alt=\"image-20220309172449791\" /></p>\n<h2 id=\"创建地图移动点坐标\"><a class=\"anchor\" href=\"#创建地图移动点坐标\">#</a> 创建地图移动点坐标</h2>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220309172700206.png\" alt=\"image-20220309172700206\" /></p>\n<p>创建三个坐标，就是上图中的三个蓝色的物体。作用是引导敌人移动的轨迹。</p>\n<p>将三个点都放到父控件中，并且给父控件添加一个脚本</p>\n<pre><code class=\"language-c#\">public class WayPoints : MonoBehaviour\n&#123;\n    public static Transform[] positions;\n    void Awake()&#123;\n        positions = new Transform[transform.childCount];\n        for (int i = 0; i &lt; positions.Length; i++)\n        &#123;\n            positions[i] = transform.GetChild(i);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"创建游戏管理类\"><a class=\"anchor\" href=\"#创建游戏管理类\">#</a> 创建游戏管理类</h1>\n<pre><code class=\"language-c#\">public class EnemySpawner : MonoBehaviour\n&#123;\n    public static int CountEnemyAlive = 0;\n    public Wave[] waves;\n    public Transform START;\n    public float waveRate;\n\n    // Start is called before the first frame update\n    void Start() &#123;\n        StartCoroutine(SpawnEnemy());\n    &#125;\n\n    IEnumerator SpawnEnemy()&#123;\n        foreach (Wave wave in waves)&#123;\n            for (int i = 0; i &lt; wave. count; i++)&#123;\n                GameObject.Instantiate(wave.enemyPrefab, START.position, Quaternion.identity);\n                CountEnemyAlive++;\n                yield return new WaitForSeconds(wave.rate);\n            &#125;\n            while(CountEnemyAlive &gt; 0)&#123;\n                yield return 0;\n            &#125;\n            yield return new WaitForSeconds(waveRate);\n        &#125;\n    &#125; \n    \n&#125;\n</code></pre>\n<pre><code class=\"language-c#\">[System.Serializable]\npublic class Wave&#123;\n    public GameObject enemyPrefab;\n    public int count;\n    public float rate;\n&#125;\n</code></pre>\n<p>代码如上，表示敌人显示的波数、每波敌人的类型，敌人的出怪数量和速度等等都可以控制。</p>\n<p>这是我的每波敌人的详细设置</p>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220309173500302.png\" alt=\"image-20220309173500302\" /></p>\n<h1 id=\"角色移动动画制作\"><a class=\"anchor\" href=\"#角色移动动画制作\">#</a> 角色移动动画制作</h1>\n<p>已经准备好了角色的动画序列图，接下来制作下动画，步骤还是比较简单的。</p>\n<h2 id=\"导入picture\"><a class=\"anchor\" href=\"#导入picture\">#</a> 导入 picture</h2>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220309173659816.png\" alt=\"image-20220309173659816\" /></p>\n<p>导入后可能不能拖动到场景中，原因是图片类型不对</p>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220309173755832.png\" alt=\"image-20220309173755832\" /></p>\n<p>将其修改成 sprite 就可以了</p>\n<h2 id=\"创建动画类\"><a class=\"anchor\" href=\"#创建动画类\">#</a> 创建动画类</h2>\n<ol>\n<li>选中该角色，创建一个组件叫 animator</li>\n</ol>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220309174204425.png\" alt=\"image-20220309174204425\" /></p>\n<ol start=\"2\">\n<li>在创建一个 animate controller，将其移动到 animator 中</li>\n</ol>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220309174242682.png\" alt=\"image-20220309174242682\" /></p>\n<ol start=\"3\">\n<li>\n<p>创建一个 animation，接下来就可以制作动画了</p>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220309174335840.png\" alt=\"image-20220309174335840\" /></p>\n</li>\n<li>\n<p>创建动画并添加图片</p>\n</li>\n</ol>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220309174522374.png\" alt=\"image-20220309174522374\" /></p>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220309174531911.png\" alt=\"image-20220309174531911\" /></p>\n<p>动画制作完成了✔️</p>\n",
            "tags": []
        },
        {
            "id": "https://isviolet.github.io/p/214e2b2.html",
            "url": "https://isviolet.github.io/p/214e2b2.html",
            "title": "EX 古代马具的谣传&卡奥玛卡神庙",
            "date_published": "2022-03-07T12:30:08.552Z",
            "content_html": "<blockquote>\n<p>古代马具是 DLC 中的追加物品，给马装上后，人离马不论多远，马都可以被传唤过来，很方便</p>\n</blockquote>\n<h1 id=\"任务详情\"><a class=\"anchor\" href=\"#任务详情\">#</a> 任务详情</h1>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220307203150754.png\" alt=\"image-20220307203150754\" /></p>\n<h2 id=\"传送\"><a class=\"anchor\" href=\"#传送\">#</a> 传送</h2>\n<p>来到目的地发现有一个神庙，算是意外之喜</p>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220307203217699.png\" alt=\"image-20220307203217699\" /></p>\n<p>顺手做了个神庙挑战，这个神庙的解密不算难，利用炸弹炸掉石头后铁门就松落了，这样可以用磁力拖动铁门来搭桥梁了。</p>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220307204030355.png\" alt=\"image-20220307204030355\" /></p>\n<h2 id=\"桌子上的书\"><a class=\"anchor\" href=\"#桌子上的书\">#</a> 桌子上的书</h2>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220307204351945.png\" alt=\"image-20220307204351945\" /></p>\n<p>这本书就是任务的引导，阅读后可以知道宝藏藏在哪里了。</p>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220307204531777.png\" alt=\"image-20220307204531777\" /></p>\n<h2 id=\"寻宝\"><a class=\"anchor\" href=\"#寻宝\">#</a> 寻宝</h2>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220307204704322.png\" alt=\"image-20220307204704322\" /></p>\n<p>红色标注了古代马鞍的位置，接下来我们骑马出发，冲。</p>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220307204710018.png\" alt=\"image-20220307204710018\" /></p>\n<p>来到这里后，在小河边宝箱就藏在里面。</p>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220307204908130.png\" alt=\"image-20220307204908130\" /></p>\n<p>古代缰绳在一颗樱花树下埋着，找的攻略，就懒得截图了。</p>\n<h1 id=\"套装\"><a class=\"anchor\" href=\"#套装\">#</a> 套装</h1>\n<p>突然来了兴致，去找了这些套装藏在哪里，一个套装分三个宝箱，找了还挺久的，不过惊喜的是，遇到了血月。</p>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220307215138863.png\" alt=\"image-20220307215138863\" /></p>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220307222139605.png\" alt=\"image-20220307222139605\" /></p>\n",
            "tags": []
        },
        {
            "id": "https://isviolet.github.io/p/706a3d03.html",
            "url": "https://isviolet.github.io/p/706a3d03.html",
            "title": "征服阿卡莱之塔",
            "date_published": "2022-03-07T11:43:45.184Z",
            "content_html": "<blockquote>\n<p>今天的目标是跑到传送塔上，解锁传送点，更重要的是想要解锁地图全貌。这座塔之前上去过一次，由于塔底附着了很多污染物，触碰就会扣血，没办法爬上去。不过幸好污染程度不是很高，我为此也去学会了力巴尔的浮空术，能够平地升起一道上升气流，帮助我达到一定的高度。</p>\n</blockquote>\n<h1 id=\"地图确认\"><a class=\"anchor\" href=\"#地图确认\">#</a> 地图确认</h1>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220307194903896.png\" alt=\"image-20220307194903896\" /></p>\n<p>只要能到达塔顶就可以用希卡之石解锁地图了。</p>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220307195109354.png\" alt=\"image-20220307195109354\" /></p>\n<h1 id=\"潜伏之路\"><a class=\"anchor\" href=\"#潜伏之路\">#</a> 潜伏之路</h1>\n<h2 id=\"出发前的装备\"><a class=\"anchor\" href=\"#出发前的装备\">#</a> 出发前的装备</h2>\n<p>这件装备可能有些诡异，但是这个面具非常有用，野怪不会把你当成敌人，不会主动发起进攻👌</p>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220307195254306.png\" alt=\"image-20220307195254306\" /></p>\n<h2 id=\"威胁\"><a class=\"anchor\" href=\"#威胁\">#</a> 威胁</h2>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220307195539159.png\" alt=\"image-20220307195539159\" /></p>\n<p>来到塔底，看到这个家伙，这是比较难的一个敌人了，由于我也不会盾反，单纯一个萌新，只能想办法潜伏过去不被发现了。</p>\n<hr />\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220307200018591.png\" alt=\"image-20220307200018591\" /></p>\n<p>想着爬墙走近路，但这是不是有点吓人了 (。_。)</p>\n<h2 id=\"登上山顶\"><a class=\"anchor\" href=\"#登上山顶\">#</a> 登上山顶</h2>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220307200301568.png\" alt=\"image-20220307200301568\" /></p>\n<p>终于上来了，潜伏成功，不过这景象有些。。。但我们就是要迎难而上，先把地图解锁了再说。</p>\n<hr />\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220307200733561.png\" alt=\"image-20220307200733561\" /></p>\n<p>我就做了几个菜，咋又下起雨来了：(</p>\n<p>下雨天地面比较滑，就很难上去。</p>\n<hr />\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220307200953076.png\" alt=\"image-20220307200953076\" /></p>\n<p>好嘞，找到了一个不错的起飞点，这个地方起飞，应该就能飞到塔上，然后爬上去了。</p>\n<hr />\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220307201116973.png\" alt=\"image-20220307201116973\" /></p>\n<p>力巴尔，赐予我力量吧（bushi）</p>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220307201233322.png\" alt=\"image-20220307201233322\" /></p>\n<p>这就是力巴尔吗</p>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220307201326260.png\" alt=\"image-20220307201326260\" /></p>\n<p>好了，继续往上爬</p>\n<hr />\n<h2 id=\"解锁希卡塔\"><a class=\"anchor\" href=\"#解锁希卡塔\">#</a> 解锁希卡塔</h2>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220307201406582.png\" alt=\"image-20220307201406582\" /></p>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220307201437566.png\" alt=\"image-20220307201437566\" /></p>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220307201505314.png\" alt=\"image-20220307201505314\" /></p>\n<p>泪目了，终于完成了，由于塔顶太冷了，会扣血，赶紧会驿站休息了。</p>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220307201711395.png\" alt=\"image-20220307201711395\" /></p>\n<h1 id=\"最后一个地区\"><a class=\"anchor\" href=\"#最后一个地区\">#</a> 最后一个地区</h1>\n<p>现在还剩下最后的一个区域，看哪天心血来潮了再去把它解锁了吧</p>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220307201821054.png\" alt=\"image-20220307201821054\" /></p>\n",
            "tags": []
        },
        {
            "id": "https://isviolet.github.io/p/b82795a3.html",
            "url": "https://isviolet.github.io/p/b82795a3.html",
            "title": "SysDVR串流",
            "date_published": "2022-03-07T10:53:47.551Z",
            "content_html": "<blockquote>\n<p>今天本来想串流 NS 画面到电脑上玩会游戏的，结果出现了一个未知问题，启动程序不显示游戏画面，变成了白屏（之前一直好好的），于是想着写下步骤，以防万一下次还是出错。</p>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220307185925656.png\" alt=\"image-20220307185925656\" /></p>\n</blockquote>\n<h1 id=\"文件准备\"><a class=\"anchor\" href=\"#文件准备\">#</a> 文件准备</h1>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220307190206343.png\" alt=\"image-20220307190206343\" /></p>\n<p>第一第二文件资源可以在 github 上下载到，第三第四可以自行百度查找最新版。</p>\n<h1 id=\"详细步骤\"><a class=\"anchor\" href=\"#详细步骤\">#</a> 详细步骤</h1>\n<ol>\n<li>复制 SysDVR 文件内的所有文件夹到 NS 的存储根目录（遇到同文件夹合并覆盖即可）</li>\n<li>然后重启 NS，打开相册内的 SysDVR，有三种模式，选择最下面的 USB 连接，保存。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3huLS00OXNxNjZoLk5ldA==\">安装.Net</span><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220307190535120.png\" alt=\"image-20220307190535120\" /></li>\n<li>打开 Zadig，安装如下驱动<img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220307192303282.png\" alt=\"image-20220307192303282\" /></li>\n<li>有两个驱动，一个视频，一个音频，都要安装驱动</li>\n<li>之后在 NS 上保存并退出 SysDVR，如果退出听到电脑连接断开的声音，就重新该步骤</li>\n<li>启动 clientUI 程序，设置如下 lunch 即可<img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/image-20220307192653147.png\" alt=\"image-20220307192653147\" /></li>\n<li>接下来在 NS 上启动游戏，即可看到游戏画面了</li>\n</ol>\n<p>' 如果遇到白屏的问题，可以去看下是不是驱动装错了，我检查后发现自己就是驱动出错了，前几天还好好的，不知道为什么驱动给我换了'</p>\n",
            "tags": []
        },
        {
            "id": "https://isviolet.github.io/p/9eeb6c91.html",
            "url": "https://isviolet.github.io/p/9eeb6c91.html",
            "title": "Java基础学习笔记二 Java基础语法之变量、数据类型",
            "date_published": "2022-03-05T13:47:34.291Z",
            "content_html": "<h2 id=\"注释\"><a class=\"anchor\" href=\"#注释\">#</a> 注释</h2>\n<p>注释用来解释和说明程序的文字，注释是不会被执行的.</p>\n<p>单行注释</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 这是一条单行注释 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>多行注释</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 这是</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 一段注释，</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>* 它跨越了多个行</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>文档注释</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/** The first Thinking in Java example program.</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* Lists system information on current machine.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>* @author Bruce Eckel</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>* @author http://www.BruceEckel.com</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>* @version 1.0</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Property</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/** Sole entry point to class &amp; application</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>* @param args array of string arguments</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>* @return No return value</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>* @exception exceptions No exceptions thrown</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">Properties</span> p <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--- Memory Usage:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token class-name\">Runtime</span> rt <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Total Memory = \"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token operator\">+</span> rt<span class=\"token punctuation\">.</span><span class=\"token function\">totalMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token operator\">+</span> <span class=\"token string\">\" Free Memory = \"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token operator\">+</span> rt<span class=\"token punctuation\">.</span><span class=\"token function\">freeMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对于单行和多行注释，被注释的文字，不会被 JVM 解释执行；对于文档注释，可以被 JDK 提供的工具 javadoc 所解析，生成一套以网页文件形式体现的该程序的说明文档；单行注释可以嵌套使用，多行注释不能嵌套使用。</p>\n<h2 id=\"关键字\"><a class=\"anchor\" href=\"#关键字\">#</a> <strong>关键字</strong></h2>\n<p>是被 Java 语言赋予特殊含义，具有专门用途的单词，比如 class，int，double 均为 Java 已经预设好的；</p>\n<p>组成关键字的字母全部小写，注意 String 不是关键字；</p>\n<p>goto 与 const 是 Java 中的保留字，即没有赋予特殊含义却仍被 Java 占用的单词；</p>\n<h2 id=\"标识符\"><a class=\"anchor\" href=\"#标识符\">#</a> <strong>标识符</strong></h2>\n<p>就是给类，接口，方法，变量等起名字时使用的字符序列，组成规则只能包含下面的内容，不能有其它内容:</p>\n<ul>\n<li>英文大小写字母</li>\n<li>数字字符</li>\n<li>$ 和_</li>\n</ul>\n<h3 id=\"注意事项\"><a class=\"anchor\" href=\"#注意事项\">#</a> 注意事项</h3>\n<ul>\n<li>数字不能开头</li>\n<li>不可以使用关键字</li>\n<li>严格区分大小写，不限制长度</li>\n<li>起名时，尽量见名知意</li>\n</ul>\n<h3 id=\"标识符中常见的命名规则\"><a class=\"anchor\" href=\"#标识符中常见的命名规则\">#</a> 标识符中常见的命名规则</h3>\n<ul>\n<li>包名：多单词组成时所有字母均小写，使用。连接。比如：aaa.bbb.ccc</li>\n<li>类名 &amp; 接口名：大驼峰式。比如：AaaBbbCcc</li>\n<li>变量名 &amp; 方法名：小驼峰式。比如：aaaBbbCcc</li>\n<li>常量名：多单词组成是所有字母均大写，使用_连接。比如：AAA_BBB_CCC</li>\n</ul>\n<h2 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h2>\n<p>为什么有数据类型？</p>\n<p>Java 是强类型语言，对于每一种数据都定义了明确的具体数据类型，变量必须要有明确的类型，什么类型的变量装载什么类型的数据。</p>\n<h3 id=\"数据类型的分类\"><a class=\"anchor\" href=\"#数据类型的分类\">#</a> 数据类型的分类</h3>\n<p>基本数据类型</p>\n<p>基本数据类型是 Java 语言中内置的类型，分别是整数类型、小数类型、字符类型、布尔类型。</p>\n<p>这四类基本类型是最简单、最基础的类型。</p>\n<ul>\n<li>整数（byte、short、int、long），默认的整数类型是 int 类型，long 类型需添加 &quot;L&quot; 后缀。</li>\n<li>小数（float、double）、字符类型 (char)，默认的浮点类型是 double 类型。在 Java 中所有没有后缀以及使用 “D” 后缀（小写也可以，但建议使用大写）的小数都是 double 类型；float 类型常量必须添加 “F” 后缀</li>\n<li>字符类型（char）</li>\n<li>布尔类型（boolean）</li>\n</ul>\n<p>引用数据类型</p>\n<p>引用数据类型是强大的数据类型，它是基于基本数据类型创建的。JavaSE 中提供了一个超级类库，类库中包含了近万种引用数据类型。比如：数组、类、接口。</p>\n<h2 id=\"常量\"><a class=\"anchor\" href=\"#常量\">#</a> <strong>常量</strong></h2>\n<p>常量就是不变的数据量，在程序执行的过程中其值不可以发生改变</p>\n<h3 id=\"常量分类\"><a class=\"anchor\" href=\"#常量分类\">#</a> 常量分类</h3>\n<p>整数类型</p>\n<ul>\n<li>十进制表示方式：正常数字，如 13、25 等</li>\n<li>二进制表示方式：以 0b (0B) 开头，如 0b1011 、0B1001</li>\n<li>十六进制表示方式：以 0x (0X) 开头，数字以 0-9 及 A-F 组成  如 0x23A2、0xa、0x10</li>\n<li>八进制表示方式：以 0 开头，如 01、07、0721</li>\n</ul>\n<p>小数类型，如 1.0、-3.15、3.168 等</p>\n<p>布尔类型， true、false</p>\n<p>字符类型，字符必须使用’’ 包裹，并且其中只能且仅能包含一个字符。如 'a'，'A', '0', ' 家'</p>\n<p>字符串类型，一种引用类型，字符串必须使用 &quot;&quot;包裹，其中可以包含 0~N 个字符。如&quot; 我爱 Java&quot;，&quot;0123&quot;，&quot;&quot;，&quot;null&quot;</p>\n<h3 id=\"在程序中输出java中的常量\"><a class=\"anchor\" href=\"#在程序中输出java中的常量\">#</a> <strong>在程序中输出 Java 中的常量</strong></h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 输出整数 十进制</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//50</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 输出整数，二进制，数字开头 0B</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">0B11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//3</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 输出整数，八进制，数字开头 0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">051</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//41</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 输出整数，十六进制，数组开头 0X  0-9 A-F</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">0XE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//14</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 输出浮点数据</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">5.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//5.0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 输出布尔数据，只有 2 个值，true，false 关键字</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 输出字符常量，单引号包裹，只能写 1 个字符</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//a</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 输出字符串常量，双引号包裹，可以写 0-n 个字符</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//HelloWorld</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"变量\"><a class=\"anchor\" href=\"#变量\">#</a> <strong>变量</strong></h2>\n<h3 id=\"什么是变量\"><a class=\"anchor\" href=\"#什么是变量\">#</a> <strong>什么是变量？</strong></h3>\n<p>变量是一个内存中的小盒子（小容器），容器是什么？生活中也有很多容器，例如水杯是容器，用来装载水；你家里的大衣柜是容器，用来装载衣裤；饭盒是容器，用来装载饭菜。</p>\n<p>那么变量是装载什么的呢？答案是数据！结论：变量是内存中装载数据的小盒子，你只能用它来存数据和取数据。</p>\n<h3 id=\"定义变量\"><a class=\"anchor\" href=\"#定义变量\">#</a> 定义变量</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>数据类型  变量名  <span class=\"token operator\">=</span>  数据值；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span>         a    <span class=\"token operator\">=</span>  <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"变量使用的注意事项\"><a class=\"anchor\" href=\"#变量使用的注意事项\">#</a> <strong>变量使用的注意事项</strong></h3>\n<p>变量定义后可以不赋值，使用时再赋值。不赋值不能使用。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 为 x 赋值 20</span></pre></td></tr></table></figure><p>变量使用时有作用域的限制。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 读取 x 变量中的值，再打印</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 读取 y 变量中的值失败，失败原因，找不到 y 变量，因为超出了 y 变量作用范围，所以不能使用 y 变量</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>变量不可以重复定义。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5.5</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 编译失败，变量重复定义</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"数据类型转换\"><a class=\"anchor\" href=\"#数据类型转换\">#</a> 数据类型转换</h2>\n<p>不同类型的变量可以在一起运算，但要先进行类型转换再运算。</p>\n<ul>\n<li>范围小的数据类型值（如 byte），可以直接转换为范围大的数据类型值（如 int）；</li>\n<li>范围大的数据类型值（如 int），不可以直接转换为范围小的数据类型值（如 byte）</li>\n</ul>\n<p>数据范围从小到大依次列出：byte -&gt; short -&gt; int -&gt; long -&gt; float -&gt; double</p>\n<p>两种方式的数据类型转换</p>\n<p>自动类型转换：表示范围小的数据类型转换成范围大的数据类型。格式：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>范围大的数据类型 变量 <span class=\"token operator\">=</span> 范围小的数据类型值；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>比如：<span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>强制类型转换：表示范围大的数据类型转换成范围小的数据类型</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>范围小的数据类型  变量 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>范围小的数据类型<span class=\"token punctuation\">)</span> 范围大的数据类型值<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>比如：<span class=\"token keyword\">int</span>  i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token number\">6.718</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//i 的值为 6</span></pre></td></tr></table></figure><h2 id=\"运算符\"><a class=\"anchor\" href=\"#运算符\">#</a> 运算符</h2>\n<h3 id=\"算数运算符\"><a class=\"anchor\" href=\"#算数运算符\">#</a> 算数运算符</h3>\n<p>加号（ +）、减号和负号（ -）、乘号（ *）、除号（ /）、取模（%）、自增（++）、自减（--）以及等号（ =）的用法与其他所有编程语言都是类似的 。</p>\n<p>++,-- 运算符后置时，先使用变量 a 原有值参与运算操作，运算操作完成后，变量 a 的值自增 1 或者自减 1。</p>\n<p>l ++，-- 运算符前置时，先将变量 a 的值自增 1 或者自减 1，然后使用更新后的新值参与运算操作。</p>\n<h3 id=\"赋值运算符\"><a class=\"anchor\" href=\"#赋值运算符\">#</a> 赋值运算符</h3>\n<p>赋值（=）、加后赋值（+=）、减后赋值（-=）、乘后赋值（*=）、整除后赋值（/=）取模后赋值（%=）的用法与其他所有编程语言都是类似的 。</p>\n<h3 id=\"关系运算符\"><a class=\"anchor\" href=\"#关系运算符\">#</a> 关系运算符</h3>\n<p>等于（==）  不等于（!=） 小于（&lt;） 大于（&gt;）  小于等于（&lt;=） 大于等于（&gt;=）的用法与其他所有编程语言都是类似的 。</p>\n<h3 id=\"逻辑运算符\"><a class=\"anchor\" href=\"#逻辑运算符\">#</a> <strong>逻辑运算符</strong></h3>\n<p>与（&amp;&amp;）、或（||）、非（!）的用法与其他所有编程语言都是类似的 。</p>\n<p>短路：当使用与或者或时，只要能判断出结果则后边的部分就不再判断。</p>\n<h3 id=\"三元运算符\"><a class=\"anchor\" href=\"#三元运算符\">#</a> <strong>三元运算符</strong></h3>\n<p>(条件表达式)？表达式 1：表达式 2；</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token operator\">></span><span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">4</span><span class=\"token operator\">></span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">100</span> <span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 逻辑运算后的结果为 false，运算结果为表达式 2 的值 200, 然后将结果 200 赋值给了变量 n</span></pre></td></tr></table></figure><h2 id=\"商场库存清单案例\"><a class=\"anchor\" href=\"#商场库存清单案例\">#</a> 商场库存清单案例</h2>\n<p>案例输出结果如下：</p>\n<p><img data-src=\"https://images2015.cnblogs.com/blog/612774/201707/612774-20170702005415883-632304767.png\" alt=\"img\" /></p>\n<h3 id=\"案例需求分析\"><a class=\"anchor\" href=\"#案例需求分析\">#</a> <strong>案例需求分析</strong></h3>\n<p>观察清单后，可将清单分解为三个部分（清单顶部、清单中部、清单底部）</p>\n<p>清单顶部为固定的数据，直接打印即可<br />\n清单中部为商品，为变化的数据，需要记录商品信息后，打印，经过观察，我们确定一项商品应该有如下几个属性：</p>\n<ul>\n<li>品牌型号：即商品名称，String 型</li>\n<li>尺寸：物品大小，double 型</li>\n<li>价格：物品单价，double 型</li>\n<li>配置：这一项为每种商品的配置信息，String 型</li>\n<li>库存数：这一项为每种商品的库存个数，int 型</li>\n</ul>\n<p>清单底部包含了统计操作，需经过计算后，打印，我们发现两个单独的可变化量：</p>\n<ul>\n<li>总库存数：所有商品总个数，int 型</li>\n<li>库存商品总金额：所有商品金额，double 型</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 苹果笔记本电脑</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">String</span> macBrand <span class=\"token operator\">=</span> <span class=\"token string\">\"MacBookAir\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">double</span> macSize <span class=\"token operator\">=</span> <span class=\"token number\">13.3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">double</span> macPrice <span class=\"token operator\">=</span> <span class=\"token number\">6988.88</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> macCount <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 联想 Thinkpad 笔记本电脑</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">String</span> thinkpadBrand <span class=\"token operator\">=</span> <span class=\"token string\">\"ThinkpadT450\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">double</span> thinkpadSize <span class=\"token operator\">=</span> <span class=\"token number\">14.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">double</span> thinkpadPrice <span class=\"token operator\">=</span> <span class=\"token number\">5999.99</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> thinkpadCount <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 华硕 ASUS 笔记本电脑</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">String</span> <span class=\"token class-name\">ASUSBrand</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ASUS-FL5800\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">double</span> <span class=\"token class-name\">ASUSSize</span> <span class=\"token operator\">=</span> <span class=\"token number\">15.6</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">double</span> <span class=\"token class-name\">ASUSPrice</span> <span class=\"token operator\">=</span> <span class=\"token number\">4999.50</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token class-name\">ASUSCount</span> <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 统计所有库存商品数量与金额</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 统计库存总个数、库存总金额</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">int</span> totalCount <span class=\"token operator\">=</span> macCount <span class=\"token operator\">+</span> thinkpadCount <span class=\"token operator\">+</span> <span class=\"token class-name\">ASUSCount</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">double</span> totalMoney <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>macCount <span class=\"token operator\">*</span> macPrice<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>thinkpadCount <span class=\"token operator\">*</span> thinkpadPrice<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ASUSCount</span> <span class=\"token operator\">*</span> <span class=\"token class-name\">ASUSPrice</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 打印库存清单顶部信息</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------------------------商城库存清单-----------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"品牌型号    尺寸    价格    库存数\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 打印库存清单中部信息</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>macBrand <span class=\"token operator\">+</span> <span class=\"token string\">\"    \"</span> <span class=\"token operator\">+</span> macSize <span class=\"token operator\">+</span> <span class=\"token string\">\"    \"</span> <span class=\"token operator\">+</span> macPrice <span class=\"token operator\">+</span> <span class=\"token string\">\"    \"</span> <span class=\"token operator\">+</span> macCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>thinkpadBrand <span class=\"token operator\">+</span> <span class=\"token string\">\"    \"</span> <span class=\"token operator\">+</span> thinkpadSize <span class=\"token operator\">+</span> <span class=\"token string\">\"    \"</span> <span class=\"token operator\">+</span> thinkpadPrice <span class=\"token operator\">+</span> <span class=\"token string\">\"    \"</span> <span class=\"token operator\">+</span> thinkpadCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ASUSBrand</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"    \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">ASUSSize</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"    \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">ASUSPrice</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"    \"</span><span class=\"token operator\">+</span><span class=\"token class-name\">ASUSCount</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 打印库存清单底部信息</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----------------------------------------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"总库存数：\"</span> <span class=\"token operator\">+</span> totalCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"库存商品总金额：\"</span> <span class=\"token operator\">+</span> totalMoney<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://isviolet.github.io/p/63ac44f1.html",
            "url": "https://isviolet.github.io/p/63ac44f1.html",
            "title": "Java基础学习笔记一 Java介绍",
            "date_published": "2022-03-05T12:35:18.111Z",
            "content_html": "<h2 id=\"java语言概述\"><a class=\"anchor\" href=\"#java语言概述\">#</a> java 语言概述</h2>\n<p>Java 是 sun 公司开发的一门编程语言，目前被 Oracle 公司收购，编程语言就是用来编写软件的。</p>\n<h3 id=\"java的应用\"><a class=\"anchor\" href=\"#java的应用\">#</a> Java 的应用</h3>\n<ul>\n<li>开发 QQ、迅雷程序 (桌面应用软件)</li>\n<li>淘宝、京东 (互联网应用软件)</li>\n<li>安卓应用程序</li>\n</ul>\n<h3 id=\"java的擅长\"><a class=\"anchor\" href=\"#java的擅长\">#</a> Java 的擅长</h3>\n<ul>\n<li>互联网：电商、P2P 等等</li>\n<li>企业级应用：ERP、CRM、BOS、OA 等等</li>\n</ul>\n<h3 id=\"java语言平台\"><a class=\"anchor\" href=\"#java语言平台\">#</a> Java 语言平台</h3>\n<ul>\n<li>JavaSE（标准版）部分，JavaSE 并不能开发大型项目。</li>\n<li>JavaEE（企业版）部分，学习完 JavaEE 部分就可以开发各种大型项目了。</li>\n</ul>\n<h2 id=\"java语言开发环境\"><a class=\"anchor\" href=\"#java语言开发环境\">#</a> java 语言开发环境</h2>\n<p>JDK 是 Java 开发环境，官网 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5vcmFjbGUuY29tL2NuL2luZGV4Lmh0bWw=\">http://www.oracle.com/cn/index.html</span></p>\n<h3 id=\"jdk的安装\"><a class=\"anchor\" href=\"#jdk的安装\">#</a> JDK 的安装</h3>\n<p>傻瓜式安装，双击安装程序，然后一路 next 即可，安装的推荐方式：</p>\n<ul>\n<li>安装路径不要有中文或者特殊符号如空格等。</li>\n<li>所有和开发相关的软件最好安装目录统一。</li>\n<li>当提示安装 JRE 时，可以选择不安装。建议还是安装上。</li>\n</ul>\n<p>验证安装是否成功，通过 DOS 命令，切换到 JDK 安装的 bin 目录下。比如  <code>D:\\develop\\Java\\jdk1.7.0_72\\bin</code> ，然后分别输入 javac 和 java，如果正常显示一些内容，说明安装成功。</p>\n<h3 id=\"配置环境变量\"><a class=\"anchor\" href=\"#配置环境变量\">#</a> 配置环境变量</h3>\n<p>环境变量的作用：由于 javac 和 java 命令只能在固定的目录下才能执行，而我们写的代码如果都和 javac 及 java 命令放在相同的目录中的话，会显得很乱”，为了让 Java 的 bin 目录下的 javac 命令可以在任意目录下执行，就得配置环境变量。</p>\n<p>具体安装参考：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jbmJsb2dzLmNvbS9CZWxpZWZsZWUvcC80Nzc4MzE1Lmh0bWw=\">JAVA 开发环境的搭建（配置 JAVA 开发环境）</span></p>\n<p><strong>JDK 和 JRE 以及跨平台</strong></p>\n<p>JDK 与 JRE 的关系</p>\n<ul>\n<li>JDK：Java Development Kit ，Java 语言的开发工具包，提供了 Java 语言的开发工具，它里面包含了 JRE，同时也就包含了 JVM（Java 虚拟机）。</li>\n<li>JRE：Java Runtime Environment，它是 Java 运行环境，如果你不需要开发只需要运行 Java 程序，那么你可以安装 JRE。例如程序员开发出的程序最终卖给了用户，用户不用开发，只需要运行程序，所以用户在电脑上安装 JRE 即可。它包含了 Java 虚拟机，也就是 JVM，同时还包含了 Java 语言运行需要的核心类库。</li>\n</ul>\n<p>跨平台特性：平台指的是操作系统 （Windows，Linux，Mac）。只需在相应的平台上安装 Java 虚拟机，就可以运行 Java 程序。</p>\n<h2 id=\"使用intellij-idea打印hello-world\"><a class=\"anchor\" href=\"#使用intellij-idea打印hello-world\">#</a> 使用 IntelliJ IDEA 打印 Hello World</h2>\n<h3 id=\"第一步创建新项目\"><a class=\"anchor\" href=\"#第一步创建新项目\">#</a> 第一步：创建新项目</h3>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/612774-20170701211232211-2109811476.png\" alt=\"img\" /></p>\n<h3 id=\"第二步选择jdk然后next\"><a class=\"anchor\" href=\"#第二步选择jdk然后next\">#</a> 第二步：选择 jdk，然后 next</h3>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/612774-20170701211457883-150724723.png\" alt=\"img\" /></p>\n<h3 id=\"第三步选择hello-world模板然后next\"><a class=\"anchor\" href=\"#第三步选择hello-world模板然后next\">#</a> 第三步：选择 Hello World 模板，然后 Next</h3>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/612774-20170701211626743-101552981.png\" alt=\"img\" /></p>\n<h3 id=\"第四步输入项目名称然后finish\"><a class=\"anchor\" href=\"#第四步输入项目名称然后finish\">#</a> 第四步：输入项目名称，然后 Finish</h3>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/612774-20170701211759305-689114650.png\" alt=\"img\" /></p>\n<h3 id=\"第五步运行\"><a class=\"anchor\" href=\"#第五步运行\">#</a> 第五步：运行</h3>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/612774-20170701211901883-623625448.png\" alt=\"img\" /></p>\n<h3 id=\"第六步查看结果\"><a class=\"anchor\" href=\"#第六步查看结果\">#</a> 第六步：查看结果</h3>\n<p><img data-src=\"https://guli77.oss-cn-beijing.aliyuncs.com/blog_img/612774-20170701211940899-68699482.png\" alt=\"img\" /></p>\n<h2 id=\"java代码的编写执行过程\"><a class=\"anchor\" href=\"#java代码的编写执行过程\">#</a> Java 代码的编写执行过程</h2>\n<p>源文件：编写 Java 源文件（我们也称之为源代码文件），它的扩展名为.java；</p>\n<p>编译：然后通过编译器把源文件编译成字节码文件，字节码文件扩展名为.class；</p>\n<p>运行：最后使用解释器来运行字节码文件。</p>\n<h2 id=\"centos7下java8安装\"><a class=\"anchor\" href=\"#centos7下java8安装\">#</a> CentOS7 下 Java8 安装</h2>\n<ol>\n<li>\n<p>到 https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html 找到 jdk-8u221-linux-x64.tar.gz 的下载地址，需要登录。</p>\n</li>\n<li>\n<p>打开终端，使用 wget 命令下载。比如：wget <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb3dubG9hZC5vcmFjbGUuY29tL290bi9qYXZhL2pkay84dTIyMS1iMTEvMjMwZGViMThkYjNlNDAxNGJiOGUzZTgzMjRmODFiNDMvamRrLTh1MjIxLWxpbnV4LXg2NC50YXIuZ3o/QXV0aFBhcmFtPTE1Njk2NDE1MzBfMDVjNjk5YTAwYWMyYWZlMGMwZGRlN2NjNTc4NGU0ZDU=\">https://download.oracle.com/otn/java/jdk/8u221-b11/230deb18db3e4014bb8e3e8324f81b43/jdk-8u221-linux-x64.tar.gz?AuthParam=1569641530_05c699a00ac2afe0c0dde7cc5784e4d5</span></p>\n</li>\n<li>\n<p>解压，tar -xzvf jdk-8u221-linux-x64.tar.gz?AuthParam=1569641530_05c699a00ac2afe0c0dde7cc5784e4d5</p>\n</li>\n<li>\n<p>移动到 /usr/local 目录下，mv jdk-8u221-linux-x64.tar.gz?AuthParam=1569641530_05c699a00ac2afe0c0dde7cc5784e4d5 /opt/usr</p>\n</li>\n<li>\n<p>切换到 opt 目录下，cd /opt/usr</p>\n</li>\n<li>\n<p>改名为 java8，mv jdk-8u221-linux-x64.tar.gz?AuthParam=1569641530_05c699a00ac2afe0c0dde7cc5784e4d5 java8</p>\n</li>\n<li>\n<p>配置环境变量，vi /etc/profile, 在文件后面追加以下代码：</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">JAVA_HOME</span><span class=\"token operator\">=</span>/usr/local/java8</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">JRE_HOME</span><span class=\"token operator\">=</span>/usr/local/java8/jre</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$JAVA_HOME</span>/bin:<span class=\"token variable\">$JRE_HOME</span>/bin</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">CLASSPATH</span><span class=\"token operator\">=</span>.:<span class=\"token variable\">$JAVA_HOME</span>/lib/dt.jar:<span class=\"token variable\">$JAVA_HOME</span>/lib/tools.jar:<span class=\"token variable\">$JRE_HOME</span>/lib</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">export</span> JAVA_HOME JRE_HOME <span class=\"token environment constant\">PATH</span> CLASSPATH</pre></td></tr></table></figure><ol start=\"8\">\n<li>执行 source /etc/profile 命令使配置生效，到这一步就算安装完成了，使用 java -version 查看安装是否成功。</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://isviolet.github.io/p/cd488b3f.html",
            "url": "https://isviolet.github.io/p/cd488b3f.html",
            "title": "日替 炽热溶洞",
            "date_published": "2022-02-28T04:50:28.258Z",
            "content_html": "<h1 id=\"关卡预览\"><a class=\"anchor\" href=\"#关卡预览\">#</a> 关卡预览</h1>\n<h2 id=\"地图\"><a class=\"anchor\" href=\"#地图\">#</a> 地图</h2>\n<p><img data-src=\"https://s2.loli.net/2022/02/28/DeZ8Jm2iOrHT5jt.png\" alt=\"image-20220228125549760\" /></p>\n<h2 id=\"敌人情报\"><a class=\"anchor\" href=\"#敌人情报\">#</a> 敌人情报</h2>\n<p><img data-src=\"https://s2.loli.net/2022/02/28/5KIEA97RugXmPd6.png\" alt=\"image-20220228125628093\" /></p>\n<h2 id=\"tag\"><a class=\"anchor\" href=\"#tag\">#</a> TAG</h2>\n<p><img data-src=\"https://s2.loli.net/2022/02/28/YPO2teWmG7sy3wB.png\" alt=\"image-20220228125733889\" /></p>\n<h1 id=\"作战\"><a class=\"anchor\" href=\"#作战\">#</a> 作战</h1>\n<h2 id=\"选取tag\"><a class=\"anchor\" href=\"#选取tag\">#</a> 选取 tag</h2>\n<p><img data-src=\"https://s2.loli.net/2022/02/28/YFbJivlVrUKAoxT.png\" alt=\"image-20220228125834862\" /></p>\n<h2 id=\"阵容\"><a class=\"anchor\" href=\"#阵容\">#</a> 阵容</h2>\n<p><img data-src=\"https://s2.loli.net/2022/02/28/U97vDsW8JZCXLkr.png\" alt=\"image-20220228125904048\" /></p>\n<h2 id=\"注意\"><a class=\"anchor\" href=\"#注意\">#</a> 注意</h2>\n<ol>\n<li>boss 的法术攻击很高，同时伴随持续烧伤，对奶量需求较大</li>\n<li>幽灵组长血量较高，且不可被阻挡，最好不要点幽灵的 tag，不然难度会提升很大😥</li>\n</ol>\n",
            "tags": [
                "危机合约",
                "明日方舟",
                "游戏"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/325d7261.html",
            "url": "https://isviolet.github.io/p/325d7261.html",
            "title": "1.如何进行场景建模",
            "date_published": "2022-02-27T12:40:43.304Z",
            "content_html": "<h1 id=\"前期工具准备\"><a class=\"anchor\" href=\"#前期工具准备\">#</a> 前期工具准备</h1>\n<h2 id=\"rhino-6\"><a class=\"anchor\" href=\"#rhino-6\">#</a> Rhino 6</h2>\n<p><img data-src=\"https://s2.loli.net/2022/02/28/8j9gpPLMaAwbkyd.png\" alt=\"image-20220227205404166\" /></p>\n<p>以上是下载链接了，需要用到的是其中的 grasshopper，之后会提到。</p>\n<h1 id=\"插件\"><a class=\"anchor\" href=\"#插件\">#</a> 插件</h1>\n<ul>\n<li>\n<p>插件 lunchbox（读取 excel、自动 bake、随机分组）</p>\n</li>\n<li>\n<p>插件 human（应用立方体贴图轴）</p>\n</li>\n<li>\n<p>插件 kangaroo2（删除重复直线、网格清理）</p>\n</li>\n<li>\n<p>插件 meshedit （炸开网格）</p>\n</li>\n<li>\n<p>插件 meshtool（网格管）</p>\n</li>\n</ul>\n<p>需要在 grasshopper 中安装以上的插件，否则可能效果不佳。</p>\n<h2 id=\"怎么安装插件\"><a class=\"anchor\" href=\"#怎么安装插件\">#</a> 怎么安装插件</h2>\n<ol>\n<li>打开犀牛，输入指令打开 grasshopper</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2022/02/28/eOBgT1XNHfA2RrD.png\" alt=\"image-20220227210125820\" /></p>\n<ol start=\"2\">\n<li>打开 file，选择 special folders 的 components folders</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2022/02/28/bmLJFf4TQi9Yt2j.png\" alt=\"image-20220227210253653\" /></p>\n<ol start=\"3\">\n<li>拖入插件</li>\n</ol>\n<p>打开文件夹后将插件拖到 grasshopper 中就🆗了</p>\n<h1 id=\"建模\"><a class=\"anchor\" href=\"#建模\">#</a> 建模</h1>\n<p>使用 grasshopper 编写样本，开启电池，在犀牛预览模型。</p>\n<p>样本 demo： <a href=\"1.assets/%E5%9C%B0%E5%9B%BE%E5%88%B6%E4%BD%9C%E5%99%A8.gh\">地图制作器.gh</a></p>\n<p><img data-src=\"https://s2.loli.net/2022/02/28/iW72Y9OoE5bceRm.png\" alt=\"image-20220227211823624\" /></p>\n<h2 id=\"注意\"><a class=\"anchor\" href=\"#注意\">#</a> 注意❗</h2>\n<p>同时需要一份 excel 文件，且在打开状态，格式如下</p>\n<p><img data-src=\"https://s2.loli.net/2022/02/28/PYW1aZGbpr9z5Ct.png\" alt=\"image-20220227212109017\" /></p>\n<h1 id=\"如何导出\"><a class=\"anchor\" href=\"#如何导出\">#</a> 如何导出</h1>\n<p>由于我需要在 unity3D 中使用，使用搜索引擎查找后只发现了.obj 和.fbx 两种格式可以导入 unity，也许两种格式已经完全够用了不是吗～</p>\n<p>尴尬的是，导出的文件应用在 unity 后，会出现材质纹理丢失的问题，具体原因未知😔</p>\n<ol>\n<li>fbx 文件为白模</li>\n<li>obj 文件部分材质丢失，尚且可用</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://isviolet.github.io/p/7bb40353.html",
            "url": "https://isviolet.github.io/p/7bb40353.html",
            "title": "找回账号密码了\\^o^/",
            "date_published": "2022-02-26T07:14:21.365Z",
            "content_html": "<p>距离上次发博客已经过了很久了，现在打算重新写些文章了，考虑记录下自己的学习过程，心得总结，还有些有趣的事。</p>\n",
            "tags": [
                "随文"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/8aff4f2e.html",
            "url": "https://isviolet.github.io/p/8aff4f2e.html",
            "title": "爬虫概念、工具和HTTP",
            "date_published": "2021-05-18T13:18:19.660Z",
            "content_html": "<ul>\n<li>什么是爬虫\n<ul>\n<li>爬虫就是模拟客户端 (浏览器) 发送网络请求，获取响应，按照规则提取数据的程序</li>\n<li>模拟客户端 (浏览器) 发送网络请求：照着浏览器发送一模一样的请求，获取和浏览器一模一样的数据</li>\n</ul>\n</li>\n<li>爬虫的数据去哪了\n<ul>\n<li>呈现出来：展示在网页上，或者是展示在 app 上</li>\n<li>进行分析：从数据中寻找一些规律</li>\n</ul>\n</li>\n<li>需要的软件和环境\n<ul>\n<li>python3\n<ul>\n<li>黑马 python 基础班 15 天视频: <span class=\"exturl\" data-url=\"aHR0cDovL3l1bi5pdGhlaW1hLmNvbS9jb3Vyc2UvMjE0Lmh0bWw=\">http://yun.itheima.com/course/214.html</span></li>\n<li>基础语法 (字符串，列表，字典，判断和循环)</li>\n<li>函数 (函数的创建和调用)</li>\n<li>面向对象 (如何创建一个类， 如何使用这个类)</li>\n</ul>\n</li>\n<li>pyCharm\n<ul>\n<li>python 编辑器</li>\n</ul>\n</li>\n<li>chrome 浏览器\n<ul>\n<li>分析网络请求用的</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>浏览器的请求\n<ul>\n<li>url\n<ul>\n<li>在 chrome 中点击检查，点到 network</li>\n<li>url= 请求的协议 + 网站的域名 + 资源的路径 + 参数</li>\n</ul>\n</li>\n<li>浏览器请求 url 地址\n<ul>\n<li>当前 url 对应的响应 + js+CSS + 图片 --&gt; elements 中的内容</li>\n</ul>\n</li>\n<li>爬虫请求 url 地址\n<ul>\n<li>当前 url 对应的响应</li>\n</ul>\n</li>\n<li>elements 的内容和爬虫获取到的 ur 地址的响应不同，爬虫中需要以当前 url 地址对应的响应为准提取数据</li>\n<li>当前 url 地址对应的响应在哪里\n<ul>\n<li>从 network 中找到当前的 ur 地址，点击 response</li>\n<li>在页面上右键显示网页源码</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "python",
                "爬虫"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/5944b1b6.html",
            "url": "https://isviolet.github.io/p/5944b1b6.html",
            "title": "连接MySQL的10060错误Can't connect to MySQL server on '...'(10060)",
            "date_published": "2021-05-18T13:14:44.222Z",
            "content_html": "<blockquote>\n<p>使用 MySQL 的图形界面管理工具 Navicat for MySQL 连接 Mysql 数据库时提示错误：Can't connect to MySQL server (10060)</p>\n</blockquote>\n<p><img data-src=\"https://i.loli.net/2021/05/18/FD7pJtGs5BAPrCe.png\" alt=\"file\" /></p>\n<h2 id=\"出现该问题可能的原因\"><a class=\"anchor\" href=\"#出现该问题可能的原因\">#</a> 【出现该问题可能的原因：】</h2>\n<ol>\n<li>网络不通；</li>\n<li>服务未启动；</li>\n<li>防火墙未关闭；</li>\n<li>服务器上防火墙端口未开放；</li>\n<li>端口未被监听；</li>\n<li>权限不足。</li>\n</ol>\n<h2 id=\"解决办法\"><a class=\"anchor\" href=\"#解决办法\">#</a> 【解决办法：】</h2>\n<ol>\n<li>\n<p>自行百度配置网络</p>\n</li>\n<li>\n<p>启动服务</p>\n<pre><code>#在安装目录下\n[root@VM_0_5_centos sbin]# pwd\n/software/mysql-5.5.32/sbin\n[root@VM_0_5_centos sbin]# ./mysqld start\nStarting MySQL SUCCESS!\n</code></pre>\n</li>\n<li>\n<p>关闭防火墙，不会的点这里<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbW16cy9wLzg0MDYyMDguaHRtbCNfbGFiZWww\"> Linux 常用命令大全（非常全！！！）</span></p>\n</li>\n<li>\n<p>在自己购买的服务器上将 MySQL 使用的 3306 端口开放，如果是在本地搭建的虚拟机，记得一定要满足第 1 条，将网络接通外网。</p>\n</li>\n<li>\n<p>添加监听的端口：</p>\n<pre><code>添加需要监听的端口\n/sbin/iptables -I INPUT -p tcp --dport 3306 -j ACCEPT\n\n保存设置/etc/init.d/iptables save\n查看状态/etc/init.d/iptables status\n</code></pre>\n</li>\n<li>\n<p>权限不足 权限问题，参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbW16cy9wLzkwNDI5OTcuaHRtbA==\">navicat 连接不上 Linux 服务器上的 MySQL</span></p>\n</li>\n</ol>\n",
            "tags": [
                "bug",
                "数据库"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/d1cf2272.html",
            "url": "https://isviolet.github.io/p/d1cf2272.html",
            "title": "Json转实体类",
            "date_published": "2021-05-18T13:14:08.853Z",
            "content_html": "<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>这里使用 fastJson 的 JSON.parseObject () 方法，左边是 json 字符串，右边是要转换的实体类，即上面生成的实体类。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Entiy</span> entiy <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Entiy</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "JAVA开发手册"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/566cdd19.html",
            "url": "https://isviolet.github.io/p/566cdd19.html",
            "title": "OKHttp3.10.0最新版的极致封装",
            "date_published": "2021-05-18T13:12:12.353Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<blockquote>\n<p>我们都知道，Retrofit 目前是比较火的网络请求框架，本身就是是 OKHttp 进行了封装，实际干活的还是 OKhttp，所以为了更好的用好 Retrofit，很有必要复习一下 OKHTTP，并且 OKhttp 的最新版本 3.10.0 和之前版本的操作也是不尽相同，所以今天重新对他操作一波，从简单实用到常用使用方式的封装均有涉猎，亲测可以正常使用，本文以豆瓣的电影 api 做测试数据，详细源码下方会有下载地址，时间紧迫，废话不多说，代码就是最好的注释，欢迎 fork！ PS: 本文主要围绕以下四个文件做操作： ![file](<span class=\"exturl\" data-url=\"aHR0cDovL25hdmllbHVjay53YW5nL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDIwLzA5L2ltYWdlLTE1OTkwMzY2MjM1NDEucG5n\">http://navieluck.wang/wp-content/uploads/2020/09/image-1599036623541.png</span></p>\n</blockquote>\n<h1 id=\"okhttp310的get请求\"><a class=\"anchor\" href=\"#okhttp310的get请求\">#</a> OKHTTP3.10 的 GET 请求</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getDouBan1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">//1, 创建 OKHttpClient 对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">OkHttpClient</span> okHttpClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OkHttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">//2, 创建一个 Request</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Request</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constant</span><span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//3, 创建一个 call 对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Call</span> call <span class=\"token operator\">=</span> okHttpClient<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">//4, 将请求添加到调度中</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        call<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onResponse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Response</span> response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">isSuccessful</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    res <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token class-name\">ThreadPoolUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                            <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"okhttp310的post请求\"><a class=\"anchor\" href=\"#okhttp310的post请求\">#</a> OKHTTP3.10 的 POST 请求</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postDouBan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">//1, 创建 OKHttpClient 对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">OkHttpClient</span> okHttpClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OkHttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">//2, 创建一个 Request</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">RequestBody</span> requestBody <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormBody<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ytf\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Request</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constant</span><span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>requestBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//4, 将请求添加到调度中</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        okHttpClient<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onResponse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Response</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">isSuccessful</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    res <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token class-name\">ThreadPoolUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// Looper.prepare();// Toast.makeText(MainActivity.this, res, Toast.LENGTH_SHORT).show(); Log.d(TAG, res); EventBus.getDefault().post(res); &#125; &#125;); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125;); &#125;</span></pre></td></tr></table></figure><h1 id=\"okhttp310的get封装请求\"><a class=\"anchor\" href=\"#okhttp310的get封装请求\">#</a> OKHTTP3.10 的 GET 封装请求</h1>\n<h2 id=\"工具类的单例\"><a class=\"anchor\" href=\"#工具类的单例\">#</a> 工具类的单例：</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 懒汉式加锁单例模式</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OkHTTPManger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        okHttpClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OkHttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">OkHTTPManger</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance  <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">OkHTTPManger</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance  <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OkHTTPManger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"get同步请求\"><a class=\"anchor\" href=\"#get同步请求\">#</a> get 同步请求</h2>\n<h3 id=\"通过responsebodystring获取返回的字符串\"><a class=\"anchor\" href=\"#通过responsebodystring获取返回的字符串\">#</a> 通过 response.body ().string () 获取返回的字符串</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * get 同步请求不需要传参数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 通过 response.body ().string () 获取返回的字符串</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @param url</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getSyncBackString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Request</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Call</span> call <span class=\"token operator\">=</span> okHttpClient<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">Response</span> response <span class=\"token operator\">=</span> call<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 将 response 转化成 String</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">String</span> responseStr <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> responseStr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET同步请求解析为String异常\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"通过responsebodybytes获取返回的二进制字节数组\"><a class=\"anchor\" href=\"#通过responsebodybytes获取返回的二进制字节数组\">#</a> 通过 response.body ().bytes () 获取返回的二进制字节数组</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * get 同步请求</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 通过 response.body ().bytes () 获取返回的二进制字节数组</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @param url</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getSyncBackByteArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Request</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Call</span> call <span class=\"token operator\">=</span> okHttpClient<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">Response</span> response <span class=\"token operator\">=</span> call<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 将 response 转化成 String</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> responseStr <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> responseStr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET同步请求解析为byte数组异常\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"通过responsebodybytestream获取返回的二进制字节流\"><a class=\"anchor\" href=\"#通过responsebodybytestream获取返回的二进制字节流\">#</a> 通过 response.body ().byteStream () 获取返回的二进制字节流</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * get 同步请求</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 通过 response.body ().byteStream () 获取返回的二进制字节流</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @param url</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">InputStream</span> <span class=\"token function\">getSyncBackByteStream</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Request</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Call</span> call <span class=\"token operator\">=</span> okHttpClient<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">Response</span> response <span class=\"token operator\">=</span> call<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 将 response 转化成 String</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">InputStream</span> responseStr <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">byteStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> responseStr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET同步请求解析为String异常\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"通过responsebodybytestream获取返回的二进制字节流-2\"><a class=\"anchor\" href=\"#通过responsebodybytestream获取返回的二进制字节流-2\">#</a> 通过 response.body ().byteStream () 获取返回的二进制字节流</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * get 同步请求</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 通过 response.body ().byteStream () 获取返回的二进制字节流</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @param url</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Reader</span> <span class=\"token function\">getSyncBackCharReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Request</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Call</span> call <span class=\"token operator\">=</span> okHttpClient<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">Response</span> response <span class=\"token operator\">=</span> call<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 将 response 转化成 String</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">Reader</span> responseStr <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">charStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> responseStr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET同步请求解析为Reader异常\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"get异步请求\"><a class=\"anchor\" href=\"#get异步请求\">#</a> get 异步请求</h2>\n<h3 id=\"get异步请求不传参数\"><a class=\"anchor\" href=\"#get异步请求不传参数\">#</a> get 异步请求不传参数</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * get 异步请求不传参数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 通过 response.body ().string () 获取返回的字符串</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * 异步返回值不能更新 UI，要开启新线程</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @param url</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getAsynBackStringWithoutParms</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MyDataCallBack</span> myDataCallBack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Request</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">Call</span> call <span class=\"token operator\">=</span> okHttpClient<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">onBefore</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 请求加入调度</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        call<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//                 Logger.e (\"GET 异步请求为 String 失败\"+e.toString ());                    myDataCallBack.requestFailure (request, e);                &#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onResponse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Response</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                responseStrGETAsyn <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">requestSuccess</span><span class=\"token punctuation\">(</span>responseStrGETAsyn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>GET异步请求为<span class=\"token class-name\">String</span>解析异常失败<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">onAfter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>GET异步请求解析为<span class=\"token class-name\">String</span>异常<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">return</span> responseStrGETAsyn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"get异步请求传参数可以传null\"><a class=\"anchor\" href=\"#get异步请求传参数可以传null\">#</a> get 异步请求传参数 (可以传 null)</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * get 异步请求传参数 (可以传 null)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 通过 response.body ().string () 获取返回的字符串</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * 异步返回值不能更新 UI，要开启新线程</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @param url</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getAsynBackStringWithParms</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> params<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MyDataCallBack</span> myDataCallBack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>params  <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            params <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 请求 url（baseUrl + 参数）</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">String</span> doUrl <span class=\"token operator\">=</span> <span class=\"token function\">urlJoint</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Request</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>doUrl<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//                .header (\"Cookie\", \"自动管理更新需要携带的 Cookie\")</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Call</span> call <span class=\"token operator\">=</span> okHttpClient<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">onBefore</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">// 请求加入调度</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            call<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//                 Logger.e (\"GET 异步请求为 String 失败\"+e.toString ());                    myDataCallBack.requestFailure (request, e);                &#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onResponse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Response</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                responseStrGETAsyn <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">requestSuccess</span><span class=\"token punctuation\">(</span>responseStrGETAsyn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>GET异步请求为<span class=\"token class-name\">String</span>解析异常失败<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">onAfter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>GET异步请求解析为<span class=\"token class-name\">String</span>异常<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">return</span> responseStrGETAsyn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"明文传参拼接url\"><a class=\"anchor\" href=\"#明文传参拼接url\">#</a> 明文传参拼接 URL</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * @param url    实际 URL 的 path</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * @param params</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">urlJoint</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">StringBuilder</span> realURL <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constant</span><span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        realURL <span class=\"token operator\">=</span> realURL<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">boolean</span> isFirst <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>params  <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            params <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> entrySet <span class=\"token operator\">=</span> params<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> entry <span class=\"token operator\">:</span> entrySet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isFirst <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    isFirst <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    realURL<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    realURL<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                realURL<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                realURL<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    realURL<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    realURL<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">return</span> realURL<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"okhttp310的post封装请求\"><a class=\"anchor\" href=\"#okhttp310的post封装请求\">#</a> OKHTTP3.10 的 POST 封装请求</h1>\n<h2 id=\"post异步请求map传参\"><a class=\"anchor\" href=\"#post异步请求map传参\">#</a> post 异步请求 map 传参</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * post 异步请求 map 传参</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 通过 response.body ().string () 获取返回的字符串</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * 异步返回值不能更新 UI，要开启新线程</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @param url</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">postAsynBackString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> params<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MyDataCallBack</span> myDataCallBack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">RequestBody</span> requestBody<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>params  <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            params <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">FormBody<span class=\"token punctuation\">.</span>Builder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormBody<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * 在这对添加的参数进行遍历</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">addMapParmsToFromBody</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> builder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    requestBody <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">String</span> realURL <span class=\"token operator\">=</span> <span class=\"token function\">urlJoint</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 结果返回</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Request</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>realURL<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>requestBody<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token class-name\">Call</span> call <span class=\"token operator\">=</span> okHttpClient<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">onBefore</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 请求加入调度</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        call<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">requestFailure</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onResponse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Response</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                responseStrGETAsyn <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 此处也可以解析为 byte [],Reader,InputStream</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">requestSuccess</span><span class=\"token punctuation\">(</span>responseStrGETAsyn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>POST异步请求为<span class=\"token class-name\">String</span>解析异常失败<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">onAfter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>POST异步请求解析为<span class=\"token class-name\">String</span>异常<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">return</span> responseStrGETAsyn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"将参数添加到请求体\"><a class=\"anchor\" href=\"#将参数添加到请求体\">#</a> 将参数添加到请求体</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addMapParmsToFromBody</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> params<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FormBody<span class=\"token punctuation\">.</span>Builder</span> builder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">:</span> params<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token class-name\">String</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>             * 判断值是否是空的</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                value <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                value <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>             * 把 key 和 value 添加到 formbody 中</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            builder<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"post异步请求json传参\"><a class=\"anchor\" href=\"#post异步请求json传参\">#</a> post 异步请求 json 传参</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * post 异步请求 json 传参</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 通过 response.body ().string () 获取返回的字符串</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * 异步返回值不能更新 UI，要开启新线程</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @param url</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">postAsynRequireJson</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> params<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MyDataCallBack</span> myDataCallBack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>params  <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        params <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 将 map 转换成 json, 需要引入 Gson 包</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">String</span> mapToJson <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Gson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJson</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> realURL <span class=\"token operator\">=</span> <span class=\"token function\">urlJoint</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Request</span> request <span class=\"token operator\">=</span> <span class=\"token function\">buildJsonPostRequest</span><span class=\"token punctuation\">(</span>realURL<span class=\"token punctuation\">,</span> mapToJson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">Call</span> call <span class=\"token operator\">=</span> okHttpClient<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">onBefore</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 请求加入调度</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        call<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">requestFailure</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onResponse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Response</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                responseStrGETAsyn <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 此处也可以解析为 byte [],Reader,InputStream</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">requestSuccess</span><span class=\"token punctuation\">(</span>responseStrGETAsyn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>POST异步请求为<span class=\"token class-name\">String</span>解析异常失败<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">onAfter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>POST异步请求解析为<span class=\"token class-name\">String</span>异常<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">return</span> responseStrGETAsyn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"以json方式传入请求体\"><a class=\"anchor\" href=\"#以json方式传入请求体\">#</a> 以 json 方式传入请求体</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token operator\">*</span> <span class=\"token class-name\">Json_POST</span>请求参数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token operator\">*</span> <span class=\"token annotation punctuation\">@param</span> url  url</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token operator\">*</span> <span class=\"token annotation punctuation\">@param</span> json json</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token operator\">*</span> <span class=\"token annotation punctuation\">@return</span> requestBody</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token operator\">*</span><span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Request</span> <span class=\"token function\">buildJsonPostRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> json<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//        RequestBody requestBody = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), json);</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">RequestBody</span> requestBody <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestBody</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>JSON<span class=\"token punctuation\">,</span> json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>requestBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"以string方式传入请求体\"><a class=\"anchor\" href=\"#以string方式传入请求体\">#</a> 以 String 方式传入请求体</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * String_POST 请求参数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * @param url  url</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @param json json</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @return requestBody</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Request</span> <span class=\"token function\">buildStringPostRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> json<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">RequestBody</span> requestBody <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestBody</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>MEDIA_TYPE_MARKDOWN<span class=\"token punctuation\">,</span> json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>requestBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"文件上传\"><a class=\"anchor\" href=\"#文件上传\">#</a> 文件上传：</h1>\n<h2 id=\"基于http的文件上传传入文件名和key\"><a class=\"anchor\" href=\"#基于http的文件上传传入文件名和key\">#</a> 基于 http 的文件上传（传入文件名和 key）</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 基于 http 的文件上传（传入文件名和 key）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 通过 addFormDataPart</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @param url            URL 的 Path 部分</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @param myDataCallBack 自定义回调接口</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     *                       将 file 作为请求体传入到服务端.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @param fileKey        文件传入服务器的键 \"image\"</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * @fileName: \"pic.png\"</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">upLoadMultiFileSimple</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> fileKey<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MyDataCallBack</span> myDataCallBack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Environment</span><span class=\"token punctuation\">.</span><span class=\"token function\">getExternalStorageDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">RequestBody</span> fileBody <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestBody</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"application/octet-stream\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">RequestBody</span> requestBody <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MultipartBody<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">setType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MultipartBody</span><span class=\"token punctuation\">.</span>FORM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">addFormDataPart</span><span class=\"token punctuation\">(</span>fileKey<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">,</span> fileBody<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> realURL <span class=\"token operator\">=</span> <span class=\"token function\">urlJoint</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Request</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>realURL<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>requestBody<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token class-name\">Call</span> call <span class=\"token operator\">=</span> okHttpClient<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">onBefore</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 请求加入调度</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        call<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">requestFailure</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onResponse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Response</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">requestSuccess</span><span class=\"token punctuation\">(</span>responseStrGETAsyn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>POST异步文件上传失败<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">onAfter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>POST异步文件上传异常<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"基于http的文件上传混合参数和文件请求\"><a class=\"anchor\" href=\"#基于http的文件上传混合参数和文件请求\">#</a> 基于 http 的文件上传，混合参数和文件请求</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 基于 http 的文件上传（传入文件数组和 key）混合参数和文件请求</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 通过 addFormDataPart 可以添加多个上传的文件</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @param url            URL 的 Path 部分</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @param myDataCallBack 自定义回调接口</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     *                       将 file 作为请求体传入到服务端.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @param files          上传的文件</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * @param fileKeys       上传的文件 key 集合</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">upLoadMultiFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> files<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fileKeys<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> params<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MyDataCallBack</span> myDataCallBack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>params  <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            params <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> realURL <span class=\"token operator\">=</span> <span class=\"token function\">urlJoint</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">FormBody<span class=\"token punctuation\">.</span>Builder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormBody<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">addMapParmsToFromBody</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> builder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">RequestBody</span> requestBody <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">MultipartBody<span class=\"token punctuation\">.</span>Builder</span> multipartBody <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MultipartBody<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        multipartBody<span class=\"token punctuation\">.</span><span class=\"token function\">setType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MultipartBody</span><span class=\"token punctuation\">.</span>ALTERNATIVE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">addPart</span><span class=\"token punctuation\">(</span>requestBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>files <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">RequestBody</span> fileBody <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> files<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> files<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">String</span> fileName <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            fileBody <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestBody</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token function\">guessMimeType</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">//TODO 根据文件名设置 contentType</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            multipartBody<span class=\"token punctuation\">.</span><span class=\"token function\">addPart</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Headers</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token class-name\">Content</span><span class=\"token operator\">-</span><span class=\"token class-name\">Disposition</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>form<span class=\"token operator\">-</span>data<span class=\"token punctuation\">;</span> name<span class=\"token operator\">=</span>\\<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span> fileKeys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>\\<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span> filename<span class=\"token operator\">=</span>\\<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span> fileName <span class=\"token operator\">+</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>\\<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    fileBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Request</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>realURL<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>multipartBody<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token class-name\">Call</span> call <span class=\"token operator\">=</span> okHttpClient<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">onBefore</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// 请求加入调度</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        call<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">requestFailure</span><span class=\"token punctuation\">(</span>call<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onResponse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Response</span> response<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                    myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">requestSuccess</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>POST异步文件上传失败<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">onAfter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>POST异步文件上传异常<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">guessMimeType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>        <span class=\"token class-name\">FileNameMap</span> fileNameMap <span class=\"token operator\">=</span> <span class=\"token class-name\">URLConnection</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFileNameMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token class-name\">String</span> contentTypeFor <span class=\"token operator\">=</span> fileNameMap<span class=\"token punctuation\">.</span><span class=\"token function\">getContentTypeFor</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>contentTypeFor  <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>            contentTypeFor <span class=\"token operator\">=</span> <span class=\"token string\">\"application/octet-stream\"</span><span class=\"token punctuation\">;</span>        <span class=\"token punctuation\">&#125;</span>        <span class=\"token keyword\">return</span> contentTypeFor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"文件下载\"><a class=\"anchor\" href=\"#文件下载\">#</a> 文件下载</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 文件下载</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * @param url path 路径</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * @param destFileDir 本地存储的文件夹路径</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @param myDataCallBack 自定义回调接口</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">downLoadFileAsyn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> destFileDir<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MyDataCallBack</span> myDataCallBack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">String</span> realURL<span class=\"token operator\">=</span><span class=\"token function\">urlJoint</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Request</span> request<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>realURL<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Call</span> call<span class=\"token operator\">=</span>okHttpClient<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        call<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">requestFailure</span><span class=\"token punctuation\">(</span>call<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onResponse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Call</span> call<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Response</span> response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">InputStream</span> is <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token class-name\">FileOutputStream</span> fos <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            is <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">byteStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>destFileDir<span class=\"token punctuation\">,</span> <span class=\"token function\">getFileName</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">=</span> is<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    fos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                fos<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>文件下载异常：<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                        is<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                        <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>文件流关闭异常：<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fos <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                        fos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                        <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>文件流关闭异常：<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token comment\">// 如果下载文件成功，第一个参数为文件的绝对路径</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token function\">sendSuccessResultCallback</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> myDataCallBack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">requestSuccess</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getFileName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>        <span class=\"token keyword\">int</span> separatorIndex <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>separatorIndex <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> url <span class=\"token operator\">:</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>separatorIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendSuccessResultCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> absolutePath<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MyDataCallBack</span> myDataCallBack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token class-name\">ThreadPoolUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myDataCallBack<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> myDataCallBack<span class=\"token punctuation\">.</span><span class=\"token function\">requestSuccess</span><span class=\"token punctuation\">(</span>absolutePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"自定义callback回调mydatacallback\"><a class=\"anchor\" href=\"#自定义callback回调mydatacallback\">#</a> 自定义 CallBack 回调 MyDataCallBack</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>ytf<span class=\"token punctuation\">.</span>httpdemo<span class=\"token punctuation\">.</span>okhttp</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>gson<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GsonTypes</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStream</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Reader</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ParameterizedType</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Type</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Request</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>@author ytf</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>正常情况下多数返回的是 string 格式，</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>如果要接收返回其他类型的数据可以依照需求放开注释，</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>使用参照同步请求做法</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>/public abstract class MyDataCallBack&lt;T> &#123;  // 请求数据的返回类型，包含常见的（Bean，List 等）  Type mType;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  public MyDataCallBack () &#123;//        mType=getSuperclassTypeParameter (getClass ());  &#125;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  /**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>通过反射返回想要的类型</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>@param subclass</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>@return</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>/</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>static Type getSuperclassTypeParameter (Class&lt;?> subclass) &#123;  Type superclass = subclass.getGenericSuperclass ();  if (superclass instanceof Class) &#123;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  throw new RuntimeException (&amp;quot; 未知返回类型 & amp;quot;);</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  &#125;  ParameterizedType parameterized = (ParameterizedType) superclass;  return GsonTypes.canonicalize (parameterized.getActualTypeArguments ()[0]);&#125;/**</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>在请求之前的方法，一般用于加载进度框 ProgressBar 展示</pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>@param request</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>/public  abstract void onBefore (Request request);</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>public abstract void requestSuccess (T result);</pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>//    void requestSuccess (Reader result) throws Exception;//    void requestSuccess (InputStream result) throws Exception;//    void requestSuccess (byte [] result) throws Exception;</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>public abstract void requestFailure (Request request, IOException e);</pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"46\"></td><td><pre> * 在请求之后的方法，一般用于加载框隐藏</pre></td></tr><tr><td data-num=\"47\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onAfter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"自定义日志拦截器\"><a class=\"anchor\" href=\"#自定义日志拦截器\">#</a> 自定义日志拦截器</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>ytf<span class=\"token punctuation\">.</span>httpdemo<span class=\"token punctuation\">.</span>okhttp</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orhanobut<span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Logger</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Locale</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Interceptor</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Request</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Response</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>@author ytf 自定义拦截器 Chain 对象可以拿到当前请求的 Request 对象，然后我们可以对 Request 做二次处理， 最后生成我们需要的请求，然后再通过网络发送请求到服务端，这样就完成了一次拦截 /public class HeaderInterceptor implements Interceptor &#123;@Override public Response intercept (Chain chain) throws IOException &#123; Request request = chain.request (); Logger.d (String.format (&amp;quot;Sending request % s on % s% n% s&amp;quot;, request.url (), chain.connection (), request.headers ())); long t1 = System.nanoTime (); okhttp3.Response response = chain.proceed (chain.request ()); long t2 = System.nanoTime (); Logger.d (String.format (Locale.getDefault (), &amp;quot;Received response for % s in %.1fms% n% s&amp;quot;, response.request ().url (), (t2 - t1) / 1e6d, response.headers ())); okhttp3.MediaType mediaType = response.body ().contentType (); String content = response.body ().string (); Logger.json (content); Response response1=chain.proceed (request); Logger.d (&amp;quot; 返回 response：&amp;quot;,response1.toString ()); return response.newBuilder () .header (&amp;quot;Authorization&amp;quot;, &amp;quot; 请求头授权信息拦截 & amp;quot;) .body (okhttp3.ResponseBody.create (mediaType, content)) .build ();&#125;&#125;</span></pre></td></tr></table></figure><h2 id=\"自定义网络拦截器\"><a class=\"anchor\" href=\"#自定义网络拦截器\">#</a> 自定义网络拦截器</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>ytf<span class=\"token punctuation\">.</span>httpdemo<span class=\"token punctuation\">.</span>okhttp</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Context</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConnectivityManager</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NetworkInfo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>ytf<span class=\"token punctuation\">.</span>httpdemo<span class=\"token punctuation\">.</span></span>APP<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CacheControl</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Interceptor</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Request</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Response</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>@author ytf</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>设置网络拦截器，实现在线和离线缓存</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>/public class CacheInterceptor implements Interceptor &#123;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  @Override  public Response intercept (Chain chain) throws IOException &#123;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  Request request = chain.request ();</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  if (!isNetworkConnected ()) &#123;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      request = request.newBuilder ()</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>              .cacheControl (CacheControl.FORCE_CACHE)</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>              .build ();</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  Response originalResponse = chain.proceed (request);</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  if (isNetworkConnected ()) &#123;</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      // 有网的时候读接口上的 @Headers 里的配置，你可以在这里进行统一的设置 (注掉部分)</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      String cacheControl = request.cacheControl ().toString ();</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      return originalResponse.newBuilder ()</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>              .header (&amp;quot;Cache-Control&amp;quot;, cacheControl)</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>              //.header (&amp;quot;Cache-Control&amp;quot;, &amp;quot;max-age=3600&amp;quot;)</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>              .removeHeader (&amp;quot;Pragma&amp;quot;) // 清除头信息，因为服务器如果不支持，会返回一些干扰信息，不清除下面无法生效</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>              .build ();</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  &#125; else &#123;</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>//1. 不需要缓存：Cache-Control: no-cache 或 Cache-Control: max-age=0//2. 如果想先显示数据，在请求。（类似于微博等）：Cache-Control: only-if-cached</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      int maxAge = 60 * 60;</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      return originalResponse.newBuilder ()</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>              .header (&amp;quot;Cache-Control&amp;quot;, &amp;quot;public, only-if-cached, max-age=&amp;quot; + maxAge)</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>              .removeHeader (&amp;quot;Pragma&amp;quot;)</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>              .build ();</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  /**</pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>判断网络是否可用的方法</pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>@return</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>/private boolean isNetworkConnected () &#123;  ConnectivityManager connectivity = (ConnectivityManager) APP.getInstance ()      .getSystemService (Context.CONNECTIVITY_SERVICE);</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  if (null != connectivity) &#123;  NetworkInfo info = connectivity.getActiveNetworkInfo ();</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  if (null != info &amp;amp;&amp;amp; info.isConnected ()) &#123;</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      if (info.getState ()  NetworkInfo.State.CONNECTED) &#123;</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>          return true;</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  &#125;  return false;&#125;</pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>&#125;</span></pre></td></tr></table></figure><h2 id=\"工具类详细代码\"><a class=\"anchor\" href=\"#工具类详细代码\">#</a> 工具类详细代码：</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>ytf<span class=\"token punctuation\">.</span>httpdemo<span class=\"token punctuation\">.</span>okhttp</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Environment</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>ytf<span class=\"token punctuation\">.</span>httpdemo<span class=\"token punctuation\">.</span></span>APP<span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>ytf<span class=\"token punctuation\">.</span>httpdemo<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Constant</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>ytf<span class=\"token punctuation\">.</span>httpdemo<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ThreadPoolUtil</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>gson<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Gson</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>gson<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GsonTypes</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>orhanobut<span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Logger</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileNotFoundException</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStream</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Reader</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ParameterizedType</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Type</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConnectException</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileNameMap</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SocketException</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SocketTimeoutException</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">URLConnection</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UnknownHostException</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ParameterMetaData</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Set</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Cache</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Call</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Callback</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CookieJar</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FormBody</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Headers</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpUrl</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MultipartBody</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">OkHttpClient</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Request</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestBody</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Response</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">okhttp3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResponseBody</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>@author ytf</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>/public class OkHTTPManger &#123;private static OkHttpClient okHttpClient;  private volatile static OkHTTPManger instance;// 防止多个线程同时访问  // 提交 json 数据  private static final MediaType JSON = MediaType.parse (\"application/json;charset=utf-8\");  // 提交字符串数据  private static final MediaType MEDIA_TYPE_MARKDOWN = MediaType.parse (\"text/x-markdown;charset=utf-8\");  private static String responseStrGETAsyn;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  private final HashMap&lt;String, List&lt;Cookie>> cookieStore = new HashMap&lt;>();// 使用 getCacheDir () 来作为缓存文件的存放路径（/data/data/ 包名 /cache） ，// 如果你想看到缓存文件可以临时使用 getExternalCacheDir ()（/sdcard/Android/data/ 包名 /cache）。  private static File cacheFile;  private static Cache cache;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  public OkHTTPManger () &#123;//        if (APP.getInstance ().getApplicationContext ().getCacheDir ()!=null)&#123;//            cacheFile = new File (APP.getInstance ().getCacheDir (), \"Test\");//            cache = new Cache (cacheFile, 1024 * 1024 * 10);//        &#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  okHttpClient = new OkHttpClient ();</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  okHttpClient.newBuilder ()</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>//                .addInterceptor (new HeaderInterceptor ())//                .addNetworkInterceptor (new CacheInterceptor ())//                .cache (cache)</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          .connectTimeout (10, TimeUnit.SECONDS)</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          .readTimeout (10, TimeUnit.SECONDS)</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          .writeTimeout (10, TimeUnit.SECONDS)</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          .cookieJar (new CookieJar () &#123;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>              @Override</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>              public void saveFromResponse (HttpUrl url, List&amp;lt;Cookie&amp;gt; cookies) &#123;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                  cookieStore.put (url.host (), cookies);</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>              &#125;</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>              @Override</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>              public List&amp;lt;Cookie&amp;gt; loadForRequest (HttpUrl url) &#123;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                  List&amp;lt;Cookie&amp;gt; cookies = cookieStore.get (url.host ());</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                  return cookies != null ? cookies : new ArrayList&amp;lt;Cookie&amp;gt;();</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>// 自动管理 Cookie 发送 Request 都不用管 Cookie 这个参数也不用去 response 获取新 Cookie 什么的了。还能通过 cookieStore 获取当前保存的 Cookie。</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>              &#125;</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>          &#125;);</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  /**</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>懒汉式加锁单例模式</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>@return</pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>/public static OkHTTPManger getInstance () &#123;  if (instance  null) &#123;</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  synchronized (OkHTTPManger.class) &#123;</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      if (instance  null) &#123;</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>          instance = new OkHTTPManger ();</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  &#125;  return instance;&#125;</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>get 同步请求不需要传参数</pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>通过 response.body ().string () 获取返回的字符串</pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>@param url</pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>@return</pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>/public String getSyncBackString (String url) &#123;  Request request = new Request.Builder ()</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>      .url (url)</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      .build ();</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  Call call = okHttpClient.newCall (request);  try &#123;</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  Response response = call.execute ();</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  // 将 response 转化成 String</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  String responseStr = response.body ().string ();</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  return responseStr;</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  &#125; catch (IOException e) &#123;</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  Logger.e (&amp;quot;GET 同步请求解析为 String 异常 & amp;quot; + e.toString ());</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  e.printStackTrace ();</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  &#125;  return null;&#125;</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>get 同步请求</pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>通过 response.body ().bytes () 获取返回的二进制字节数组</pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>@param url</pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>@return</pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>/public byte [] getSyncBackByteArray (String url) &#123;  Request request = new Request.Builder ()</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>      .url (url)</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>      .build ();</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  Call call = okHttpClient.newCall (request);  try &#123;</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  Response response = call.execute ();</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>  // 将 response 转化成 String</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  byte [] responseStr = response.body ().bytes ();</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  return responseStr;</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>  &#125; catch (IOException e) &#123;</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>  Logger.e (&amp;quot;GET 同步请求解析为 byte 数组异常 & amp;quot; + e.toString ());</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>  e.printStackTrace ();</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  &#125;  return null;&#125;</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>get 同步请求</pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>通过 response.body ().byteStream () 获取返回的二进制字节流</pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>@param url</pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>@return</pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>/public InputStream getSyncBackByteStream (String url) &#123;  Request request = new Request.Builder ()</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>      .url (url)</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>      .build ();</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>  Call call = okHttpClient.newCall (request);  try &#123;</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>  Response response = call.execute ();</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>  // 将 response 转化成 String</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>  InputStream responseStr = response.body ().byteStream ();</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>  return responseStr;</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  &#125; catch (IOException e) &#123;</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>  Logger.e (&amp;quot;GET 同步请求解析为 String 异常 & amp;quot; + e.toString ());</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>  e.printStackTrace ();</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>  &#125;  return null;&#125;</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>get 同步请求</pre></td></tr><tr><td data-num=\"119\"></td><td><pre></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>通过 response.body ().byteStream () 获取返回的二进制字节流</pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>@param url</pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>@return</pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>/public Reader getSyncBackCharReader (String url) &#123;  Request request = new Request.Builder ()</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>      .url (url)</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>      .build ();</pre></td></tr><tr><td data-num=\"130\"></td><td><pre>  Call call = okHttpClient.newCall (request);  try &#123;</pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  Response response = call.execute ();</pre></td></tr><tr><td data-num=\"132\"></td><td><pre>  // 将 response 转化成 String</pre></td></tr><tr><td data-num=\"133\"></td><td><pre>  Reader responseStr = response.body ().charStream ();</pre></td></tr><tr><td data-num=\"134\"></td><td><pre>  return responseStr;</pre></td></tr><tr><td data-num=\"135\"></td><td><pre>  &#125; catch (IOException e) &#123;</pre></td></tr><tr><td data-num=\"136\"></td><td><pre>  Logger.e (&amp;quot;GET 同步请求解析为 Reader 异常 & amp;quot; + e.toString ());</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>  e.printStackTrace ();</pre></td></tr><tr><td data-num=\"138\"></td><td><pre>  &#125;  return null;&#125;</pre></td></tr><tr><td data-num=\"139\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"140\"></td><td><pre></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>get 异步请求不传参数</pre></td></tr><tr><td data-num=\"142\"></td><td><pre></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>通过 response.body ().string () 获取返回的字符串</pre></td></tr><tr><td data-num=\"144\"></td><td><pre></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>异步返回值不能更新 UI，要开启新线程</pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>@param url</pre></td></tr><tr><td data-num=\"149\"></td><td><pre></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>@return</pre></td></tr><tr><td data-num=\"151\"></td><td><pre></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>/public String getAsynBackStringWithoutParms (String url, final MyDataCallBack myDataCallBack) &#123;</pre></td></tr><tr><td data-num=\"153\"></td><td><pre>  final Request request = new Request.Builder ()</pre></td></tr><tr><td data-num=\"154\"></td><td><pre>      .url (url)</pre></td></tr><tr><td data-num=\"155\"></td><td><pre>      .build ();</pre></td></tr><tr><td data-num=\"156\"></td><td><pre>  Call call = okHttpClient.newCall (request);  try &#123;</pre></td></tr><tr><td data-num=\"157\"></td><td><pre>  myDataCallBack.onBefore (request);</pre></td></tr><tr><td data-num=\"158\"></td><td><pre>  // 请求加入调度</pre></td></tr><tr><td data-num=\"159\"></td><td><pre>  call.enqueue (new Callback () &#123;</pre></td></tr><tr><td data-num=\"160\"></td><td><pre></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>      @Override</pre></td></tr><tr><td data-num=\"162\"></td><td><pre>      public void onFailure (Call call, IOException e) &#123;</pre></td></tr><tr><td data-num=\"163\"></td><td><pre>//                 Logger.e (\"GET 异步请求为 String 失败\"+e.toString ());</pre></td></tr><tr><td data-num=\"164\"></td><td><pre>          myDataCallBack.requestFailure (request, e);</pre></td></tr><tr><td data-num=\"165\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"166\"></td><td><pre></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>      @Override</pre></td></tr><tr><td data-num=\"168\"></td><td><pre>      public void onResponse (Call call, Response response) throws IOException &#123;</pre></td></tr><tr><td data-num=\"169\"></td><td><pre>          responseStrGETAsyn = response.body ().string ();</pre></td></tr><tr><td data-num=\"170\"></td><td><pre>          try &#123;</pre></td></tr><tr><td data-num=\"171\"></td><td><pre>              myDataCallBack.requestSuccess (responseStrGETAsyn);</pre></td></tr><tr><td data-num=\"172\"></td><td><pre></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>          &#125; catch (Exception e) &#123;</pre></td></tr><tr><td data-num=\"174\"></td><td><pre>              e.printStackTrace ();</pre></td></tr><tr><td data-num=\"175\"></td><td><pre>              Logger.e (&amp;quot;GET 异步请求为 String 解析异常失败 & amp;quot; + e.toString ());</pre></td></tr><tr><td data-num=\"176\"></td><td><pre>          &#125;</pre></td></tr><tr><td data-num=\"177\"></td><td><pre></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"179\"></td><td><pre>  &#125;);</pre></td></tr><tr><td data-num=\"180\"></td><td><pre></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>  myDataCallBack.onAfter ();</pre></td></tr><tr><td data-num=\"182\"></td><td><pre>  &#125; catch (Exception e) &#123;</pre></td></tr><tr><td data-num=\"183\"></td><td><pre>  Logger.e (&amp;quot;GET 异步请求解析为 String 异常 & amp;quot; + e.toString ());</pre></td></tr><tr><td data-num=\"184\"></td><td><pre>  e.printStackTrace ();</pre></td></tr><tr><td data-num=\"185\"></td><td><pre>  &#125;  return responseStrGETAsyn;&#125;</pre></td></tr><tr><td data-num=\"186\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"187\"></td><td><pre></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>get 异步请求传参数 (可以传 null)</pre></td></tr><tr><td data-num=\"189\"></td><td><pre></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>通过 response.body ().string () 获取返回的字符串</pre></td></tr><tr><td data-num=\"191\"></td><td><pre></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>异步返回值不能更新 UI，要开启新线程</pre></td></tr><tr><td data-num=\"193\"></td><td><pre></pre></td></tr><tr><td data-num=\"194\"></td><td><pre></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>@param url</pre></td></tr><tr><td data-num=\"196\"></td><td><pre></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>@return</pre></td></tr><tr><td data-num=\"198\"></td><td><pre></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>/public String getAsynBackStringWithParms (String url, Map&lt;String, String> params, final MyDataCallBack myDataCallBack) &#123;  if (params  null) &#123;</pre></td></tr><tr><td data-num=\"200\"></td><td><pre>  params = new HashMap&amp;lt;&amp;gt;();</pre></td></tr><tr><td data-num=\"201\"></td><td><pre>  &#125;  // 请求 url（baseUrl + 参数）  String doUrl = urlJoint (url, params);  final Request request = new Request.Builder ()</pre></td></tr><tr><td data-num=\"202\"></td><td><pre>      .url (doUrl)</pre></td></tr><tr><td data-num=\"203\"></td><td><pre>//                .header (\"Cookie\", \"自动管理更新需要携带的 Cookie\")</pre></td></tr><tr><td data-num=\"204\"></td><td><pre>      .build ();</pre></td></tr><tr><td data-num=\"205\"></td><td><pre>  Call call = okHttpClient.newCall (request);  try &#123;</pre></td></tr><tr><td data-num=\"206\"></td><td><pre>  myDataCallBack.onBefore (request);</pre></td></tr><tr><td data-num=\"207\"></td><td><pre>  // 请求加入调度</pre></td></tr><tr><td data-num=\"208\"></td><td><pre>  call.enqueue (new Callback () &#123;</pre></td></tr><tr><td data-num=\"209\"></td><td><pre></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>      @Override</pre></td></tr><tr><td data-num=\"211\"></td><td><pre>      public void onFailure (Call call, IOException e) &#123;</pre></td></tr><tr><td data-num=\"212\"></td><td><pre>//                 Logger.e (\"GET 异步请求为 String 失败\"+e.toString ());</pre></td></tr><tr><td data-num=\"213\"></td><td><pre>          myDataCallBack.requestFailure (request, e);</pre></td></tr><tr><td data-num=\"214\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"215\"></td><td><pre></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>      @Override</pre></td></tr><tr><td data-num=\"217\"></td><td><pre>      public void onResponse (Call call, Response response) throws IOException &#123;</pre></td></tr><tr><td data-num=\"218\"></td><td><pre>          responseStrGETAsyn = response.body ().string ();</pre></td></tr><tr><td data-num=\"219\"></td><td><pre>          try &#123;</pre></td></tr><tr><td data-num=\"220\"></td><td><pre>              myDataCallBack.requestSuccess (responseStrGETAsyn);</pre></td></tr><tr><td data-num=\"221\"></td><td><pre></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>          &#125; catch (Exception e) &#123;</pre></td></tr><tr><td data-num=\"223\"></td><td><pre>              e.printStackTrace ();</pre></td></tr><tr><td data-num=\"224\"></td><td><pre>              Logger.e (&amp;quot;GET 异步请求为 String 解析异常失败 & amp;quot; + e.toString ());</pre></td></tr><tr><td data-num=\"225\"></td><td><pre>          &#125;</pre></td></tr><tr><td data-num=\"226\"></td><td><pre></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"228\"></td><td><pre>  &#125;);</pre></td></tr><tr><td data-num=\"229\"></td><td><pre></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>  myDataCallBack.onAfter ();</pre></td></tr><tr><td data-num=\"231\"></td><td><pre>  &#125; catch (Exception e) &#123;</pre></td></tr><tr><td data-num=\"232\"></td><td><pre>  Logger.e (&amp;quot;GET 异步请求解析为 String 异常 & amp;quot; + e.toString ());</pre></td></tr><tr><td data-num=\"233\"></td><td><pre>  e.printStackTrace ();</pre></td></tr><tr><td data-num=\"234\"></td><td><pre>  &#125;  return responseStrGETAsyn;&#125;</pre></td></tr><tr><td data-num=\"235\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"236\"></td><td><pre></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>post 异步请求 map 传参</pre></td></tr><tr><td data-num=\"238\"></td><td><pre></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>通过 response.body ().string () 获取返回的字符串</pre></td></tr><tr><td data-num=\"240\"></td><td><pre></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>异步返回值不能更新 UI，要开启新线程</pre></td></tr><tr><td data-num=\"242\"></td><td><pre></pre></td></tr><tr><td data-num=\"243\"></td><td><pre></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>@param url</pre></td></tr><tr><td data-num=\"245\"></td><td><pre></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>@return</pre></td></tr><tr><td data-num=\"247\"></td><td><pre></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>/public String postAsynBackString (String url, Map&lt;String, String> params, final MyDataCallBack myDataCallBack) &#123;  RequestBody requestBody;  if (params  null) &#123;</pre></td></tr><tr><td data-num=\"249\"></td><td><pre>  params = new HashMap&amp;lt;&amp;gt;();</pre></td></tr><tr><td data-num=\"250\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"251\"></td><td><pre>  FormBody.Builder builder = new FormBody.Builder ();  /**</pre></td></tr><tr><td data-num=\"252\"></td><td><pre></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>在这对添加的参数进行遍历</pre></td></tr><tr><td data-num=\"254\"></td><td><pre></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>/addMapParmsToFromBody (params, builder);</pre></td></tr><tr><td data-num=\"256\"></td><td><pre>requestBody = builder.build ();String realURL = urlJoint (url, null);// 结果返回 final Request request = new Request.Builder ()</pre></td></tr><tr><td data-num=\"257\"></td><td><pre>  .url (realURL)</pre></td></tr><tr><td data-num=\"258\"></td><td><pre>  .post (requestBody)</pre></td></tr><tr><td data-num=\"259\"></td><td><pre>  .build ();</pre></td></tr><tr><td data-num=\"260\"></td><td><pre>Call call = okHttpClient.newCall (request);try &#123;  myDataCallBack.onBefore (request);  // 请求加入调度  call.enqueue (new Callback () &#123;</pre></td></tr><tr><td data-num=\"261\"></td><td><pre>  @Override</pre></td></tr><tr><td data-num=\"262\"></td><td><pre>  public void onFailure (Call call, IOException e) &#123;</pre></td></tr><tr><td data-num=\"263\"></td><td><pre>      myDataCallBack.requestFailure (request, e);</pre></td></tr><tr><td data-num=\"264\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"265\"></td><td><pre></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>  @Override</pre></td></tr><tr><td data-num=\"267\"></td><td><pre>  public void onResponse (Call call, Response response) throws IOException &#123;</pre></td></tr><tr><td data-num=\"268\"></td><td><pre>      responseStrGETAsyn = response.body ().string ();// 此处也可以解析为 byte [],Reader,InputStream</pre></td></tr><tr><td data-num=\"269\"></td><td><pre>      try &#123;</pre></td></tr><tr><td data-num=\"270\"></td><td><pre>          myDataCallBack.requestSuccess (responseStrGETAsyn);</pre></td></tr><tr><td data-num=\"271\"></td><td><pre></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>      &#125; catch (Exception e) &#123;</pre></td></tr><tr><td data-num=\"273\"></td><td><pre>          e.printStackTrace ();</pre></td></tr><tr><td data-num=\"274\"></td><td><pre>          Logger.e (&amp;quot;POST 异步请求为 String 解析异常失败 & amp;quot; + e.toString ());</pre></td></tr><tr><td data-num=\"275\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"276\"></td><td><pre></pre></td></tr><tr><td data-num=\"277\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"278\"></td><td><pre>  &#125;);</pre></td></tr><tr><td data-num=\"279\"></td><td><pre>  myDataCallBack.onAfter ();&#125; catch (Exception e) &#123;  Logger.e (\"POST 异步请求解析为 String 异常\" + e.toString ());  e.printStackTrace ();&#125; return responseStrGETAsyn;&#125;</pre></td></tr><tr><td data-num=\"280\"></td><td><pre></pre></td></tr><tr><td data-num=\"281\"></td><td><pre></pre></td></tr><tr><td data-num=\"282\"></td><td><pre>private void addMapParmsToFromBody (Map&lt;String, String> params, FormBody.Builder builder) &#123;  for (Map.Entry&lt;String, String> map : params.entrySet ()) &#123;</pre></td></tr><tr><td data-num=\"283\"></td><td><pre>  String key = map.getKey ();</pre></td></tr><tr><td data-num=\"284\"></td><td><pre>  String value;</pre></td></tr><tr><td data-num=\"285\"></td><td><pre>  /**</pre></td></tr><tr><td data-num=\"286\"></td><td><pre>   * 判断值是否是空的</pre></td></tr><tr><td data-num=\"287\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"288\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>      value <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"291\"></td><td><pre>      value <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"293\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"294\"></td><td><pre>   * 把 key 和 value 添加到 formbody 中</pre></td></tr><tr><td data-num=\"295\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre>  builder<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"297\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"298\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"299\"></td><td><pre></pre></td></tr><tr><td data-num=\"300\"></td><td><pre>post 异步请求 json 传参</pre></td></tr><tr><td data-num=\"301\"></td><td><pre></pre></td></tr><tr><td data-num=\"302\"></td><td><pre>通过 response.body ().string () 获取返回的字符串</pre></td></tr><tr><td data-num=\"303\"></td><td><pre></pre></td></tr><tr><td data-num=\"304\"></td><td><pre>异步返回值不能更新 UI，要开启新线程</pre></td></tr><tr><td data-num=\"305\"></td><td><pre></pre></td></tr><tr><td data-num=\"306\"></td><td><pre></pre></td></tr><tr><td data-num=\"307\"></td><td><pre>@param url</pre></td></tr><tr><td data-num=\"308\"></td><td><pre></pre></td></tr><tr><td data-num=\"309\"></td><td><pre>@return</pre></td></tr><tr><td data-num=\"310\"></td><td><pre></pre></td></tr><tr><td data-num=\"311\"></td><td><pre>/public String postAsynRequireJson (String url, Map&lt;String, String> params, final MyDataCallBack myDataCallBack) &#123;</pre></td></tr><tr><td data-num=\"312\"></td><td><pre>  if (params  null) &#123;</pre></td></tr><tr><td data-num=\"313\"></td><td><pre>  params = new HashMap&amp;lt;&amp;gt;();</pre></td></tr><tr><td data-num=\"314\"></td><td><pre>  &#125;  // 将 map 转换成 json, 需要引入 Gson 包  String mapToJson = new Gson ().toJson (params);  final String realURL = urlJoint (url, null);  final Request request = buildJsonPostRequest (realURL, mapToJson);  Call call = okHttpClient.newCall (request);  try &#123;</pre></td></tr><tr><td data-num=\"315\"></td><td><pre>  myDataCallBack.onBefore (request);</pre></td></tr><tr><td data-num=\"316\"></td><td><pre>  // 请求加入调度</pre></td></tr><tr><td data-num=\"317\"></td><td><pre>  call.enqueue (new Callback () &#123;</pre></td></tr><tr><td data-num=\"318\"></td><td><pre></pre></td></tr><tr><td data-num=\"319\"></td><td><pre>      @Override</pre></td></tr><tr><td data-num=\"320\"></td><td><pre>      public void onFailure (Call call, IOException e) &#123;</pre></td></tr><tr><td data-num=\"321\"></td><td><pre>          myDataCallBack.requestFailure (request, e);</pre></td></tr><tr><td data-num=\"322\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"323\"></td><td><pre></pre></td></tr><tr><td data-num=\"324\"></td><td><pre>      @Override</pre></td></tr><tr><td data-num=\"325\"></td><td><pre>      public void onResponse (Call call, Response response) throws IOException &#123;</pre></td></tr><tr><td data-num=\"326\"></td><td><pre>          responseStrGETAsyn = response.body ().string ();// 此处也可以解析为 byte [],Reader,InputStream</pre></td></tr><tr><td data-num=\"327\"></td><td><pre>          try &#123;</pre></td></tr><tr><td data-num=\"328\"></td><td><pre>              myDataCallBack.requestSuccess (responseStrGETAsyn);</pre></td></tr><tr><td data-num=\"329\"></td><td><pre></pre></td></tr><tr><td data-num=\"330\"></td><td><pre>          &#125; catch (Exception e) &#123;</pre></td></tr><tr><td data-num=\"331\"></td><td><pre>              e.printStackTrace ();</pre></td></tr><tr><td data-num=\"332\"></td><td><pre>              Logger.e (&amp;quot;POST 异步请求为 String 解析异常失败 & amp;quot; + e.toString ());</pre></td></tr><tr><td data-num=\"333\"></td><td><pre>          &#125;</pre></td></tr><tr><td data-num=\"334\"></td><td><pre></pre></td></tr><tr><td data-num=\"335\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"336\"></td><td><pre>  &#125;);</pre></td></tr><tr><td data-num=\"337\"></td><td><pre></pre></td></tr><tr><td data-num=\"338\"></td><td><pre>  myDataCallBack.onAfter ();</pre></td></tr><tr><td data-num=\"339\"></td><td><pre>  &#125; catch (Exception e) &#123;</pre></td></tr><tr><td data-num=\"340\"></td><td><pre>  Logger.e (&amp;quot;POST 异步请求解析为 String 异常 & amp;quot; + e.toString ());</pre></td></tr><tr><td data-num=\"341\"></td><td><pre>  e.printStackTrace ();</pre></td></tr><tr><td data-num=\"342\"></td><td><pre>  &#125;  return responseStrGETAsyn;&#125;</pre></td></tr><tr><td data-num=\"343\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"344\"></td><td><pre></pre></td></tr><tr><td data-num=\"345\"></td><td><pre>Json_POST 请求参数</pre></td></tr><tr><td data-num=\"346\"></td><td><pre></pre></td></tr><tr><td data-num=\"347\"></td><td><pre></pre></td></tr><tr><td data-num=\"348\"></td><td><pre>@param url  url</pre></td></tr><tr><td data-num=\"349\"></td><td><pre></pre></td></tr><tr><td data-num=\"350\"></td><td><pre>@param json json</pre></td></tr><tr><td data-num=\"351\"></td><td><pre></pre></td></tr><tr><td data-num=\"352\"></td><td><pre>@return requestBody</pre></td></tr><tr><td data-num=\"353\"></td><td><pre></pre></td></tr><tr><td data-num=\"354\"></td><td><pre>/private Request buildJsonPostRequest (String url, String json) &#123;//        RequestBody requestBody = RequestBody.create (MediaType.parse (\"application/json; charset=utf-8\"), json);  RequestBody requestBody = RequestBody.create (JSON, json);  return new Request.Builder ().url (url).post (requestBody).build ();&#125;</pre></td></tr><tr><td data-num=\"355\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"356\"></td><td><pre></pre></td></tr><tr><td data-num=\"357\"></td><td><pre>String_POST 请求参数</pre></td></tr><tr><td data-num=\"358\"></td><td><pre></pre></td></tr><tr><td data-num=\"359\"></td><td><pre></pre></td></tr><tr><td data-num=\"360\"></td><td><pre>@param url  url</pre></td></tr><tr><td data-num=\"361\"></td><td><pre></pre></td></tr><tr><td data-num=\"362\"></td><td><pre>@param json json</pre></td></tr><tr><td data-num=\"363\"></td><td><pre></pre></td></tr><tr><td data-num=\"364\"></td><td><pre>@return requestBody</pre></td></tr><tr><td data-num=\"365\"></td><td><pre></pre></td></tr><tr><td data-num=\"366\"></td><td><pre>/private Request buildStringPostRequest (String url, String json) &#123;  RequestBody requestBody = RequestBody.create (MEDIA_TYPE_MARKDOWN, json);  return new Request.Builder ().url (url).post (requestBody).build ();&#125;</pre></td></tr><tr><td data-num=\"367\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"368\"></td><td><pre></pre></td></tr><tr><td data-num=\"369\"></td><td><pre>@param url    实际 URL 的 path</pre></td></tr><tr><td data-num=\"370\"></td><td><pre></pre></td></tr><tr><td data-num=\"371\"></td><td><pre>@param params</pre></td></tr><tr><td data-num=\"372\"></td><td><pre></pre></td></tr><tr><td data-num=\"373\"></td><td><pre>@return</pre></td></tr><tr><td data-num=\"374\"></td><td><pre></pre></td></tr><tr><td data-num=\"375\"></td><td><pre>/private static String urlJoint (String url, Map&lt;String, String> params) &#123;  StringBuilder realURL = new StringBuilder (Constant.URL);  realURL = realURL.append (url);  boolean isFirst = true;  if (params  null) &#123;</pre></td></tr><tr><td data-num=\"376\"></td><td><pre>  params = new HashMap&amp;lt;&amp;gt;();</pre></td></tr><tr><td data-num=\"377\"></td><td><pre>  &#125; else &#123;</pre></td></tr><tr><td data-num=\"378\"></td><td><pre>  Set&amp;lt;Map.Entry&amp;lt;String, String&amp;gt;&amp;gt; entrySet = params.entrySet ();</pre></td></tr><tr><td data-num=\"379\"></td><td><pre>  for (Map.Entry&amp;lt;String, String&amp;gt; entry : entrySet) &#123;</pre></td></tr><tr><td data-num=\"380\"></td><td><pre>      if (isFirst &amp;amp;&amp;amp; !url.contains (&amp;quot;?&amp;quot;)) &#123;</pre></td></tr><tr><td data-num=\"381\"></td><td><pre>          isFirst = false;</pre></td></tr><tr><td data-num=\"382\"></td><td><pre>          realURL.append (&amp;quot;?&amp;quot;);</pre></td></tr><tr><td data-num=\"383\"></td><td><pre>      &#125; else &#123;</pre></td></tr><tr><td data-num=\"384\"></td><td><pre>          realURL.append (&amp;quot;&amp;amp;&amp;quot;);</pre></td></tr><tr><td data-num=\"385\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"386\"></td><td><pre>      realURL.append (entry.getKey ());</pre></td></tr><tr><td data-num=\"387\"></td><td><pre>      realURL.append (&amp;quot;=&amp;quot;);</pre></td></tr><tr><td data-num=\"388\"></td><td><pre>      if (entry.getValue ()  null) &#123;</pre></td></tr><tr><td data-num=\"389\"></td><td><pre>          realURL.append (&amp;quot; &amp;quot;);</pre></td></tr><tr><td data-num=\"390\"></td><td><pre>      &#125; else &#123;</pre></td></tr><tr><td data-num=\"391\"></td><td><pre>          realURL.append (entry.getValue ());</pre></td></tr><tr><td data-num=\"392\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"393\"></td><td><pre></pre></td></tr><tr><td data-num=\"394\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"395\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"396\"></td><td><pre>  return realURL.toString ();&#125;</pre></td></tr><tr><td data-num=\"397\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"398\"></td><td><pre></pre></td></tr><tr><td data-num=\"399\"></td><td><pre>基于 http 的文件上传（传入文件名和 key）</pre></td></tr><tr><td data-num=\"400\"></td><td><pre></pre></td></tr><tr><td data-num=\"401\"></td><td><pre>通过 addFormDataPart</pre></td></tr><tr><td data-num=\"402\"></td><td><pre></pre></td></tr><tr><td data-num=\"403\"></td><td><pre></pre></td></tr><tr><td data-num=\"404\"></td><td><pre>@param url            URL 的 Path 部分</pre></td></tr><tr><td data-num=\"405\"></td><td><pre></pre></td></tr><tr><td data-num=\"406\"></td><td><pre>@param myDataCallBack 自定义回调接口</pre></td></tr><tr><td data-num=\"407\"></td><td><pre></pre></td></tr><tr><td data-num=\"408\"></td><td><pre>将 file 作为请求体传入到服务端.</pre></td></tr><tr><td data-num=\"409\"></td><td><pre></pre></td></tr><tr><td data-num=\"410\"></td><td><pre>@param fileKey        文件传入服务器的键 \"image\"</pre></td></tr><tr><td data-num=\"411\"></td><td><pre></pre></td></tr><tr><td data-num=\"412\"></td><td><pre>@fileName: \"pic.png\"</pre></td></tr><tr><td data-num=\"413\"></td><td><pre></pre></td></tr><tr><td data-num=\"414\"></td><td><pre>/private void upLoadMultiFileSimple (String url, String fileName, String fileKey, final MyDataCallBack myDataCallBack) &#123;  File file = new File (Environment.getExternalStorageDirectory (), fileName);  RequestBody fileBody = RequestBody.create (MediaType.parse (\"application/octet-stream\"), file);  RequestBody requestBody = new MultipartBody.Builder ()</pre></td></tr><tr><td data-num=\"415\"></td><td><pre>      .setType (MultipartBody.FORM)</pre></td></tr><tr><td data-num=\"416\"></td><td><pre>      .addFormDataPart (fileKey, fileName, fileBody)</pre></td></tr><tr><td data-num=\"417\"></td><td><pre>      .build ();</pre></td></tr><tr><td data-num=\"418\"></td><td><pre>  final String realURL = urlJoint (url, null);  final Request request = new Request.Builder ()</pre></td></tr><tr><td data-num=\"419\"></td><td><pre>      .url (realURL)</pre></td></tr><tr><td data-num=\"420\"></td><td><pre>      .post (requestBody)</pre></td></tr><tr><td data-num=\"421\"></td><td><pre>      .build ();</pre></td></tr><tr><td data-num=\"422\"></td><td><pre>  Call call = okHttpClient.newCall (request);  try &#123;</pre></td></tr><tr><td data-num=\"423\"></td><td><pre>  myDataCallBack.onBefore (request);</pre></td></tr><tr><td data-num=\"424\"></td><td><pre>  // 请求加入调度</pre></td></tr><tr><td data-num=\"425\"></td><td><pre>  call.enqueue (new Callback () &#123;</pre></td></tr><tr><td data-num=\"426\"></td><td><pre></pre></td></tr><tr><td data-num=\"427\"></td><td><pre>      @Override</pre></td></tr><tr><td data-num=\"428\"></td><td><pre>      public void onFailure (Call call, IOException e) &#123;</pre></td></tr><tr><td data-num=\"429\"></td><td><pre>          myDataCallBack.requestFailure (request, e);</pre></td></tr><tr><td data-num=\"430\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"431\"></td><td><pre></pre></td></tr><tr><td data-num=\"432\"></td><td><pre>      @Override</pre></td></tr><tr><td data-num=\"433\"></td><td><pre>      public void onResponse (Call call, Response response) throws IOException &#123;</pre></td></tr><tr><td data-num=\"434\"></td><td><pre>          try &#123;</pre></td></tr><tr><td data-num=\"435\"></td><td><pre>              myDataCallBack.requestSuccess (responseStrGETAsyn);</pre></td></tr><tr><td data-num=\"436\"></td><td><pre></pre></td></tr><tr><td data-num=\"437\"></td><td><pre>          &#125; catch (Exception e) &#123;</pre></td></tr><tr><td data-num=\"438\"></td><td><pre>              e.printStackTrace ();</pre></td></tr><tr><td data-num=\"439\"></td><td><pre>              Logger.e (&amp;quot;POST 异步文件上传失败 & amp;quot; + e.toString ());</pre></td></tr><tr><td data-num=\"440\"></td><td><pre>          &#125;</pre></td></tr><tr><td data-num=\"441\"></td><td><pre></pre></td></tr><tr><td data-num=\"442\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"443\"></td><td><pre>  &#125;);</pre></td></tr><tr><td data-num=\"444\"></td><td><pre></pre></td></tr><tr><td data-num=\"445\"></td><td><pre>  myDataCallBack.onAfter ();</pre></td></tr><tr><td data-num=\"446\"></td><td><pre>  &#125; catch (Exception e) &#123;</pre></td></tr><tr><td data-num=\"447\"></td><td><pre>  Logger.e (&amp;quot;POST 异步文件上传异常 & amp;quot; + e.toString ());</pre></td></tr><tr><td data-num=\"448\"></td><td><pre>  e.printStackTrace ();</pre></td></tr><tr><td data-num=\"449\"></td><td><pre>  &#125;&#125;</pre></td></tr><tr><td data-num=\"450\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"451\"></td><td><pre></pre></td></tr><tr><td data-num=\"452\"></td><td><pre>基于 http 的文件上传（传入文件数组和 key）混合参数和文件请求</pre></td></tr><tr><td data-num=\"453\"></td><td><pre></pre></td></tr><tr><td data-num=\"454\"></td><td><pre>通过 addFormDataPart 可以添加多个上传的文件</pre></td></tr><tr><td data-num=\"455\"></td><td><pre></pre></td></tr><tr><td data-num=\"456\"></td><td><pre></pre></td></tr><tr><td data-num=\"457\"></td><td><pre>@param url            URL 的 Path 部分</pre></td></tr><tr><td data-num=\"458\"></td><td><pre></pre></td></tr><tr><td data-num=\"459\"></td><td><pre>@param myDataCallBack 自定义回调接口</pre></td></tr><tr><td data-num=\"460\"></td><td><pre></pre></td></tr><tr><td data-num=\"461\"></td><td><pre>将 file 作为请求体传入到服务端.</pre></td></tr><tr><td data-num=\"462\"></td><td><pre></pre></td></tr><tr><td data-num=\"463\"></td><td><pre>@param files          上传的文件</pre></td></tr><tr><td data-num=\"464\"></td><td><pre></pre></td></tr><tr><td data-num=\"465\"></td><td><pre>@param fileKeys       上传的文件 key 集合</pre></td></tr><tr><td data-num=\"466\"></td><td><pre></pre></td></tr><tr><td data-num=\"467\"></td><td><pre>/private void upLoadMultiFile (String url, File [] files, String [] fileKeys, Map&lt;String, String> params, final MyDataCallBack myDataCallBack) &#123;  if (params  null) &#123;</pre></td></tr><tr><td data-num=\"468\"></td><td><pre>  params = new HashMap&amp;lt;&amp;gt;();</pre></td></tr><tr><td data-num=\"469\"></td><td><pre>  &#125;  final String realURL = urlJoint (url, null);  FormBody.Builder builder = new FormBody.Builder ();  addMapParmsToFromBody (params, builder);  RequestBody requestBody = builder.build ();  MultipartBody.Builder multipartBody = new MultipartBody.Builder ();  multipartBody.setType (MultipartBody.ALTERNATIVE)</pre></td></tr><tr><td data-num=\"470\"></td><td><pre>      .addPart (requestBody);</pre></td></tr><tr><td data-num=\"471\"></td><td><pre>  if (files != null) &#123;</pre></td></tr><tr><td data-num=\"472\"></td><td><pre>  RequestBody fileBody = null;</pre></td></tr><tr><td data-num=\"473\"></td><td><pre>  for (int i = 0; i &amp;lt; files.length; i++) &#123;</pre></td></tr><tr><td data-num=\"474\"></td><td><pre>      File file = files [i];</pre></td></tr><tr><td data-num=\"475\"></td><td><pre>      String fileName = file.getName ();</pre></td></tr><tr><td data-num=\"476\"></td><td><pre>      fileBody = RequestBody.create (MediaType.parse (guessMimeType (fileName)), file);</pre></td></tr><tr><td data-num=\"477\"></td><td><pre>      //TODO 根据文件名设置 contentType</pre></td></tr><tr><td data-num=\"478\"></td><td><pre>      multipartBody.addPart (Headers.of (&amp;quot;Content-Disposition&amp;quot;,</pre></td></tr><tr><td data-num=\"479\"></td><td><pre>              &amp;quot;form-data; name=\\&amp;quot;&amp;quot; + fileKeys [i] + &amp;quot;\\&amp;quot;; filename=\\&amp;quot;&amp;quot; + fileName + &amp;quot;\\&amp;quot;&amp;quot;),</pre></td></tr><tr><td data-num=\"480\"></td><td><pre>              fileBody);</pre></td></tr><tr><td data-num=\"481\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"482\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"483\"></td><td><pre>  final Request request = new Request.Builder ()</pre></td></tr><tr><td data-num=\"484\"></td><td><pre>      .url (realURL)</pre></td></tr><tr><td data-num=\"485\"></td><td><pre>      .post (multipartBody.build ())</pre></td></tr><tr><td data-num=\"486\"></td><td><pre>      .build ();</pre></td></tr><tr><td data-num=\"487\"></td><td><pre>  Call call = okHttpClient.newCall (request);  try &#123;</pre></td></tr><tr><td data-num=\"488\"></td><td><pre>  myDataCallBack.onBefore (request);</pre></td></tr><tr><td data-num=\"489\"></td><td><pre>  // 请求加入调度</pre></td></tr><tr><td data-num=\"490\"></td><td><pre>  call.enqueue (new Callback () &#123;</pre></td></tr><tr><td data-num=\"491\"></td><td><pre></pre></td></tr><tr><td data-num=\"492\"></td><td><pre>      @Override</pre></td></tr><tr><td data-num=\"493\"></td><td><pre>      public void onFailure (Call call, IOException e) &#123;</pre></td></tr><tr><td data-num=\"494\"></td><td><pre>          myDataCallBack.requestFailure (call.request (), e);</pre></td></tr><tr><td data-num=\"495\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"496\"></td><td><pre></pre></td></tr><tr><td data-num=\"497\"></td><td><pre>      @Override</pre></td></tr><tr><td data-num=\"498\"></td><td><pre>      public void onResponse (Call call, Response response)  &#123;</pre></td></tr><tr><td data-num=\"499\"></td><td><pre>          try &#123;</pre></td></tr><tr><td data-num=\"500\"></td><td><pre>              myDataCallBack.requestSuccess (response.body ().string ());</pre></td></tr><tr><td data-num=\"501\"></td><td><pre></pre></td></tr><tr><td data-num=\"502\"></td><td><pre>          &#125; catch (Exception e) &#123;</pre></td></tr><tr><td data-num=\"503\"></td><td><pre>              e.printStackTrace ();</pre></td></tr><tr><td data-num=\"504\"></td><td><pre>              Logger.e (&amp;quot;POST 异步文件上传失败 & amp;quot; + e.toString ());</pre></td></tr><tr><td data-num=\"505\"></td><td><pre>          &#125;</pre></td></tr><tr><td data-num=\"506\"></td><td><pre></pre></td></tr><tr><td data-num=\"507\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"508\"></td><td><pre>  &#125;);</pre></td></tr><tr><td data-num=\"509\"></td><td><pre></pre></td></tr><tr><td data-num=\"510\"></td><td><pre>  myDataCallBack.onAfter ();</pre></td></tr><tr><td data-num=\"511\"></td><td><pre>  &#125; catch (Exception e) &#123;</pre></td></tr><tr><td data-num=\"512\"></td><td><pre>  Logger.e (&amp;quot;POST 异步文件上传异常 & amp;quot; + e.toString ());</pre></td></tr><tr><td data-num=\"513\"></td><td><pre>  e.printStackTrace ();</pre></td></tr><tr><td data-num=\"514\"></td><td><pre>  &#125;&#125;</pre></td></tr><tr><td data-num=\"515\"></td><td><pre>private String guessMimeType (String fileName) &#123;  FileNameMap fileNameMap = URLConnection.getFileNameMap ();  String contentTypeFor = fileNameMap.getContentTypeFor (fileName);  if (contentTypeFor == null) &#123;</pre></td></tr><tr><td data-num=\"516\"></td><td><pre>  contentTypeFor = &amp;quot;application/octet-stream&amp;quot;;</pre></td></tr><tr><td data-num=\"517\"></td><td><pre>  &#125;  return contentTypeFor;</pre></td></tr><tr><td data-num=\"518\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"519\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"520\"></td><td><pre></pre></td></tr><tr><td data-num=\"521\"></td><td><pre>文件下载</pre></td></tr><tr><td data-num=\"522\"></td><td><pre></pre></td></tr><tr><td data-num=\"523\"></td><td><pre>@param url path 路径</pre></td></tr><tr><td data-num=\"524\"></td><td><pre></pre></td></tr><tr><td data-num=\"525\"></td><td><pre>@param destFileDir 本地存储的文件夹路径</pre></td></tr><tr><td data-num=\"526\"></td><td><pre></pre></td></tr><tr><td data-num=\"527\"></td><td><pre>@param myDataCallBack 自定义回调接口</pre></td></tr><tr><td data-num=\"528\"></td><td><pre></pre></td></tr><tr><td data-num=\"529\"></td><td><pre>/private void downLoadFileAsyn (final String url, final String destFileDir, final MyDataCallBack myDataCallBack)&#123;  String realURL=urlJoint (url,null);  Request request=new Request.Builder ()</pre></td></tr><tr><td data-num=\"530\"></td><td><pre>      .url (realURL)</pre></td></tr><tr><td data-num=\"531\"></td><td><pre>      .build ();</pre></td></tr><tr><td data-num=\"532\"></td><td><pre>  Call call=okHttpClient.newCall (request);  call.enqueue (new Callback () &#123;</pre></td></tr><tr><td data-num=\"533\"></td><td><pre>  @Override</pre></td></tr><tr><td data-num=\"534\"></td><td><pre>  public void onFailure (Call call, IOException e) &#123;</pre></td></tr><tr><td data-num=\"535\"></td><td><pre>      myDataCallBack.requestFailure (call.request (),e);</pre></td></tr><tr><td data-num=\"536\"></td><td><pre></pre></td></tr><tr><td data-num=\"537\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"538\"></td><td><pre></pre></td></tr><tr><td data-num=\"539\"></td><td><pre>  @Override</pre></td></tr><tr><td data-num=\"540\"></td><td><pre>  public void onResponse (Call call, Response response) &#123;</pre></td></tr><tr><td data-num=\"541\"></td><td><pre>      InputStream is = null;</pre></td></tr><tr><td data-num=\"542\"></td><td><pre>      byte [] buf = new byte [2048];</pre></td></tr><tr><td data-num=\"543\"></td><td><pre>      int len = 0;</pre></td></tr><tr><td data-num=\"544\"></td><td><pre>      FileOutputStream fos = null;</pre></td></tr><tr><td data-num=\"545\"></td><td><pre>      is = response.body ().byteStream ();</pre></td></tr><tr><td data-num=\"546\"></td><td><pre>      File file = new File (destFileDir, getFileName (url));</pre></td></tr><tr><td data-num=\"547\"></td><td><pre>      try &#123;</pre></td></tr><tr><td data-num=\"548\"></td><td><pre>          fos = new FileOutputStream (file);</pre></td></tr><tr><td data-num=\"549\"></td><td><pre>          while ((len = is.read (buf)) != -1)</pre></td></tr><tr><td data-num=\"550\"></td><td><pre>          &#123;</pre></td></tr><tr><td data-num=\"551\"></td><td><pre>              fos.write (buf, 0, len);</pre></td></tr><tr><td data-num=\"552\"></td><td><pre>          &#125;</pre></td></tr><tr><td data-num=\"553\"></td><td><pre>          fos.flush ();</pre></td></tr><tr><td data-num=\"554\"></td><td><pre>      &#125; catch (IOException e) &#123;</pre></td></tr><tr><td data-num=\"555\"></td><td><pre>          Logger.e (&amp;quot; 文件下载异常：&amp;quot;,e.getMessage ());</pre></td></tr><tr><td data-num=\"556\"></td><td><pre>          e.printStackTrace ();</pre></td></tr><tr><td data-num=\"557\"></td><td><pre>      &#125; finally &#123;</pre></td></tr><tr><td data-num=\"558\"></td><td><pre>          if (is != null) &#123;</pre></td></tr><tr><td data-num=\"559\"></td><td><pre>              try &#123;</pre></td></tr><tr><td data-num=\"560\"></td><td><pre>                  is.close ();</pre></td></tr><tr><td data-num=\"561\"></td><td><pre>              &#125; catch (IOException e) &#123;</pre></td></tr><tr><td data-num=\"562\"></td><td><pre>                  Logger.e (&amp;quot; 文件流关闭异常：&amp;quot;,e.getMessage ());</pre></td></tr><tr><td data-num=\"563\"></td><td><pre>                  e.printStackTrace ();</pre></td></tr><tr><td data-num=\"564\"></td><td><pre>              &#125;</pre></td></tr><tr><td data-num=\"565\"></td><td><pre>          &#125;</pre></td></tr><tr><td data-num=\"566\"></td><td><pre>          if (fos != null) &#123;</pre></td></tr><tr><td data-num=\"567\"></td><td><pre>              try &#123;</pre></td></tr><tr><td data-num=\"568\"></td><td><pre>                  fos.close ();</pre></td></tr><tr><td data-num=\"569\"></td><td><pre>              &#125; catch (IOException e) &#123;</pre></td></tr><tr><td data-num=\"570\"></td><td><pre>                  Logger.e (&amp;quot; 文件流关闭异常：&amp;quot;,e.getMessage ());</pre></td></tr><tr><td data-num=\"571\"></td><td><pre>                  e.printStackTrace ();</pre></td></tr><tr><td data-num=\"572\"></td><td><pre>              &#125;</pre></td></tr><tr><td data-num=\"573\"></td><td><pre>          &#125;</pre></td></tr><tr><td data-num=\"574\"></td><td><pre></pre></td></tr><tr><td data-num=\"575\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"576\"></td><td><pre></pre></td></tr><tr><td data-num=\"577\"></td><td><pre>      // 如果下载文件成功，第一个参数为文件的绝对路径</pre></td></tr><tr><td data-num=\"578\"></td><td><pre>      sendSuccessResultCallback (file.getAbsolutePath (), myDataCallBack);</pre></td></tr><tr><td data-num=\"579\"></td><td><pre></pre></td></tr><tr><td data-num=\"580\"></td><td><pre>      myDataCallBack.requestSuccess (response.body ().toString ());</pre></td></tr><tr><td data-num=\"581\"></td><td><pre></pre></td></tr><tr><td data-num=\"582\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"583\"></td><td><pre>  &#125;);&#125;</pre></td></tr><tr><td data-num=\"584\"></td><td><pre>private String getFileName (String url) &#123;  int separatorIndex = url.lastIndexOf (\"/\");  return (separatorIndex &lt; 0) ? url : url.substring (separatorIndex + 1, url.length ());</pre></td></tr><tr><td data-num=\"585\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"586\"></td><td><pre>private void sendSuccessResultCallback (final String absolutePath, final MyDataCallBack myDataCallBack) &#123;  ThreadPoolUtil.execute (new Runnable () &#123;</pre></td></tr><tr><td data-num=\"587\"></td><td><pre>  @Override</pre></td></tr><tr><td data-num=\"588\"></td><td><pre>  public void run () &#123;</pre></td></tr><tr><td data-num=\"589\"></td><td><pre>      if (myDataCallBack!=null)&#123;</pre></td></tr><tr><td data-num=\"590\"></td><td><pre>          myDataCallBack.requestSuccess (absolutePath);</pre></td></tr><tr><td data-num=\"591\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"592\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"593\"></td><td><pre>  &#125;);&#125;</pre></td></tr><tr><td data-num=\"594\"></td><td><pre></pre></td></tr><tr><td data-num=\"595\"></td><td><pre></pre></td></tr><tr><td data-num=\"596\"></td><td><pre></pre></td></tr><tr><td data-num=\"597\"></td><td><pre></pre></td></tr><tr><td data-num=\"598\"></td><td><pre>&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>下载 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vYmxpc3N5YW5nL0h0dHBEZW1v\">demo</span></p>\n</blockquote>\n<hr />\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l0ZnVubnlzaXRlL2FydGljbGUvZGV0YWlscy84MTAwMjEyMD91dG1fbWVkaXVtPWRpc3RyaWJ1dGUucGNfcmVsZXZhbnQubm9uZS10YXNrLWJsb2ctQmxvZ0NvbW1lbmRGcm9tTWFjaGluZUxlYXJuUGFpMi0xLm5vbmVjYXNlJmFtcDtkZXB0aF8xLXV0bV9zb3VyY2U9ZGlzdHJpYnV0ZS5wY19yZWxldmFudC5ub25lLXRhc2stYmxvZy1CbG9nQ29tbWVuZEZyb21NYWNoaW5lTGVhcm5QYWkyLTEubm9uZWNhc2U=\">原文</span></p>\n",
            "tags": [
                "Android"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/f1f34cbd.html",
            "url": "https://isviolet.github.io/p/f1f34cbd.html",
            "title": "IDEA错误 找不到或无法加载主类",
            "date_published": "2021-05-18T13:11:18.867Z",
            "content_html": "<h1 id=\"问题描述\"><a class=\"anchor\" href=\"#问题描述\">#</a> 问题描述</h1>\n<blockquote>\n<p>IDEA 错误：找不到或无法加载主类 com.itmayiedu.springcloud.SpringcloudApplication</p>\n</blockquote>\n<h1 id=\"解决方法\"><a class=\"anchor\" href=\"#解决方法\">#</a> 解决方法</h1>\n<h2 id=\"1-打开顶部菜单run选择edit-configurations\"><a class=\"anchor\" href=\"#1-打开顶部菜单run选择edit-configurations\">#</a> 1. 打开顶部菜单 run, 选择 Edit configurations...</h2>\n<p><img data-src=\"https://i.loli.net/2021/05/18/SU6fXNeHiplaP3T.png\" alt=\"file\" /></p>\n<h2 id=\"2-引入主类包的位置\"><a class=\"anchor\" href=\"#2-引入主类包的位置\">#</a> 2. 引入主类包的位置</h2>\n<p><img data-src=\"https://i.loli.net/2021/05/18/abVoWTNqQG2dyw7.png\" alt=\"file\" /></p>\n",
            "tags": [
                "springboot",
                "bug"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/1e18fa78.html",
            "url": "https://isviolet.github.io/p/1e18fa78.html",
            "title": "SQLException The server time zone value '�й���׼ʱ��' is unrecognized 解决办法",
            "date_published": "2021-05-18T13:10:01.205Z",
            "content_html": "<p><strong>mysql 版本为 8.0</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Exception</span> in thread <span class=\"token string\">\"main\"</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span>SQLException</span><span class=\"token operator\">:</span> <span class=\"token class-name\">The</span> server time zone value <span class=\"token string\">'�й���׼ʱ��'</span> is unrecognized or represents more than one time <span class=\"token class-name\"><span class=\"token namespace\">zone<span class=\"token punctuation\">.</span></span> You</span> must configure either the server or <span class=\"token class-name\">JDBC</span> driver <span class=\"token punctuation\">(</span>via the <span class=\"token string\">'serverTimezone'</span> configuration property<span class=\"token punctuation\">)</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">use</span> a more specifc time zone value <span class=\"token keyword\">if</span> you want <span class=\"token keyword\">to</span> <span class=\"token namespace\">utilize</span> time zone support<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>at <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mysql<span class=\"token punctuation\">.</span>cj<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>exceptions<span class=\"token punctuation\">.</span></span>SQLError</span><span class=\"token punctuation\">.</span><span class=\"token function\">createSQLException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLError</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">129</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>at <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mysql<span class=\"token punctuation\">.</span>cj<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>exceptions<span class=\"token punctuation\">.</span></span>SQLError</span><span class=\"token punctuation\">.</span><span class=\"token function\">createSQLException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLError</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">97</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>at <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mysql<span class=\"token punctuation\">.</span>cj<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>exceptions<span class=\"token punctuation\">.</span></span>SQLError</span><span class=\"token punctuation\">.</span><span class=\"token function\">createSQLException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLError</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">89</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>at <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mysql<span class=\"token punctuation\">.</span>cj<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>exceptions<span class=\"token punctuation\">.</span></span>SQLError</span><span class=\"token punctuation\">.</span><span class=\"token function\">createSQLException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLError</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">63</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>at <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mysql<span class=\"token punctuation\">.</span>cj<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>exceptions<span class=\"token punctuation\">.</span></span>SQLError</span><span class=\"token punctuation\">.</span><span class=\"token function\">createSQLException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLError</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">73</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>at <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mysql<span class=\"token punctuation\">.</span>cj<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>exceptions<span class=\"token punctuation\">.</span></span>SQLExceptionsMapping</span><span class=\"token punctuation\">.</span><span class=\"token function\">translateException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLExceptionsMapping</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">76</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>at <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mysql<span class=\"token punctuation\">.</span>cj<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span></span>ConnectionImpl</span><span class=\"token punctuation\">.</span><span class=\"token function\">createNewIO</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConnectionImpl</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">836</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>at <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mysql<span class=\"token punctuation\">.</span>cj<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span></span>ConnectionImpl</span><span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>init<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConnectionImpl</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">456</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>at <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mysql<span class=\"token punctuation\">.</span>cj<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span></span>ConnectionImpl</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConnectionImpl</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">246</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>at <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mysql<span class=\"token punctuation\">.</span>cj<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span></span>NonRegisteringDriver</span><span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NonRegisteringDriver</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">197</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>at <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mysql<span class=\"token punctuation\">.</span>cj<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span></span>MysqlDataSource</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MysqlDataSource</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">416</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>at <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mysql<span class=\"token punctuation\">.</span>cj<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span></span>MysqlDataSource</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MysqlDataSource</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>at <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mysql<span class=\"token punctuation\">.</span>cj<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span></span>MysqlDataSource</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MysqlDataSource</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">113</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>at test<span class=\"token punctuation\">.</span>jar_test<span class=\"token punctuation\">.</span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span>jar_test<span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">51</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>解决办法：连接数据库时：</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MysqlDataSource</span><span class=\"token punctuation\">)</span> dataSource<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">setURL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc:mysql://127.0.0.1:3306/mysql1?characterEncoding=utf-8&amp;useSSL=true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>修改为：<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MysqlDataSource</span><span class=\"token punctuation\">)</span> dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setURL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc//127.0.0.1:3306/mysql1?serverTimezone=UTC&amp;useSSL=true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "bug",
                "数据库"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/a7d5195f.html",
            "url": "https://isviolet.github.io/p/a7d5195f.html",
            "title": "Swagger-UI 提示Unable to infer base url",
            "date_published": "2021-05-18T13:08:27.876Z",
            "content_html": "<h1 id=\"错误信息为\"><a class=\"anchor\" href=\"#错误信息为\">#</a> 错误信息为：</h1>\n<blockquote>\n<p>Unable to infer base url. This is common when using dynamic servlet registration or when the API is behind an API Gateway. The base url is the root of where all the swagger resources are served. For e.g. if the api is available at <span class=\"exturl\" data-url=\"aHR0cDovL2V4YW1wbGUub3JnL2FwaS92Mi9hcGktZG9jcw==\">http://example.org/api/v2/api-docs</span> then the base url is <span class=\"exturl\" data-url=\"aHR0cDovL2V4YW1wbGUub3JnL2FwaS8=\">http://example.org/api/</span>. Please enter the location manually: <img data-src=\"https://i.loli.net/2021/05/18/8w4eyghRNtvfnjq.png\" alt=\"file\" /></p>\n</blockquote>\n<h1 id=\"解决方案\"><a class=\"anchor\" href=\"#解决方案\">#</a> 解决方案</h1>\n<ol>\n<li>版本问题：2.8 以后的版本很容易出现这类问题。</li>\n<li>在 application 启动类中未定义 @EnableSwagger2 注解</li>\n</ol>\n",
            "tags": [
                "springboot",
                "bug"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/28872309.html",
            "url": "https://isviolet.github.io/p/28872309.html",
            "title": "KRPANO使用方法",
            "date_published": "2021-05-18T13:07:10.688Z",
            "content_html": "<h2 id=\"在使用krpano项目时可能会出现这种情况\"><a class=\"anchor\" href=\"#在使用krpano项目时可能会出现这种情况\">#</a> 在使用 krpano 项目时可能会出现这种情况</h2>\n<p><img data-src=\"https://i.loli.net/2021/05/18/ibsOUDjmAaforBY.png\" alt=\"file\" /></p>\n<blockquote>\n<p>在开发 KRPano 项目时候，每次测试时均需要打开测试服务器，或者上传到空间中才能进行测试，十分不方便。 因此本站提供了免费的 KRPano 测试开发专用浏览器，基于 Min 浏览器（chrome 内核）二次开发，小巧迅速，并可以解决上述的问题。无需开启本地服务器，即可以正常测试浏览 KRPano 项目，并且可以直接打开 tour_editor，方便进行编辑。</p>\n</blockquote>\n<ul>\n<li>KRPano 开发测试专用浏览器具有以下特性：\n<ol>\n<li>基于最新 Chrome 内核，可以使用最新的浏览器特性。</li>\n<li>无需服务器的情况下，可以直接打开 KRPano 制作的网页，以及基于 Flash 的 tour_editor。</li>\n<li>支持调试，可以使用 Chrome 的调试面板。</li>\n<li>支持拖拽测试本地项目。</li>\n</ol>\n</li>\n</ul>\n<p><strong>下载地址：<span class=\"exturl\" data-url=\"aHR0cDovL3Bhbi5iYWlkdS5jb20vcy8xbzhGY0ZGRw==\">http://pan.baidu.com/s/1o8FcFFG</span></strong></p>\n<h2 id=\"使用说明\"><a class=\"anchor\" href=\"#使用说明\">#</a> 使用说明：</h2>\n<ol>\n<li>打开后，软件界面如下。</li>\n</ol>\n<p><img data-src=\"https://i.loli.net/2021/05/18/JI46RTHZ2ohcQV5.png\" alt=\"file\" /></p>\n<ol>\n<li>可以点击标题栏，输入网址或者进行搜索</li>\n</ol>\n<p><img data-src=\"https://i.loli.net/2021/05/18/X8vSFtulrH7JkO2.png\" alt=\"file\" /></p>\n<ol>\n<li>可以在网址中，鼠标右键，点击 Inspect Element，可以进行网页调试，查看调试信息（与 Chrome 调试面板一致）</li>\n</ol>\n<p><img data-src=\"https://i.loli.net/2021/05/18/TCX6kjhoRGxVqSN.png\" alt=\"file\" /></p>\n<p><img data-src=\"https://i.loli.net/2021/05/18/KwXB2ATI7rHy9VN.png\" alt=\"file\" /></p>\n<ol>\n<li>对于本地的 KRPano 项目，可以直接拖动到窗口直接浏览，无需开启服务器。</li>\n</ol>\n<p><img data-src=\"https://i.loli.net/2021/05/18/9Mf4PUomiRygbrp.png\" alt=\"file\" /></p>\n<hr />\n<blockquote>\n<p>本博文发表于：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5rcnBhbm8udGVjaC9hcmNoaXZlcy8zMTE=\">http://www.krpano.tech/archives/311</span> 发布者：屠龙</p>\n</blockquote>\n",
            "tags": []
        },
        {
            "id": "https://isviolet.github.io/p/1899f14b.html",
            "url": "https://isviolet.github.io/p/1899f14b.html",
            "title": "栈的概念及其应用",
            "date_published": "2021-05-18T13:04:47.386Z",
            "content_html": "<h2 id=\"栈的概念及其应用\"><a class=\"anchor\" href=\"#栈的概念及其应用\">#</a> 栈的概念及其应用</h2>\n<ul>\n<li>栈是仅限制在表尾进行插入和删除操作的特殊线性表</li>\n<li>栈中限制操作的表尾端称为 “栈顶”，另一端称为 “栈底”</li>\n<li>栈具有后进先出或先进后出的操作特性</li>\n</ul>\n<p>栈的生活应用：抽纸盒，子弹压入和弹出</p>\n<p>栈的计算机的应用：表达式求值，迷宫求解，函数递归</p>\n<h2 id=\"顺序栈基本操作的实现\"><a class=\"anchor\" href=\"#顺序栈基本操作的实现\">#</a> 顺序栈基本操作的实现</h2>\n<p>栈的顺序存储结构描述：</p>\n<pre><code>typedef struct&#123;\n    SElemType *base;//栈底指针\n    SElemType *top;//栈顶指针\n    int stacksize;\n&#125;SqStack;\n</code></pre>\n<h3 id=\"顺序栈入栈操作\"><a class=\"anchor\" href=\"#顺序栈入栈操作\">#</a> <strong>顺序栈入栈操作</strong></h3>\n<p>分析：将元素 e 插入到顺序栈 S 内，将其成为新的栈顶元素。</p>\n<ul>\n<li>入栈步骤</li>\n</ul>\n<ol>\n<li>检测（判断栈是否满）</li>\n</ol>\n<p>如果 S.top-S.base &gt;= S.stacksize, 则需要用 realloc 函数追加空间</p>\n<ol start=\"2\">\n<li>压入（将 e 压入到栈顶指针所指示的存储单元）</li>\n</ol>\n<p>*S.top = e;</p>\n<ol start=\"3\">\n<li>修正栈顶指针（栈顶指针后移一位）</li>\n</ol>\n<p>S.top = S.top+1;</p>\n<ul>\n<li>时间复杂度为 O (1)</li>\n</ul>\n<h3 id=\"顺序栈出栈操作\"><a class=\"anchor\" href=\"#顺序栈出栈操作\">#</a> <strong>顺序栈出栈操作</strong></h3>\n<p>分析：当栈非空时，删除栈顶元素，并返回该元素</p>\n<ul>\n<li>出栈步骤</li>\n</ul>\n<ol>\n<li>检测（判断栈是否满）</li>\n</ol>\n<p>若 S.top S.base，则结束操作</p>\n<ol start=\"2\">\n<li>将栈顶指针前移一位</li>\n</ol>\n<p>S.top = S.top -1;</p>\n<ol start=\"3\">\n<li>读取到被删的栈顶元素并存入 e 中</li>\n</ol>\n<p>e = *S.top;</p>\n<h2 id=\"链栈基本操作的实现\"><a class=\"anchor\" href=\"#链栈基本操作的实现\">#</a> 链栈基本操作的实现</h2>\n<h3 id=\"链栈入栈操作的实现\"><a class=\"anchor\" href=\"#链栈入栈操作的实现\">#</a> <strong>链栈入栈操作的实现</strong></h3>\n<p>分析：将元素 e 插入到链栈中，使其成为新的栈顶元素</p>\n<ol>\n<li>确定插入位置</li>\n</ol>\n<p>插入到 S 指针所指示的结点前面</p>\n<ol start=\"2\">\n<li>产生待插入的新结点</li>\n</ol>\n<p>p = (LinkList)malloc(sizeof(SNode));</p>\n<p>p-&gt;data = e;</p>\n<ol start=\"3\">\n<li>修改链指针（使新结点链入链表的指定位置）</li>\n</ol>\n<p>p-&gt;next = S;</p>\n<p>S = p;</p>\n<h3 id=\"链栈出栈操作的实现\"><a class=\"anchor\" href=\"#链栈出栈操作的实现\">#</a> <strong>链栈出栈操作的实现</strong></h3>\n<p>分析： 当栈非空时，删除栈顶元素，并返回该元素</p>\n<ol>\n<li>判断链栈是否空</li>\n</ol>\n<p>若 S NULL; 则结束操作</p>\n<ol start=\"2\">\n<li>确定待删结点</li>\n</ol>\n<p>p = S;</p>\n<ol start=\"3\">\n<li>修改链指针，使待删结点从链中脱离出来</li>\n</ol>\n<p>S = p-&gt;next;</p>\n<ol start=\"4\">\n<li>释放空间</li>\n</ol>\n<p>e = p-&gt;data;</p>\n<p>free(p);</p>\n",
            "tags": [
                "栈"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/8d639fd2.html",
            "url": "https://isviolet.github.io/p/8d639fd2.html",
            "title": "编程规约の常量定义",
            "date_published": "2021-05-18T13:02:40.305Z",
            "content_html": "<p>1.【强制】不允许任何魔法值（即未经预先定义的常量）直接出现在代码中。<br />\n反例：String key = &quot;Id#taobao_&quot;+ tradeId;<br />\ncache.put(key, value)</p>\n<p>2.【强制】在 long 或者 Long 赋值时，数值后使用大写的 L，不能是小写的 l，小写容易跟数字 1 混淆，造成误解。<br />\n说明：Long a = 2l; 写的是数字的 21，还是 Long 型的 2?</p>\n<p>3.【推荐】不要使用一个常量类维护所有常量，要按<strong>常量功能</strong>进行归类，分开维护。<br />\n说明：大而全的常量类，杂乱无章，使用查找功能才能定位到修改的常量，不利于理解和维护。<br />\n正例：缓存相关常量放在类 CacheConsts 下；系统配置相关常量放在类 ConfigConsts 下。</p>\n<p>4.【推荐】常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。<br />\n1） 跨应用共享常量：放置在二方库中，通常是 client.jar 中的 constant 目录下。<br />\n2） 应用内共享常量：放置在一方库中，通常是子模块中的 constant 目录下。<br />\n反例：易懂变量也要统一定义成应用内共享常量，两位攻城师在两个类中分别定义了表示 “是” 的变量：<br />\n类 A 中：public static final String YES = &quot;yes&quot;;<br />\n 类 B 中：public static final String YES = &quot;y&quot;;<br />\nA.YES.equals (B.YES)，预期是 true，但实际返回为 false，导致线上问题。<br />\n3） 子工程内部共享常量：即在当前子工程的 constant 目录下。<br />\n4） 包内共享常量：即在当前包下单独的 constant 目录下。<br />\n5） 类内共享常量：直接在类内部 private static final 定义。</p>\n<p>5.【推荐】如果变量值仅在一个固定范围内变化用 enum 类型来定义。<br />\n说明：如果存在名称之外的延伸属性应使用 enum 类型，下面正例中的数字就是延伸信息，表示一年中的第几个季节。<br />\n正例：<br />\npublic enum SeasonEnum {<br />\nSPRING(1), SUMMER(2), AUTUMN(3), WINTER(4);<br />\nprivate int seq;<br />\nSeasonEnum(int seq){<br />\nthis.seq = seq;<br />\n}<br />\n}</p>\n",
            "tags": [
                "JAVA开发手册"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/f50429c.html",
            "url": "https://isviolet.github.io/p/f50429c.html",
            "title": "编程规约の命名风格",
            "date_published": "2021-05-18T13:00:49.598Z",
            "content_html": "<ol>\n<li>【强制】代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。</li>\n</ol>\n<p>反例：_name / <strong>name / <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><mi>a</mi><mi>m</mi><msub><mi>e</mi><mi mathvariant=\"normal\">/</mi></msub><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">name / name_ / name</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1052em;vertical-align:-0.3551999999999999em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">e</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">m</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.34480000000000005em;\"><span style=\"top:-2.5198em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">/</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3551999999999999em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">e</span></span></span></span> / name</strong></p>\n<hr />\n<ol start=\"2\">\n<li>\n<p>【强制】代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。<br />\n说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用。<br />\n正例：alibaba /taobao/youku /hangzhou 等国际通用的名称，可视同英文。<br />\n反例：DaZhePromotion [打折] /getPingfenByName () [评分] /int 某变量 = 3</p>\n</li>\n<li>\n<p>【强制】类名使用 UpperCamelCase 风格，但以下情形例外：DO / BO / DTO / VO / AO /PO/ UID 等。<br />\n正例：MarcoPolo / UserDO / XmlService / TcpUdpDeal / TaPromotion<br />\n 反例：macroPolo / UserDo / XMLService / TCPUDPDeal / TAPromotion</p>\n</li>\n<li>\n<p>【强制】方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。<br />\n正例： localValue /getHttpMessage () /inputUserId</p>\n</li>\n<li>\n<p>【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。<br />\n正例：MAX_STOCK_COUNT<br />\n 反例：MAX_COUNT</p>\n</li>\n<li>\n<p>【强制】抽象类命名使用 Abstract 或 Base 开头；异常类命名使用 Exception 结尾；测试类命名以它要测试的类的名称开始，以 Test 结尾。</p>\n</li>\n<li>\n<p>【强制】类型与中括号紧挨相连来表示数组。<br />\n正例：定义整形数组 int [] arrayDemo;<br />\n 反例：在 main 参数中，使用 String args [] 来定义。</p>\n</li>\n<li>\n<p>【强制】POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误。<br />\n反例：定义为基本数据类型 Boolean isDeleted 的属性，它的方法也是 isDeleted ()，RPC 框架在反向解析的时候，“误以为” 对应的属性名称是 deleted，导致属性获取不到，进而抛出异常。</p>\n</li>\n<li>\n<p>【强制】包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。<br />\n正例：应用工具类包名为 com.alibaba.ai.util、类名为 MessageUtils（此规则参考 spring 的框架结构）</p>\n</li>\n<li>\n<p>【强制】杜绝完全不规范的缩写，避免望文不知义。<br />\n反例：AbstractClass “缩写” 命名成 AbsClass；condition “缩写” 命名成 condi，此类随意缩写严重降低了代码的可阅读性。</p>\n</li>\n<li>\n<p>【推荐】为了达到代码自解释的目标，任何自定义编程元素在命名时，使用尽量完整的单词组合来表达其意。<br />\n正例：在 JDK 中，表达原子更新的类名为：AtomicReferenceFieldUpdater。<br />\n反例：变量 int a 的随意命名方式。</p>\n</li>\n<li>\n<p>【推荐】如果模块、接口、类、方法使用了设计模式，在命名时需体现出具体模式。说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计理念。<br />\n正例：public class OrderFactory;<br />\npublic class LoginProxy;<br />\npublic class ResourceObserver;</p>\n</li>\n<li>\n<p>【推荐】接口类中的方法和属性不要加任何修饰符号（public 也不要加），保持代码的简洁性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。<br />\n正例：接口方法签名 void commit ();<br />\n 接口基础常量 String COMPANY = &quot;alibaba&quot;;<br />\n 反例：接口方法定义 public abstract void f ();<br />\n 说明：JDK8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默认实现。</p>\n</li>\n<li>\n<p>接口和实现类的命名有两套规则：<br />\n1）【强制】对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部的实现类用 Impl 的后缀与接口区别。<br />\n正例：CacheServiceImpl 实现 CacheService 接口。<br />\n2）【推荐】如果是形容能力的接口名称，取对应的形容词为接口名（通常是–able 的形式）。<br />\n正例：AbstractTranslator 实现 Translatable 接口。</p>\n</li>\n<li>\n<p>【参考】枚举类名建议带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。<br />\n说明：枚举其实就是特殊的类，域成员均为常量，且构造方法被默认强制是私有。<br />\n正例：枚举名字为 ProcessStatusEnum 的成员名称：SUCCESS / UNKNOWN_REASON。</p>\n</li>\n<li>\n<p>【参考】各层命名规约：<br />\nA) Service/DAO 层方法命名规约<br />\n 1） 获取单个对象的方法用 get 做前缀。<br />\n2） 获取多个对象的方法用 list 做前缀，复数形式结尾如：listObjects。<br />\n3） 获取统计值的方法用 count 做前缀。<br />\n4） 插入的方法用 save/insert 做前缀。<br />\n5） 删除的方法用 remove/delete 做前缀。<br />\n6） 修改的方法用 update 做前缀。<br />\nB) 领域模型命名规约<br />\n 1） 数据对象：xxxDO，xxx 即为数据表名。<br />\n2） 数据传输对象：xxxDTO，xxx 为业务领域相关的名称。<br />\n3） 展示对象：xxxVO，xxx 一般为网页名称。<br />\n4） POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。</p>\n</li>\n</ol>\n",
            "tags": [
                "JAVA开发手册"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/a9767c1b.html",
            "url": "https://isviolet.github.io/p/a9767c1b.html",
            "title": "坦克大战第一期",
            "date_published": "2021-05-18T12:55:34.202Z",
            "content_html": "<h4 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言：</h4>\n<blockquote>\n<p>最近需要学习 Unity3D，看了些入门的模型材料制作，我试了试，真的就是试试就逝世，有点难啊。所以我果断跳过这一章，直接白嫖网上的资源，开始制作。</p>\n</blockquote>\n<h4 id=\"特别提醒\"><a class=\"anchor\" href=\"#特别提醒\">#</a> 特别提醒：</h4>\n<ul>\n<li>作者使用的是当时最新的版本，如果有同学（可能有人会看吧）前来考古，如果出现问题，本人概不负责 (ಥ_ಥ) ，自己百度。</li>\n<li>本人接下来所有教程非本人原创，我是看了 bilibili 上的 siki 学院学习的，大家可以支持下原作者。</li>\n<li>时间 2021 年 5 月 19 日，很遗憾本文的图片失效了。</li>\n</ul>\n<hr />\n<h2 id=\"1工程的创建及其素材的导入\"><a class=\"anchor\" href=\"#1工程的创建及其素材的导入\">#</a> 1. 工程的创建及其素材的导入</h2>\n<ul>\n<li>\n<p>打开你自己的 unity</p>\n</li>\n<li>\n<p>就像这样，双击（么么哒？）</p>\n</li>\n<li>\n<p>接下来你会看到如下界面，新建一个 2D 工程，命名为 Tank，大功告成。</p>\n</li>\n<li>\n<p>选择适合自己的编辑页面，我的配置如下（右上角 layout 和工程鼠标右键）</p>\n</li>\n<li>\n<p>接下来就是导入素材了</p>\n</li>\n</ul>\n<blockquote>\n<p>老师的资源地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMUVER2kxYWwyaWlDbjh6c1h5R0lNYVE=\">https://pan.baidu.com/s/1EDGi1al2iiCn8zsXyGIMaQ</span></p>\n<p>密码是：ficl</p>\n</blockquote>\n<ul>\n<li>将此文件拖到工程栏下即可进行导入资源</li>\n</ul>\n<h2 id=\"2场景搭建和素材处理\"><a class=\"anchor\" href=\"#2场景搭建和素材处理\">#</a> 2. 场景搭建和素材处理</h2>\n<h3 id=\"场景的搭建\"><a class=\"anchor\" href=\"#场景的搭建\">#</a> 场景的搭建</h3>\n<ul>\n<li>设置 MainCamera 的属性，改善用户体验的主要视角</li>\n</ul>\n<h3 id=\"素材的处理图片的切割就不说明了~\"><a class=\"anchor\" href=\"#素材的处理图片的切割就不说明了~\">#</a> 素材的处理（图片的切割就不说明了～）</h3>\n<ul>\n<li>\n<p>2D 图片的属性（制作 2D 游戏需要设置成 2DUI 类型）</p>\n</li>\n<li>\n<p>注意保存场景名，之后还要创建一个场景，注意保存，不然就都没有了 o (´^｀) o</p>\n</li>\n<li>\n<p>创建一个文件夹 “Scene”，用于保存场景文件</p>\n</li>\n</ul>\n<h2 id=\"3预制体和动画的制作\"><a class=\"anchor\" href=\"#3预制体和动画的制作\">#</a> 3. 预制体和动画的制作</h2>\n<ul>\n<li>剩下的 shield 和 river 用同样的方法制作出来</li>\n</ul>\n<h2 id=\"4控制玩家的移动\"><a class=\"anchor\" href=\"#4控制玩家的移动\">#</a> 4. 控制玩家的移动</h2>\n<ul>\n<li>点击场景中的 Player，在右侧点击 Add Component，添加 new script，命名为 Player。然后使用 vs 打开后输入如下代码</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在 update () 方法中输入代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 控制横向的移动</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">float</span></span> h <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">.</span><span class=\"token function\">GetAxisRaw</span><span class=\"token punctuation\">(</span>Horizontal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">Translate</span><span class=\"token punctuation\">(</span>Vector3<span class=\"token punctuation\">.</span>righthmoveSpeed<span class=\"token operator\">*</span>Time<span class=\"token punctuation\">.</span>deltaTime<span class=\"token punctuation\">,</span>Space<span class=\"token punctuation\">.</span>World<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 控制垂直方向的移动 float v = Input.GetAxisRaw (Vertical);transform.Translate (Vector3.upvmoveSpeed*Time.deltaTime,Space.World);</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 别忘了在类里设置移动速度的值 private float moveSpeed = 3;</span></pre></td></tr></table></figure><ul>\n<li>走到这一步，试试点击上方的运行按钮，然后你就可以在 Game 下看到坦克可以由你控制移动啦</li>\n</ul>\n",
            "tags": [
                "unity3D"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/95c1e261.html",
            "url": "https://isviolet.github.io/p/95c1e261.html",
            "title": "线性表的顺序存储及其实现",
            "date_published": "2021-05-18T12:53:09.277Z",
            "content_html": "<h2 id=\"顺序表的插入操作\"><a class=\"anchor\" href=\"#顺序表的插入操作\">#</a> 顺序表的插入操作</h2>\n<p>主要操作步骤及其实现方法：</p>\n<ul>\n<li>检测（判断参数 i 是否合理及空间是否满）\n<ol>\n<li>若 i&lt;1||i&gt;L.length+1，插入位置不合理，算法结束；</li>\n<li>若 L.length&gt;=L.listsize，则存储空间已满，需增加分配空间</li>\n</ol>\n</li>\n<li>后移（插入位置及之后的所有元素后移一位）</li>\n</ul>\n<pre><code>q = &amp;(L.elem[i-1]); //q指示插入位置\nfor(p = &amp;(L.elem[L.length-1]);p&gt;=q;--p)\n\\*(p+1) = *p; //后移一位\n</code></pre>\n<ul>\n<li>插入（将新元素插入到指定位置上）</li>\n</ul>\n<pre><code>*q = e; //插入e\n</code></pre>\n<ul>\n<li>修正表长（表长加 1）</li>\n</ul>\n<pre><code>++L.length; //表长增1\n</code></pre>\n<h2 id=\"顺序表的删除操作\"><a class=\"anchor\" href=\"#顺序表的删除操作\">#</a> 顺序表的删除操作</h2>\n<p>主要操作步骤及其实现：</p>\n<ul>\n<li>检测（判断参数 i 是否合理）若 i&lt;1||i&gt;L.length，删除位置不合理，算法结束</li>\n<li>前移（删除元素之后的所有元素前移一位）</li>\n</ul>\n<pre><code>p = &amp;(L.elem[i-1]); //p指示删除位置\ne = *p; //用e返回被删除元素的值\nq = &amp;(L.elem[L.length-1]); //p指示表尾位置\nfor(p++; p&gt;=q; --p)\n    *(p+1) = *p; //后移一位\n</code></pre>\n<ul>\n<li>修正表长（表长减 1）</li>\n</ul>\n<pre><code>--L.length; //表长减1\n</code></pre>\n",
            "tags": [
                "线性表"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/9913f71d.html",
            "url": "https://isviolet.github.io/p/9913f71d.html",
            "title": "线性表的存储结构",
            "date_published": "2021-05-18T12:52:08.975Z",
            "content_html": "<h2 id=\"线性表的顺序存储结构\"><a class=\"anchor\" href=\"#线性表的顺序存储结构\">#</a> 线性表的顺序存储结构：</h2>\n<p>是用一组地址连续的存储单元依次存放线性表中的数据元素的存储结构。</p>\n<ul>\n<li>下标为 0 的元素是线性表的起始地址，称为线性表的基地址，n 为表的长度，用 a1 表示</li>\n<li>用顺序存储的线性表就称为顺序表</li>\n</ul>\n<h2 id=\"数据元素的地址计算公式\"><a class=\"anchor\" href=\"#数据元素的地址计算公式\">#</a> 数据元素的地址计算公式：</h2>\n<ul>\n<li>LOC(a[i]) = LOC(a[i-1]) + C</li>\n<li>LOC(a[i]) = LOC(a[1]) + (i-1) * C</li>\n</ul>\n<p>解析：</p>\n<ul>\n<li>a [1] 是线性表的基地址</li>\n<li>(i-1) 表示所求元素的下标 (下标从 0 开始)</li>\n<li>C 代表一个数据元素所占的存储量</li>\n</ul>\n<h2 id=\"线性表的顺序存储结构描述\"><a class=\"anchor\" href=\"#线性表的顺序存储结构描述\">#</a> 线性表的顺序存储结构描述：</h2>\n<ul>\n<li>静态顺序存储结构的描述\n<ul>\n<li>当前定义的表的长度固定</li>\n<li>静态顺序表类型名：SqListtp</li>\n</ul>\n</li>\n</ul>\n<p>代码如下：</p>\n<pre><code>#define MAXLEN 80\ntypedef struct &#123;\n    ElemType elem[MAXLEN];\n    int length; //当前表的长度\n&#125; SqListtp;\n</code></pre>\n<ul>\n<li>动态顺序存储结构的描述\n<ul>\n<li>元素类型是存储空间的基址</li>\n<li>有预分配的空间容量</li>\n</ul>\n</li>\n</ul>\n<p>代码如下：</p>\n<pre><code>typedef struct &#123;\n    ElemType *elem; //存储空间的基址\n    int length; //当前表的长度\n    int listsize;//当前预分配的空间容量\n&#125; SqList;\n</code></pre>\n<ul>\n<li>重要组成要素\n<ol>\n<li>顺序表 L 的基地址：L.elem</li>\n<li>顺序表 L 的长度：L.length</li>\n<li>顺序表 L 的容量：L.listsize</li>\n<li>数据元素 a [i]：L.elem [i-1]</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"线性表的链式存储结构\"><a class=\"anchor\" href=\"#线性表的链式存储结构\">#</a> 线性表的链式存储结构：</h2>\n<ul>\n<li>链式存储中每个节点只含一个指针域，则称为单链表或线性链表</li>\n<li>链式存储中每个节点含多个指针域，则称为多链表\n<ul>\n<li>单链表的存储结构描述：</li>\n</ul>\n</li>\n</ul>\n<p>一个结点：data（数据域），next（指针域）</p>\n<pre><code>typedef struct LNode &#123;\n    ElemType data; //数据域\n    struct LNode *next; //指针域\n&#125;LNode,*LinkList;\n</code></pre>\n<h2 id=\"顺序存储结构的特点\"><a class=\"anchor\" href=\"#顺序存储结构的特点\">#</a> 顺序存储结构的特点：</h2>\n<ul>\n<li>优势\n<ol>\n<li>存储密度高；</li>\n<li>便于随机存储；</li>\n</ol>\n</li>\n<li>劣势\n<ol>\n<li>不便于插入、删除。（会造成大量数据移动）</li>\n<li>需预分配空间充足，造成空间浪费</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"链式存储结构的特点\"><a class=\"anchor\" href=\"#链式存储结构的特点\">#</a> 链式存储结构的特点：</h2>\n<ul>\n<li>优势\n<ol>\n<li>便于插入、删除操作</li>\n<li>能有效利用存储空间</li>\n</ol>\n</li>\n<li>劣势不能随机存取数据元素，只能顺序存取数据元素</li>\n</ul>\n",
            "tags": [
                "线性表"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/6f136d02.html",
            "url": "https://isviolet.github.io/p/6f136d02.html",
            "title": "线性表相关概念",
            "date_published": "2021-05-18T12:51:00.026Z",
            "content_html": "<h2 id=\"线性表的定义\"><a class=\"anchor\" href=\"#线性表的定义\">#</a> 线性表的定义：</h2>\n<p>线性表是由 n (n&gt;=0) 个数据元素（结点）所构成的有限序列。</p>\n<ul>\n<li>第一个元素：开始结点 a1</li>\n<li>最后一个元素：终端结点 an</li>\n<li>数据元素：（a1，a2，a3，…，an），当 n 为 0 时，称为空表</li>\n<li>a (i-1) 是 ai 的直接前趋，a (i+1) 是 ai 的直接后趋</li>\n</ul>\n<h2 id=\"线性表的结构逻辑结构特点\"><a class=\"anchor\" href=\"#线性表的结构逻辑结构特点\">#</a> 线性表的结构（逻辑结构）特点：</h2>\n<ol>\n<li>它由 n (n&gt;=0) 个同类型的元素组成；</li>\n<li>有且仅有一个开始结点 (第一个元素) 和终端结点 (最后 - 个元素) ;</li>\n<li>每个元素除开始结点和终端结点之外，有且仅有一个前驱和一个后继。</li>\n</ol>\n<h2 id=\"线性表的抽象数据类型定义\"><a class=\"anchor\" href=\"#线性表的抽象数据类型定义\">#</a> 线性表的抽象数据类型定义：</h2>\n<ul>\n<li>数据对象 (D)：D= 元素集合；</li>\n<li>数据关系 (S)：R= 相邻关系</li>\n<li>基本操作 (P)：\n<ol>\n<li>初始化操作：initList (&amp;L)</li>\n<li>结构销毁操作：destroyList (&amp;L)</li>\n<li>线性表判空操：listEmpty (L)</li>\n<li>求线性表的长度操作：listLength (L)</li>\n<li>求数据元素的前驱操作：priorElem (L, cur_e, &amp;pre_e);</li>\n<li>求数据元素的后继操作：NextElem (L, cur_e, &amp;next_e)</li>\n<li>取线性表中某个数据元素操作：GetElem (L, i, &amp;e)</li>\n<li>定位 (查找) 操作：LocateElem (L, e, compare ())</li>\n<li>遍历线性表操作：ListTraverse (L, visit ())</li>\n<li>线性表置空操作：ClearList (&amp;L)</li>\n<li>插入操作：ListInsert (&amp;L, i, e)</li>\n<li>删除操作：ListDelete (&amp;L, i, &amp;e)</li>\n</ol>\n</li>\n</ul>\n",
            "tags": [
                "线性表"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/9a241c29.html",
            "url": "https://isviolet.github.io/p/9a241c29.html",
            "title": "wordpress如何修改主题页面背景",
            "date_published": "2021-05-18T12:49:02.742Z",
            "content_html": "<p>关于修改 themes 主题下的 style.css 文件改变页面透明度没反应的问题困扰了我很久，终于在我众里寻他千 “百度” 中找到了答案。</p>\n<hr />\n<p>下面是原作者的所提供的代码：</p>\n<pre><code>/**\n *  WP Enqueue Style\n */\nfunction lawyeria_lite_enqueue_style() &#123;\n    wp_enqueue_style( 'lawyeria_lite_style', get_stylesheet_uri(), array(), '1.0' );\n    wp_enqueue_style( 'lawyeria_lite_fancybox', get_template_directory_uri() . '/css/jquery.fancybox.css', array(), '1.0' );\n&#125;\n</code></pre>\n<p>在 /wp-content/themes/ 你的主题文件 / 目录下找到 functions.php，然后在 functions.php 文件内搜索 wp_enqueue_style ，有几个地方调用了这个方法，其中 wp_enqueue_style ('lawyeria_lite_style', get_stylesheet_uri (), array (), '1.0' ); 是要修改的地方： 将 “1.0” 改成 “2.0” 或更高 。</p>\n<p>不过每次修改都要进行修改有点麻烦，所以原作者又更新了一个新的解决方法，点个赞。</p>\n<pre><code>add_action( 'wp_enqueue_scripts', 'enqueue_child_theme_styles', PHP_INT_MAX);\nfunction enqueue_child_theme_styles() &#123;\n    wp_enqueue_style( 'parent-style', get_template_directory_uri().'/style.css' );\n    wp_enqueue_style( 'child-style', get_stylesheet_uri(), NULL, filemtime( get_stylesheet_directory() . '/style.css' ) );\n&#125;\n</code></pre>\n<p>就这样困扰我很久的问题终于解决了，留下原文章链接： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8zMTFhNTc4NmZjMWQ=\">https://www.jianshu.com/p/311a5786fc1d</span></p>\n<p>希望可以帮助到其他小伙伴～</p>\n",
            "tags": []
        },
        {
            "id": "https://isviolet.github.io/p/996090c3.html",
            "url": "https://isviolet.github.io/p/996090c3.html",
            "title": "坦克大战第二期",
            "date_published": "2021-05-18T12:47:49.740Z",
            "content_html": "<blockquote>\n<p>2D 游戏坦克大战制作第二期如期而至</p>\n</blockquote>\n<h2 id=\"前情回顾\"><a class=\"anchor\" href=\"#前情回顾\">#</a> 前情回顾</h2>\n<blockquote>\n<p>4. 控制玩家的移动<br />\n点击场景中的 Player，在右侧点击 Add Component，添加 new script，命名为 Player。然后使用 vs 打开后输入如下代码</p>\n<p>... ...</p>\n<p>接下来你会看到坦克可以移动了，但是他移动时方向竟然没变化 Σ(ﾟдﾟlll)</p>\n</blockquote>\n<hr />\n<h2 id=\"控制图片的移动切换\"><a class=\"anchor\" href=\"#控制图片的移动切换\">#</a> 控制图片的移动切换</h2>\n<p>没有对 Player 进行图片的设置当然图片也就不会改变了，你切好后的多个图片，需要通过自己的小手在 player 脚本里写好所需要切换图片的代码才行。</p>\n<p>下面简单说明下如何进行编写☟</p>\n<ul>\n<li>通过改变该图片的转向</li>\n<li>改变不同转向图片达到转向的效果</li>\n</ul>\n<h3 id=\"改变图片的转向\"><a class=\"anchor\" href=\"#改变图片的转向\">#</a> 改变图片的转向</h3>\n<p><strong>思路：坦克大战本身是 2D 游戏，但是他依然是有 z 轴的，所以可以改变 z 轴的旋转角度改变图片的显示。</strong></p>\n<p>①渲染器引用</p>\n<pre><code class=\"language-c#\">//设置精灵渲染器 \nprivate SpriteRenderer sr; \n\n//在awake方法中添加语句\nprivate void awake()&#123;//☆脚本下没有awake方法手动添加\n    //得到使用该脚本的预制体的精灵渲染器\n    sr = GetComponent();\n&#125;\n</code></pre>\n<p>②根据 h 和 v 的值，确定图片的转向</p>\n<pre><code class=\"language-c#\">//用于存储上下左右四张图片\nprivate Sprite[] tankSprite; \n\n//h是横轴方向，h=1代表向右,h=-1代表向左\nfloat h = Input.GetAxisRaw(&quot;Horizontal&quot;);\ntransform.Translate(Vector3.right*h*moveSpeed*Time.deltaTime,Space.World);\nif(h&lt;0)&#123;\n    sr.sprite = tankSprite[3];//这里的tankSprite[3]是方向向右的图片\n&#125;else if()&#123;\n    sr.sprite = tankSprite[4];//同理\n&#125;\n\n//v代表垂直方向，与h是相同的操作。\n...\n</code></pre>\n<p>现在试试，发现坦克已经可以根据方向键进行方向的变化了。</p>\n<p>to be continue</p>\n",
            "tags": [
                "unity3D"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/1809fb3.html",
            "url": "https://isviolet.github.io/p/1809fb3.html",
            "title": "Unity3D介绍",
            "date_published": "2021-05-18T12:40:58.817Z",
            "content_html": "<h2 id=\"unity3d定义\"><a class=\"anchor\" href=\"#unity3d定义\">#</a> unity3D 定义</h2>\n<ul>\n<li>用于轻松创建游戏和三维互动内容的开发工具，是一个专业游戏引擎。</li>\n</ul>\n<h2 id=\"游戏\"><a class=\"anchor\" href=\"#游戏\">#</a> 游戏</h2>\n<ul>\n<li>在移动平台，Unity 几乎成为 3D 游戏开发的标准工具，使用他开发的游戏数不胜数。</li>\n<li>2D 游戏：视角完全锁定，二维坐标（如 2048 游戏） <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8yMDQ4LzEzMzgzNTExP2ZyPWFsYWRkaW4=\">https://baike.baidu.com/item/2048/13383511?fr=aladdin</span></li>\n<li>3D 游戏：可以任意变换视角，无锁定。三维坐标（如 CS）</li>\n</ul>\n<h2 id=\"虚拟现实\"><a class=\"anchor\" href=\"#虚拟现实\">#</a> 虚拟现实</h2>\n<ul>\n<li>Virtual Reality</li>\n</ul>\n<p>当今世界前沿科技之一</p>\n<p>利用电脑模拟产生一个三维空间的虚拟世界，可以模拟视觉、听觉、触觉等感官的模拟。使用者通过各种输入设备与虚拟环境中的事物进行交互，有一种身临其境的感觉。</p>\n<ul>\n<li>\n<p>VR 设备</p>\n<ol>\n<li>移动端头显设备\n<ul>\n<li>手机放入即可，便宜方便，但受硬件制约，体验不佳</li>\n</ul>\n</li>\n<li>外接式头戴设备\n<ul>\n<li>连接至 PC，能捕捉肢体动作，有更好性能，但价格过高，硬件要求高</li>\n</ul>\n</li>\n<li>一体式头戴设备\n<ul>\n<li>具备独立的运算，不受设备限制，但目前还不成熟，产品偏少。</li>\n</ul>\n</li>\n<li>Xbox One + Kinect、zSpace ......</li>\n</ol>\n</li>\n<li>\n<p>VR 应用</p>\n<ul>\n<li>军工、科研、游戏、视频、教育、旅游、家装、虚拟试驾、房地产项目展示 ......</li>\n</ul>\n</li>\n<li>\n<p>增强现实 Augmented Reality</p>\n</li>\n</ul>\n<p>通过电脑技术，将虚拟信息应用到真实世界，真实的环境和虚拟的物体实时的叠加到了同一个画面或空间同时存在。</p>\n<ul>\n<li>AR 与 VR 的区别</li>\n</ul>\n<p>VR 看到的场景和人物都是假的，进入虚拟世界。<br />\nAR 看到的是现实世界和计算机虚拟信息的叠加。</p>\n<h2 id=\"游戏引擎\"><a class=\"anchor\" href=\"#游戏引擎\">#</a> 游戏引擎</h2>\n<ul>\n<li>程序的框架，一款游戏最最核心的代码</li>\n<li>包含以下系统：渲染引擎、物理引擎、碰撞检测系统、音效、脚本引擎、动画系统、人工智能、网络引擎、以及场景管理。</li>\n<li>使用游戏引擎，开发者可以重用已有的核心技术，将精力集中在游戏逻辑和设计上，从而简单快速的创建游戏。</li>\n</ul>\n<h2 id=\"unity3d特点\"><a class=\"anchor\" href=\"#unity3d特点\">#</a> Unity3D 特点</h2>\n<ul>\n<li>简单易用（虚幻 4 相对来说对新手不太友好）</li>\n<li>开发效率高</li>\n<li>价格便宜</li>\n<li>新手居多</li>\n<li>23 个平台间自由迁移，出色的部署，完全的覆盖发布平台包括：ios、Android、Windows Phone、Windows、Web、微软 Xbox360、索尼 PS3、任天堂 Wii 等</li>\n</ul>\n<h2 id=\"游戏公司大致分工\"><a class=\"anchor\" href=\"#游戏公司大致分工\">#</a> 游戏公司大致分工</h2>\n<ul>\n<li>策划</li>\n<li>美工</li>\n<li>软件工程师</li>\n<li>测试工程师</li>\n<li>客服等</li>\n</ul>\n",
            "tags": [
                "unity3D"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/40427726.html",
            "url": "https://isviolet.github.io/p/40427726.html",
            "title": "如何将java web项目上线部署到公网",
            "date_published": "2021-05-18T12:39:03.750Z",
            "content_html": "<blockquote>\n<p>关于如何将 java web 上线，部署到公网，让全世界的人都可以访问的问题。小编将作出系列化，完整的流程介绍。</p>\n</blockquote>\n<ol>\n<li>\n<p>在 myeclipse 中开发好项目，打包成 war 格式，不会的同学参考以下 <span class=\"exturl\" data-url=\"aHR0cDovL3poaWRhby5iYWlkdS5jb20vbGlua3VybD1HYjBPVjlwSGlEdEpyOG55alByblNBNjVnNDlJNFRFQW4yTjNwd1hzeHpWc0NhWDBnSjhSUVpIUTJHbURybWRNMGx0b0JkQ1BZRXRUMWlTYXdjZWRjSw==\">http://zhidao.baidu.com/linkurl=Gb0OV9pHiDtJr8nyjPrnSA65g49I4TEAn2N3pwXsxzVsCaX0gJ8RQZHQ2GmDrmdM0ltoBdCPYEtT1iSawcedcK</span></p>\n</li>\n<li>\n<p>购买云服务器，建议去阿里云购买（ecs），教程如下 <span class=\"exturl\" data-url=\"aHR0cDovL2ppbmd5YW4uYmFpZHUuY29tL2FydGljbGUvNGU1YjNlMTk1YWU2OGE5MTkwMWUyNDAyLmh0bWw=\">http://jingyan.baidu.com/article/4e5b3e195ae68a91901e2402.html</span> 以上教程的最后一步远程连接不用看，下面再说远程连接的事，只需买到一个阿里云服务器就行了 注：解释一下什么是云服务器。就是另一台电脑，该电脑永不关机，永不断网。</p>\n</li>\n<li>\n<p>登录你的阿里云服务器，以下是教程 3.1 购买 linux 系统的阿里云服务器：<span class=\"exturl\" data-url=\"aHR0cDovL2ppbmd5YW4uYmFpZHUuY29tL2FydGljbGUvODRiNGY1NjVmM2Q5OTI2MGY3ZGEzMjcxLmh0bWw=\">http://jingyan.baidu.com/article/84b4f565f3d99260f7da3271.html</span> 3.2 购买 windows（win2012 为例）的阿里云服务器：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5pbWFveWUuY29tL2FydGljbGUvYWxpeXVuRUNTLmh0bWwlRUYlQkMlODglRTglQUYlQTUlRTYlOTUlOTklRTclQTglOEIlRTglQUYlQjQlRTclOUElODQlRTYlOTglQUYlRTglQkYlOUMlRTclQTglOEIlRTglQkYlOUUlRTYlOEUlQTUlRTclOUElODQlRTklOTclQUUlRTklQTIlOTglRUYlQkMlOEMlRTQlQkQlODYlRTYlOTglQUYlRTclOTklQkIlRTUlQkQlOTUlRTUlOEMlODUlRTUlOTAlQUIlRTUlOUMlQTglRTUlODYlODUlRUYlQkMlOEMlRTUlOEYlQUYlRTQlQjglOEQlRTclOTAlODYlRTQlQkMlOUElRTUlODklOEQlRTQlQjglQTQlRTQlQjglQUElRTUlOUIlQkUlRUYlQkMlODk=\">http://www.imaoye.com/article/aliyunECS.html（该教程说的是远程连接的问题，但是登录包含在内，可不理会前两个图）</span></p>\n</li>\n<li>\n<p>远程连接（以 windows 为例，因为 windows 相对比较适合新手） <span class=\"exturl\" data-url=\"aHR0cDovL2ppbmd5YW4uYmFpZHUuY29tL2FydGljbGUvY2Q0YzI5NzkxNGJlMWU3NTZlNmU2MGMzLmh0bWw=\">http://jingyan.baidu.com/article/cd4c297914be1e756e6e60c3.html</span></p>\n</li>\n<li>\n<p>配置 java web 环境（以 windows 为例，因为 windows 相对比较适合新手）</p>\n<p>5.1 在你成功连接阿里云服务器后，windows 系统有个图形界面，他已经有一个 ie，你可以下载 jdk，tomcat 和 mysql，然后安装和配置环境变量（安装就不说了，对学 java web 的同学太简单）期间你可能遇到一些问题，比如 ie 跟你电脑的 ie 不一样，服务器的 ie 收到安全的防护，很多东西（链接）都不能下载，这个没办法，只能一个一个试。</p>\n<p>5.2 当然如果想偷懒，可以不下载，直接将你电脑的 jdk，tomcat，mysql 复制粘贴到服务器，没错！这就是远程连接的好处，可以直接操作（小编也不知道为什么）</p>\n<p>5.3 注意：mysql 数据库的数据可以自己再敲一遍，也可以从本地的 mysql 导出来，复制到服务器里面，再导进服务器的 mysql。</p>\n</li>\n<li>\n<p>发布项目</p>\n<p>在你的本地电脑的浏览器打开，输入 http://ip:8080/，其中 http:// 是固定写法，ip 为你买的阿里云服务器的外网 ip，8080 是你 tomcat 的端口号。回车，会看到 tomcat 的界面，其中有个 tomcat Manager 点以下，界面会提示输入你服务器 t 的 omcat 的用户和密码（在安装时会提示创建用户，没创建的卸载重装再创建，一定要有一个用户），输入后进入 tomcat 的另一个界面，点击一个 “浏览” 的按钮 (该界面只有一个中文按钮)，选中第一步的 war 文件，然后点击按钮下的 “Deploy” 按钮，几秒后，界面会刷新。</p>\n<p>刷新后，你可以在任何有网络的电脑输入：<span class=\"exturl\" data-url=\"aHR0cDovL2lwOjgwODAvYXBwbGljYXRpb24v\">http://ip:8080/application/</span>.....（该 url 跟你在开发项目是的 url 是一样的，只是把 localhost 换成服务器的 ip），就可以访问你的项目了。</p>\n</li>\n<li>\n<p>此时，你可以访问，但是访问路径不像人家：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20=\">www.baidu.com</span>，.com/.cn/.net/... 的叫域名，你需要一个域名来代替你的 http://ip:8080/...... 7.1 买域名，还在阿里云买。教程：<span class=\"exturl\" data-url=\"aHR0cDovL2ppbmd5YW4uYmFpZHUuY29tL2FydGljbGUvYWI2OWIyNzBkYzkxNDkyY2E3MTg5ZjAzLmh0bWw=\">http://jingyan.baidu.com/article/ab69b270dc91492ca7189f03.html</span> 7.2 域名备案。教程：<span class=\"exturl\" data-url=\"aHR0cDovL2ppbmd5YW4uYmFpZHUuY29tL2FydGljbGUvOTI1ZjhjYjgxNzZhNDljMGRkZTA1NmM2Lmh0bWw=\">http://jingyan.baidu.com/article/925f8cb8176a49c0dde056c6.html</span> 7.3 域名解析。教程：<span class=\"exturl\" data-url=\"aHR0cDovL2ppbmd5YW4uYmFpZHUuY29tL2FydGljbGUvNjc2NjI5OTczZjk2ZjQ1NGQ1MWI4NDliLmh0bWw=\">http://jingyan.baidu.com/article/676629973f96f454d51b849b.html</span></p>\n</li>\n</ol>\n<p><strong>解析后就玩完了</strong></p>\n<ol>\n<li>至此，你就可以在有网络下访问你的网站（项目）</li>\n</ol>\n",
            "tags": [
                "JAVAWEB"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/7137d869.html",
            "url": "https://isviolet.github.io/p/7137d869.html",
            "title": "android studio修改配置文件夹(.android .gradle .AndroidStudio)位置.md",
            "date_published": "2021-05-18T12:37:57.533Z",
            "content_html": "<blockquote>\n<p>Android studio 安装之后一般默认在 c:/user/userid (*****)/;（比如:c:/user/xiaohong/）其他软件在安装中要创建缓存文件夹，那么也会在这个目录创建，比如 Notepad++ 等 <img data-src=\"https://i.loli.net/2021/05/18/B5p2FzrwxL4v8eI.png\" alt=\"file\" /></p>\n</blockquote>\n<h4 id=\"这三个文件夹的作用\"><a class=\"anchor\" href=\"#这三个文件夹的作用\">#</a> 这三个文件夹的作用：</h4>\n<ul>\n<li>.android 这个文件夹是 Android SDK 生成的 AVD（Android Virtual Device Manager）即模拟器存放路径</li>\n<li>.AndroidStudio 这个文件夹是 Android Studio 的配置文件夹，主要存放一些 AndroidStudio 设置和插件和项目的缓存信息</li>\n<li>.gradle 这个文件夹是构建工具 Gradle 的配置文件夹，也会存储一些项目的构建缓存信息</li>\n</ul>\n<h4 id=\"默认创建路径在c盘比较占空间现在来转移至d盘\"><a class=\"anchor\" href=\"#默认创建路径在c盘比较占空间现在来转移至d盘\">#</a> 默认创建路径在 C 盘，比较占空间，现在来转移至 D 盘</h4>\n<ol>\n<li>.android 文件夹的修改 这个文件夹是由 Android SDK 配置模拟器生成的，也是最占空间的一个。首先，需要添加一个系统的环境变量 ANDROID_SDK_HOME，如下图： <img data-src=\"https://i.loli.net/2021/05/18/Md5E1qCopWLJk8U.png\" alt=\"file\" /> 创建模拟器后默认位置还是在 C 盘，复制到 D 盘，修改如下图： <img data-src=\"https://i.loli.net/2021/05/18/VGPm1QqpNHWJ3OC.png\" alt=\"file\" /></li>\n<li>.AndroidStudio 文件夹的修改 进入 Android Studio 的安装目录，进入 bin 文件夹，用文本编辑软件打开 idea.properties，去掉以下两项的注释符号 #，修改对应的路径为新路径即可。 <img data-src=\"https://i.loli.net/2021/05/18/F6Pb7UAxofhNlHK.png\" alt=\"file\" /></li>\n<li>.gradle 文件夹的修改 <img data-src=\"https://i.loli.net/2021/05/18/Pg6OCnkUSbXZEHB.png\" alt=\"file\" /></li>\n</ol>\n",
            "tags": [
                "Android"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/1effa57a.html",
            "url": "https://isviolet.github.io/p/1effa57a.html",
            "title": "Gradle的缓存路径修改的四种方法",
            "date_published": "2021-05-18T12:36:30.357Z",
            "content_html": "<ol>\n<li>\n<p>方法一，修改 gradle.properties 文件，增加一句 gradle.user.home=D:\\Android.gradle <img data-src=\"https://i.loli.net/2021/05/18/5AWhiPnayZeFUcq.png\" alt=\"file\" /></p>\n<blockquote>\n<p>但这种方法，需要每个项目文件都要改一遍，如果只是临时修改，可以采用这种方法，如果是针对所有项目的，不建议这种方法.</p>\n</blockquote>\n</li>\n<li>\n<p>方法二，在 Android Studio 中修改 gradle 用户目录，打开设置 (快捷键 Ctrl+alt+S)，定位到 Gradle 菜单，作如下设置 <img data-src=\"https://i.loli.net/2021/05/18/muBl1LA8FTrXG7O.png\" alt=\"file\" /></p>\n<blockquote>\n<pre><code>    但是这个方法现在好像没用,不过可以试试,万一就可以了呢(手动滑稽).\n</code></pre>\n</blockquote>\n</li>\n<li>\n<p>方法三，修改 gradle 启动脚本，进入 gradle 安装的 bin 目录，使用文本编辑器打开 gradle.bat 文件，在如图的位置添加以下语句 <strong>set GRADLE_OPTS=&quot;-Dgradle.user.home=D:\\Android.gradle&quot;</strong> <img data-src=\"https://i.loli.net/2021/05/18/kDR5LKouTXfGJxF.png\" alt=\"file\" /></p>\n</li>\n<li>\n<p>方法四：以上几种方法，都不是最理想的方法，下面推荐 Windows 环境变量设置 gradle 用户目录，通过环境变量的方式，gradle 会读取环境变量，所有的项目都会自动修改过来，非常方便。打开环境变量设置方法如图 (win10 下用快捷键 win+Q 呼出小娜，其他版本可以进控制面板查找到系统 -&gt; 高级系统设置) <img data-src=\"https://i.loli.net/2021/05/18/ITs9hDBfcg2ojHq.png\" alt=\"file\" /></p>\n</li>\n</ol>\n",
            "tags": [
                "Android"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/4bb2eacc.html",
            "url": "https://isviolet.github.io/p/4bb2eacc.html",
            "title": "Android下拉刷新SwipeRefreshLayout简单用法",
            "date_published": "2021-05-18T12:33:58.115Z",
            "content_html": "<blockquote>\n<p>之前一直都想用下拉刷新，感觉上是庞大的工程，所以搁置了。现在学习了一下其实真的超级简单。 看了《第一行代码》以及 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8zYzQwMmE5ZTRiN2QlRTYlOTYlODclRTclQUIlQTA=\">https://www.jianshu.com/p/3c402a9e4b7d 文章</span> 看上去是真的简单。SwipeRefreshLayout 下嵌套一个控件</p>\n</blockquote>\n<ol>\n<li>\n<p>布局代码</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>android.support.v4.widget.SwipeRefreshLayout</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/mswipeRefreshLayout<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>WebView</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    android:id=<span class=\"token entity named-entity\" title=\"&quot;\">&amp;quot;</span>@+id/mwebview<span class=\"token entity named-entity\" title=\"&quot;\">&amp;quot;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    android:layout_width=<span class=\"token entity named-entity\" title=\"&quot;\">&amp;quot;</span>match_parent<span class=\"token entity named-entity\" title=\"&quot;\">&amp;quot;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    android:layout_height=<span class=\"token entity named-entity\" title=\"&quot;\">&amp;quot;</span>match_parent<span class=\"token entity named-entity\" title=\"&quot;\">&amp;quot;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token entity named-entity\" title=\"&gt;\">&amp;gt;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>/WebView<span class=\"token entity named-entity\" title=\"&gt;\">&amp;gt;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>android.support.v4.widget.SwipeRefreshLayout</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>Activity 代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mSwipe <span class=\"token operator\">=</span>  <span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>mswipeRefreshLayout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setSwipe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    * 设置下拉刷新球颜色</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    mSwipe<span class=\"token punctuation\">.</span><span class=\"token function\">setColorSchemeResources</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>swipeColor1<span class=\"token punctuation\">,</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>swipeColor2<span class=\"token punctuation\">,</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>swipeColor3<span class=\"token punctuation\">,</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>swipeColor4<span class=\"token punctuation\">,</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>swipeColor5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    * 设置下拉刷新的监听</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    mSwipe<span class=\"token punctuation\">.</span><span class=\"token function\">setOnRefreshListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SwipeRefreshLayout<span class=\"token punctuation\">.</span>OnRefreshListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onRefresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 刷新需执行的操作</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>我们可以在 res/values/colors.xml 文件中设置我们想要的颜色</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>color</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>swipeColor1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>#3F51B5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>color</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>color</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>swipeColor2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>#000000<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>color</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>......</pre></td></tr></table></figure></li>\n<li>\n<p>加载完毕后需要关闭下拉刷新球  <code>mSwipe.setRefreshing(false); </code></p>\n</li>\n<li>\n<p>打开页面自动刷新  <code>mSwipe.measure(0,0); mSwipe.setRefreshing(true);</code></p>\n<blockquote>\n<p>在 onMeasure 之前 单独使用 setRefreshing (true) 是没有效果的</p>\n</blockquote>\n</li>\n<li>\n<p>还可以复写 onWindowFocusChanged 当页面获得焦点的时刷新</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onWindowFocusChanged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> hasFocus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onWindowFocusChanged</span><span class=\"token punctuation\">(</span>hasFocus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    mSwipe<span class=\"token punctuation\">.</span><span class=\"token function\">setRefreshing</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>也可以放到 ui 线程消息循环中排队</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mSwipe<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        mSwipe<span class=\"token punctuation\">.</span><span class=\"token function\">setRefreshing</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>code<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>pre<span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>在刷新结束后关闭刷新球 <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">SwipeIsFinish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mSwipe<span class=\"token punctuation\">.</span><span class=\"token function\">isRefreshing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> mSwipe<span class=\"token punctuation\">.</span><span class=\"token function\">setRefreshing</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": [
                "Android"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/65e770b4.html",
            "url": "https://isviolet.github.io/p/65e770b4.html",
            "title": "Android开发",
            "date_published": "2021-05-18T12:31:59.858Z",
            "content_html": "<p>&lt;p&gt;&lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FuZHJvaWQxNTcvYXJ0aWNsZS9kZXRhaWxzLzg4OTEyNjc2\">https://blog.csdn.net/android157/article/details/88912676</span>&quot;title=&quot;Android 开发：如何将工程改造成库，并上传到 Github 作为依赖，提供引用 &quot;&gt;Android 开发：如何将工程改造成库，并上传到 Github 作为依赖，提供引用 &lt;/a&gt;&lt;/p&gt;</p>\n<p>&lt;p&gt;&lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kNzYyM2QzMjY0ZDY=\">https://www.jianshu.com/p/d7623d3264d6</span>&quot;title=&quot;Android 实习生 —— 网络请求及数据解析 &quot;&gt;Android 实习生 —— 网络请求及数据解析 &lt;/a&gt;&lt;/p&gt;</p>\n",
            "tags": [
                "Android"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/f77754df.html",
            "url": "https://isviolet.github.io/p/f77754df.html",
            "title": "WordPress建站最全教程",
            "date_published": "2021-05-18T12:30:26.437Z",
            "content_html": "<p>&lt;p&gt;&lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly96b3V3YW5nLnZpcC93b3JkcHJlc3MtYnVpbGQv\">https://zouwang.vip/wordpress-build/</span>&quot;title=&quot;WordPress 建站最全教程 &quot;&gt;WordPress 建站最全教程 &lt;/a&gt;&lt;/p&gt;</p>\n<p><img data-src=\"https://i.loli.net/2021/05/18/VhSebMNEq8B25lo.png\" alt=\"image-20210518203054922\" /></p>\n",
            "tags": []
        },
        {
            "id": "https://isviolet.github.io/p/f3b7e688.html",
            "url": "https://isviolet.github.io/p/f3b7e688.html",
            "title": "SpringBoot获取项目的ip和端口号",
            "date_published": "2021-05-18T12:28:07.063Z",
            "content_html": "<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebServerInitializedEvent</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationListener</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UnknownHostException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServerConfig</span>  <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationListener</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> serverPort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">InetAddress</span> address <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            address <span class=\"token operator\">=</span> <span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLocalHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UnknownHostException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"http://\"</span><span class=\"token operator\">+</span>address<span class=\"token punctuation\">.</span><span class=\"token function\">getHostAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serverPort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onApplicationEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WebServerInitializedEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serverPort <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">getWebServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">ServerConfig</span> serverConfig<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token keyword\">return</span>  serverConfig<span class=\"token punctuation\">.</span><span class=\"token function\">getUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "springboot"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/4d2c3dcc.html",
            "url": "https://isviolet.github.io/p/4d2c3dcc.html",
            "title": "linux运行jar、nohup ignoring input and redirecting stderr to stdout",
            "date_published": "2021-05-18T12:26:15.289Z",
            "content_html": "<h3 id=\"在linux服务器上运行jar文件时通常的方法是\"><a class=\"anchor\" href=\"#在linux服务器上运行jar文件时通常的方法是\">#</a> 在 linux 服务器上运行 Jar 文件时通常的方法是：</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ java -jar test.jar</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//这种方式特点是ssh窗口关闭时，程序中止运行.或者是运行时没法切出去执行其他任务</pre></td></tr></table></figure><h3 id=\"jar在后台运行的方法\"><a class=\"anchor\" href=\"#jar在后台运行的方法\">#</a> jar 在后台运行的方法：</h3>\n<h4 id=\"方法一\"><a class=\"anchor\" href=\"#方法一\">#</a> 方法一：</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">nohup</span> java -jar test.jar <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//nohup 意思是不挂断运行命令,当账户退出或终端关闭时,程序仍然运行</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//当用 <span class=\"token function\">nohup</span> 命令执行作业时，缺省情况下该作业的所有输出被重定向到nohup.out的文件中</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>//除非另外指定了输出文件。</pre></td></tr></table></figure><h4 id=\"方法二\"><a class=\"anchor\" href=\"#方法二\">#</a> 方法二：</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">nohup</span> java -jar test.jar <span class=\"token operator\">></span> temp.txt <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//这种方法会把日志文件输入到你指定的文件中，没有则会自动创建</pre></td></tr></table></figure><h3 id=\"jobs命令和-fg命令\"><a class=\"anchor\" href=\"#jobs命令和-fg命令\">#</a> jobs 命令和 fg 命令：</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">jobs</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//那么就会列出所有后台执行的作业，并且每个作业前面都有个编号。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//如果想将某个作业调回前台控制，只需要 <span class=\"token function\">fg</span> + 编号即可。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>$ <span class=\"token function\">fg</span> <span class=\"token number\">2</span></pre></td></tr></table></figure><h3 id=\"查看某端口占用的线程的pid\"><a class=\"anchor\" href=\"#查看某端口占用的线程的pid\">#</a> 查看某端口占用的线程的 pid</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">netstat</span> -nlp <span class=\"token operator\">|</span><span class=\"token function\">grep</span> :8080</pre></td></tr></table></figure><h3 id=\"出现nohup-ignoring-input-and-redirecting-stderr-to-stdout\"><a class=\"anchor\" href=\"#出现nohup-ignoring-input-and-redirecting-stderr-to-stdout\">#</a> 出现：nohup: ignoring input and redirecting stderr to stdout</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">nohup</span> java -jar test.jar <span class=\"token operator\">></span> temp.txt <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>改成</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">nohup</span> java -jar test.jar <span class=\"token operator\">></span> temp.txt <span class=\"token number\">2</span> <span class=\"token operator\">>&amp;</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;</span></pre></td></tr></table></figure><h3 id=\"解决linux环境下nohup-redirecting-stderr-to-stdout问题\"><a class=\"anchor\" href=\"#解决linux环境下nohup-redirecting-stderr-to-stdout问题\">#</a> 解决 linux 环境下 nohup: redirecting stderr to stdout 问题</h3>\n<ul>\n<li>我的启动命令是这样的：</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">nohup</span> bin/startManagedServer.sh myserver htp://192.168.0.1 -Xms2048m -Xmx2048m <span class=\"token operator\">></span> logs/myserver.out <span class=\"token operator\">&amp;</span></pre></td></tr></table></figure><ul>\n<li>现在指行这个命令，会给我产生两个文件，一个中 logs/myserver.out，另一个是 nohup.out 文件。 怎样才能让它不产生 nohup.out 文件呢。 网上搜了半天，据说好像可以把后面的 “&amp;” 改成 “2&gt;&amp;1 &amp;”，于是把启动命令改成如下：</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">nohup</span> bin/startManagedServer.sh myserver htp://192.168.0.1 -Xms2048m -Xmx2048m <span class=\"token operator\">></span> logs/myserver.out <span class=\"token number\">2</span> <span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;</span></pre></td></tr></table></figure><ul>\n<li>再次执行，问题解决。</li>\n</ul>\n<p><strong>解释如下：</strong></p>\n<blockquote>\n<p>2&gt; 表示把标准错误 (stderr) 重定向，标准输出 (stdout) 是 1。 尖括号后面可以跟文件名，或者是 &amp; 1, &amp;2，分别表示重定向到标准输出和标准错误。</p>\n</blockquote>\n<p><strong>2&gt; &amp;1 1&gt; &amp;2 2&gt; stderr.log 1&gt; stdout.log</strong></p>\n",
            "tags": [
                "bug",
                "linux"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/f5608694.html",
            "url": "https://isviolet.github.io/p/f5608694.html",
            "title": "java获取网络图片的宽和高",
            "date_published": "2021-05-18T12:24:25.051Z",
            "content_html": "<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 获取网络图片的宽和高</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * @param url</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getWidthAndHeight</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">InputStream</span> is <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">openStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">BufferedImage</span> sourceImg <span class=\"token operator\">=</span> <span class=\"token class-name\">ImageIO</span><span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">int</span> width <span class=\"token operator\">=</span> sourceImg<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">int</span> height <span class=\"token operator\">=</span> sourceImg<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> width<span class=\"token operator\">+</span><span class=\"token string\">\"*\"</span><span class=\"token operator\">+</span>height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取图片宽高失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "JAVA"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/c48cc324.html",
            "url": "https://isviolet.github.io/p/c48cc324.html",
            "title": "Content type 'multipartform-data;boundary=.. WebKitFormBoundary..;charset=UTF-8' not supported",
            "date_published": "2021-05-18T12:17:20.717Z",
            "content_html": "<blockquote>\n<p>说下场景吧，前端一个订单表单，填好相应的表单信息封装成 json 数据上传，并且附带上传一个 Excel 文件，同一个接口提交到后端，想着后端代码通过实体接收 json 数据，然后解析接收到的 excel 文件，然而 这么基础的 http 请求头类型的问题坑了自己 (对象实体和文件是不同类型的数据，同一个接口提交，用 Content-Type: multipart/form-data 是解析不了我的 json 参数的)</p>\n</blockquote>\n<h3 id=\"请求体\"><a class=\"anchor\" href=\"#请求体\">#</a> 请求体</h3>\n<p><img data-src=\"https://i.loli.net/2021/05/18/bm48RUHLOj9X63c.png\" alt=\"file\" /></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>curl -X POST --header 'Content-Type<span class=\"token operator\">:</span> multipart/form-data' --header 'Accept<span class=\"token operator\">:</span> application/json' -d '<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"customerId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CU43531977852501\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">\"endTime\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2020-04-04 16:53:34\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token property\">\"flowStrategy\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token property\">\"orderName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"测试1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token property\">\"pdCode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1111111\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token property\">\"sourceUrls\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token property\">\"startTime\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2020-04-03 16:53:34\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token property\">\"targetUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span>' 'http<span class=\"token operator\">:</span><span class=\"token comment\">//localhost:8081/order/batchByExcel'</span></pre></td></tr></table></figure><h3 id=\"返回响应数据\"><a class=\"anchor\" href=\"#返回响应数据\">#</a> 返回响应数据</h3>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"PARAM_WRONG\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"msg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Content type 'multipart/form-data;boundary=----WebKitFormBoundaryW25LVTHs8WCBZUfG;charset=UTF-8' not supported\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"dataObject\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"下面是报错相关代码\"><a class=\"anchor\" href=\"#下面是报错相关代码\">#</a> 下面是报错相关代码</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/batchByExcel\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">BaseResponse</span> <span class=\"token function\">createBatchOrders</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@ApiParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"上传文件\"</span><span class=\"token punctuation\">)</span> <span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fileName\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">MultipartFile</span> file<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                      <span class=\"token annotation punctuation\">@Valid</span> <span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">CreateBatchOrderReq</span> req<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//codes...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"解决方法是将上面的一个接口拆分成两个解决方法是将上面的一个接口拆分成两个\"><a class=\"anchor\" href=\"#解决方法是将上面的一个接口拆分成两个解决方法是将上面的一个接口拆分成两个\">#</a> 解决方法是，将上面的一个接口拆分成两个：解决方法是，将上面的一个接口拆分成两个：</h4>\n<ul>\n<li>一个接收文件，保存文件到本地或者其他服务器，返回一个文件编码或者文件地址；</li>\n<li>一个接口接收 json 数据，json 参数中包含文件编码或者地址，根据编码或地址找到文件进行后续的数据操作。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/batchFile\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">BaseResponse</span> <span class=\"token function\">uploadBatchFile</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@ApiParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"上传文件\"</span><span class=\"token punctuation\">)</span> <span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fileName\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">MultipartFile</span> file<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//codes...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/batch\"</span><span class=\"token punctuation\">)</span><span class=\"token annotation punctuation\">@ApiOperation</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"新增批量订单(需要先导入excel)\"</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">public</span> <span class=\"token class-name\">BaseResponse</span> <span class=\"token function\">createBatchOrders</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Valid</span> <span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">CreateBatchOrderReq</span> req<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//codes…&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><img data-src=\"https://i.loli.net/2021/05/18/WLFsnoERKYCydO9.png\" alt=\"file\" /> <img data-src=\"https://i.loli.net/2021/05/18/CbqcpPGQJr2YsTw.png\" alt=\"file\" /> <img data-src=\"https://i.loli.net/2021/05/18/Te12rDxCGf6NjK3.png\" alt=\"file\" /></p>\n</blockquote>\n",
            "tags": [
                "springboot",
                "bug"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/d1707900.html",
            "url": "https://isviolet.github.io/p/d1707900.html",
            "title": "油猴脚本IDM教程",
            "date_published": "2021-05-18T12:15:10.258Z",
            "content_html": "<p>&lt;h4&gt;&lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5zb3VsODguY29tL3p6aXQveWhpZG1iZC5odG1s\">http://www.soul88.com/zzit/yhidmbd.html</span>&quot;title=&quot; 油猴脚本 / IDM 教程：不限速下载百度网盘文件方法教程更新 &quot;&gt; 油猴脚本 / IDM 教程：不限速下载百度网盘文件方法教程更新 &lt;/a&gt;&lt;/h4&gt;<br />\n&lt;h4&gt;&lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuNTJwb2ppZS5jbi90aHJlYWQtMTIzODcwNS0xLTEuaHRtbA==\">https://www.52pojie.cn/thread-1238705-1-1.html</span>&quot;title=&quot;[Windows] IDM 俄国重新打包最新 (IDM 6.38) 20.08.04 &quot;&gt;[Windows] IDM 俄国重新打包最新 (IDM 6.38) 20.08.04 &lt;/a&gt;&lt;/h4&gt;<br />\n&lt;h4&gt;&lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xOTkyMzAzNTk=\">https://zhuanlan.zhihu.com/p/199230359</span>&quot;title=&quot;IDM 下载神器全新详解教程：如何安装以及不限速下载某网盘资源 &quot;&gt;IDM 下载神器全新详解教程：如何安装以及不限速下载某网盘资源 &lt;/a&gt;&lt;/h4&gt;</p>\n",
            "tags": []
        },
        {
            "id": "https://isviolet.github.io/p/9fbfa673.html",
            "url": "https://isviolet.github.io/p/9fbfa673.html",
            "title": "我的url",
            "date_published": "2021-05-18T12:13:51.611Z",
            "content_html": "<p>&lt;h1&gt;&lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cDovL2lzdmlvbGV0LmNvbS8=\">http://isviolet.com/</span>&quot;title=&quot; 我的博客 &quot;&gt; 我的博客 &lt;/a&gt;&lt;/h1&gt;<br />\n&lt;p&gt;[toc]&lt;/p&gt;<br />\n&lt;h2&gt;&lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cDovL2lzdmlvbGV0LmNvbS93cC1hZG1pbi8=\">http://isviolet.com/wp-admin/</span>&quot;title=&quot;wordpress 后端 &quot;&gt;wordpress 后端 &lt;/a&gt;&lt;/h2&gt;<br />\n&lt;h2&gt;&lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cDovLzQzLjI0MC4zMC4xNDc6MjIyMi9DTURfU0hPV19ET01BSU4/ZG9tYWluPWlzdmlvbGV0LmNvbQ==\">http://43.240.30.147:2222/CMD_SHOW_DOMAIN?domain=isviolet.com</span>&quot;title=&quot; 恒创主机管理后台 &quot;&gt; 恒创主机管理后台 &lt;/a&gt;&lt;/h2&gt;<br />\n&lt;h1&gt; 宝塔面板 &lt;/h1&gt;<br />\n&lt;h2&gt;&lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cDovLzM5Ljk2Ljc1LjIxOjEwMDAwLzBjZjM5MTNlLw==\">http://39.96.75.21:10000/0cf3913e/</span>&quot;title=&quot; 我的阿里云主机宝塔面板 &quot;&gt; 我的阿里云主机宝塔面板 &lt;/a&gt;&lt;/h2&gt;<br />\n&lt;h1&gt;IP&lt;/h1&gt;<br />\n&lt;ul&gt;<br />\n&lt;li&gt;&lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cDovLzEyMS4xOTkuMjMuNC8=\">http://121.199.23.4/</span>&quot;title=&quot; 噶龙手工网 &quot;&gt; 噶龙手工网 &lt;/a&gt;&lt;/li&gt;<br />\n&lt;li&gt;&lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cDovLzQzLjI0MC4zMC4xNDcv\">http://43.240.30.147/</span>&quot;title=&quot; 恒创主机 ip&quot;&gt; 恒创主机 ip&lt;/a&gt;&lt;/li&gt;<br />\n&lt;li&gt;&lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cDovLzM5Ljk2Ljc1LjIxLw==\">http://39.96.75.21/</span>&quot;title=&quot; 我的阿里云服务器 ip&quot;&gt; 我的阿里云服务器 ip&lt;/a&gt;&lt;/li&gt;<br />\n&lt;/ul&gt;<br />\n&lt;h1&gt; 本地调试 &lt;/h1&gt;<br />\n&lt;h2&gt;spring boot&lt;/h2&gt;<br />\n&lt;ul&gt;<br />\n&lt;li&gt;&lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDAxL3N3YWdnZXItdWkuaHRtbA==\">http://localhost:8001/swagger-ui.html</span>&quot;title=&quot;8001 端口 swagger 文档 &quot;&gt;8001 端口 swagger 文档 &lt;/a&gt;&lt;/li&gt;<br />\n&lt;/ul&gt;<br />\n&lt;h1&gt; 阿里云 &lt;/h1&gt;<br />\n&lt;ul&gt;<br />\n&lt;li&gt;&lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYWxpeXVuLmNvbS8/dXRtX2NvbnRlbnQ9c2VfMTAwMDMwMTg4MSZhbXA7YWNjb3VudHRyYWNlaWQ9YzdhMTI5MmQ3ZDI4NDBhZGEzMjQ2OWQyNWUxMjMxYTJnbGNx\">https://www.aliyun.com/?utm_content=se_1000301881&amp;accounttraceid=c7a1292d7d2840ada32469d25e1231a2glcq</span>&quot;title=&quot; 阿里云 &quot;&gt; 阿里云 &lt;/a&gt;&lt;/li&gt;<br />\n&lt;li&gt;&lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly92b2QuY29uc29sZS5hbGl5dW4uY29tLz9zcG09NTE3Ni42NjYwNTg1Ljc3NDUyNjE5OC4xLmI5MzA2YmY4V09Wc0lkIy9vdmVydmlldw==\">https://vod.console.aliyun.com/?spm=5176.6660585.774526198.1.b9306bf8WOVsId#/overview</span>&quot;title=&quot; 视频点播控制台 &quot;&gt; 视频点播控制台 &lt;/a&gt;&lt;/li&gt;<br />\n&lt;li&gt;&lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9vc3MuY29uc29sZS5hbGl5dW4uY29tL292ZXJ2aWV3\">https://oss.console.aliyun.com/overview</span>&quot;title=&quot;OSS 管理控制台 &quot;&gt;OSS 管理控制台 &lt;/a&gt;&lt;/li&gt;<br />\n&lt;/ul&gt;<br />\n&lt;h1&gt; 微信小程序 &lt;/h1&gt;<br />\n&lt;ul&gt;<br />\n&lt;li&gt;&lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L3d4Y2xvdWQvYmFzaXMvZ2V0dGluZy1zdGFydGVkLmh0bWw=\">https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html</span>&quot;title=&quot; 微信开发文档 &quot;&gt; 微信开发文档 &lt;/a&gt;&lt;/li&gt;<br />\n&lt;li&gt;&lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3d4YW1wL2hvbWUvZ3VpZGU/bGFuZz16aF9DTiZhbXA7dG9rZW49MTE4NjUwOTAzNw==\">https://mp.weixin.qq.com/wxamp/home/guide?lang=zh_CN&amp;token=1186509037</span>&quot;title=&quot; 小程序管理页面 &quot;&gt; 小程序管理页面 &lt;/a&gt;&lt;/li&gt;<br />\n&lt;li&gt;&lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc3ByaW5nc25vdy9wLzEyNjA1MDE3Lmh0bWwjX2xhYmVsMg==\">https://www.cnblogs.com/springsnow/p/12605017.html#_label2</span>&quot;title=&quot; 云开发简单案例 &quot;&gt; 云开发简单案例 &lt;/a&gt;&lt;/li&gt;<br />\n&lt;/ul&gt;<br />\n&lt;h1&gt; 学习 &amp; 学校网站 &lt;/h1&gt;<br />\n&lt;h2&gt; 学习网址 &lt;/h2&gt;<br />\n&lt;ul&gt;<br />\n&lt;li&gt;&lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cDovL2VyeWEubW9vYy5jaGFveGluZy5jb20v\">http://erya.mooc.chaoxing.com/</span>&quot;title=&quot; 超星尔雅 &quot;&gt; 超星尔雅 &lt;/a&gt;&lt;/li&gt;<br />\n&lt;li&gt;&lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHVpc2h1LmNvbS8=\">https://www.zhihuishu.com/</span>&quot;title=&quot; 智慧树 &quot;&gt; 智慧树 &lt;/a&gt;&lt;/li&gt;<br />\n&lt;li&gt;&lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWNvdXJzZTE2My5vcmcv\">https://www.icourse163.org/</span>&quot;title=&quot; 中国大学 MOOC 慕课 &quot;&gt; 中国大学 MOOC 慕课 &lt;/a&gt;&lt;/li&gt;<br />\n&lt;/ul&gt;<br />\n&lt;h2&gt; 学校 &lt;/h2&gt;<br />\n&lt;ul&gt;<br />\n&lt;li&gt;&lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cDovL2p3enguemp4dS5lZHUuY24vandnbHh0L3h0Z2wvbG9naW5fc2xvZ2luLmh0bWw7SlNFU1NJT05JRD1kMzM4NTZjNi0xMjM1LTQyYmYtYTg1MS1hODI5M2JjMTJmZDk=\">http://jwzx.zjxu.edu.cn/jwglxt/xtgl/login_slogin.html;JSESSIONID=d33856c6-1235-42bf-a851-a8293bc12fd9</span>&quot;title=&quot; 教学综合信息服务平台 &quot;&gt; 教学综合信息服务平台 &lt;/a&gt;&lt;/li&gt;<br />\n&lt;li&gt;&lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cDovL2x4eHQuemp4dS5lZHUuY24vbHh4dC94dGdsL2xvZ2luX3Nsb2dpbi5odG1s\">http://lxxt.zjxu.edu.cn/lxxt/xtgl/login_slogin.html</span>&quot;title=&quot; 离校管理信息系统 &quot;&gt; 离校管理信息系统 &lt;/a&gt;&lt;/li&gt;<br />\n&lt;li&gt;&lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy56anh1LmVkdS5jbi8=\">http://www.zjxu.edu.cn/</span>&quot;title=&quot; 嘉兴学院 &quot;&gt; 嘉兴学院 &lt;/a&gt;&lt;/li&gt;<br />\n&lt;li&gt;&lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly92cG4uemp4dS5lZHUuY24vcG9yL2xvZ2luX3Bzdy5jc3A/cm5kPTAuNzM5NzU2Mzc0ODE4NzYzNyNodHRwcyUzQSUyRiUyRnZwbi56anh1LmVkdS5jbiUyRg==\">https://vpn.zjxu.edu.cn/por/login_psw.csp?rnd=0.7397563748187637#https%3A%2F%2Fvpn.zjxu.edu.cn%2F</span>&quot;title=&quot; 学校 vpn&quot;&gt; 学校 vpn&lt;/a&gt;&lt;/li&gt;<br />\n&lt;/ul&gt;</p>\n",
            "tags": []
        },
        {
            "id": "https://isviolet.github.io/p/518e9178.html",
            "url": "https://isviolet.github.io/p/518e9178.html",
            "title": "Java 基础语法",
            "date_published": "2021-05-18T12:10:29.874Z",
            "content_html": "<h3 id=\"java-基础语法\"><a class=\"anchor\" href=\"#java-基础语法\">#</a> Java 基础语法</h3>\n<p>一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念。</p>\n<ul>\n<li>对象：<strong>对象是类的一个实例</strong>，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</li>\n<li>类：类是一个<strong>模板</strong>，它描述一类对象的行为和状态。</li>\n<li>方法：<strong>方法就是行为</strong>，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。</li>\n<li>实例变量：每个<strong>对象都有独特的实例变量</strong>，对象的状态由这些<strong>实例变量的值</strong>决定。</li>\n</ul>\n<h3 id=\"第一个java程序\"><a class=\"anchor\" href=\"#第一个java程序\">#</a> 第一个 Java 程序</h3>\n<p>下面看一个简单的 Java 程序，它将打印字符串 Hello World</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/* 第一个 Java 程序</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 它将打印字符串 Hello World</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印 Hello World</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"基本语法\"><a class=\"anchor\" href=\"#基本语法\">#</a> 基本语法</h3>\n<p>编写 Java 程序时，应注意以下几点：</p>\n<ul>\n<li><strong>大小写敏感</strong>：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。</li>\n<li>类名：对于所有的类来说，<strong>类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass</strong> 。</li>\n<li>方法名：<strong>所有的方法名都应该以小写字母开头</strong>。<strong>如果方法名含有若干单词，则后面的每个单词首字母大写。</strong></li>\n<li>源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。</li>\n<li>主方法入口：所有的 Java 程序由 public static void main (String [] args) 方法开始执行。</li>\n</ul>\n<h3 id=\"java-标识符\"><a class=\"anchor\" href=\"#java-标识符\">#</a> Java 标识符</h3>\n<p>Java 所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。</p>\n<p>关于 Java 标识符，有以下几点需要注意：</p>\n<ul>\n<li>所有的标识符都应该以字母（A-Z 或者 a-z）, 美元符（$）、或者下划线（_）开始</li>\n<li>首字符之后可以是字母（A-Z 或者 a-z）, 美元符（$）、下划线（_）或数字的任何字符组合</li>\n<li>关键字不能用作标识符</li>\n<li>标识符是大小写敏感的</li>\n<li>合法标识符举例：age、$salary、_value、__1_value</li>\n<li>非法标识符举例：123abc、-salary</li>\n</ul>\n<h3 id=\"java修饰符\"><a class=\"anchor\" href=\"#java修饰符\">#</a> Java 修饰符</h3>\n<p>像其他语言一样，Java 可以使用修饰符来修饰类中方法和属性。主要有两类修饰符：</p>\n<ul>\n<li>访问控制修饰符 : default, public , protected, private</li>\n<li>非访问控制修饰符 : final, abstract, static, synchronized</li>\n</ul>\n<h3 id=\"java-变量\"><a class=\"anchor\" href=\"#java-变量\">#</a> Java 变量</h3>\n<p>java 中主要有如下几种类型的变量</p>\n<ul>\n<li>局部变量</li>\n<li>类变量（静态变量）</li>\n<li>成员变量（非静态变量）</li>\n</ul>\n<h3 id=\"java-数组\"><a class=\"anchor\" href=\"#java-数组\">#</a> Java 数组</h3>\n<p>数组是储存在堆上的对象，可以保存多个同类型变量。在后面的章节中，我们将会学到如何声明、构造以及初始化一个数组。</p>\n<h3 id=\"java-枚举\"><a class=\"anchor\" href=\"#java-枚举\">#</a> Java 枚举</h3>\n<p>Java 5.0 引入了枚举，枚举限制变量只能是预先设定好的值。使用枚举可以减少代码中的 bug。</p>\n<p>例如，我们为果汁店设计一个程序，它将限制果汁为小杯、中杯、大杯。这就意味着它不允许顾客点除了这三种尺寸外的果汁。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">FreshJuice</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">enum</span> <span class=\"token class-name\">FreshJuiceSize</span><span class=\"token punctuation\">&#123;</span> SMALL<span class=\"token punctuation\">,</span> MEDIUM <span class=\"token punctuation\">,</span> LARGE <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token class-name\">FreshJuiceSize</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FreshJuiceTest</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token class-name\">FreshJuice</span> juice <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FreshJuice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> juice<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token class-name\">FreshJuice<span class=\"token punctuation\">.</span>FreshJuiceSize</span><span class=\"token punctuation\">.</span>MEDIUM <span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意：枚举可以单独声明或者声明在类里面。方法、变量、构造函数也可以在枚举中定义。</p>\n<h3 id=\"java-关键字\"><a class=\"anchor\" href=\"#java-关键字\">#</a> Java 关键字</h3>\n<p>下面列出了 Java 关键字。这些保留字不能用于常量、变量、和任何标识符的名称。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类别</th>\n<th style=\"text-align:center\">关键字</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">访问控制</td>\n<td style=\"text-align:center\">private</td>\n<td style=\"text-align:center\">私有的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">protected</td>\n<td style=\"text-align:center\">受保护的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">public</td>\n<td style=\"text-align:center\">公共的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">default</td>\n<td style=\"text-align:center\">默认</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">类、方法和变量修饰符</td>\n<td style=\"text-align:center\">abstract</td>\n<td style=\"text-align:center\">声明抽象</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"java注释\"><a class=\"anchor\" href=\"#java注释\">#</a> Java 注释</h3>\n<p>类似于 C/C++、Java 也支持单行以及多行注释。注释中的字符将被 Java 编译器忽略。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">/* 这是第一个 Java 程序</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    * 它将打印 Hello World</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    * 这是一个多行注释的示例</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token comment\">// 这是单行注释的示例</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token comment\">/* 这个也是单行注释的示例 */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"java-空行\"><a class=\"anchor\" href=\"#java-空行\">#</a> Java 空行</h3>\n<p>空白行或者有注释的行，Java 编译器都会忽略掉。</p>\n<h3 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h3>\n<p>在 Java 中，一个类可以由其他类派生。如果你要创建一个类，而且已经存在一个类具有你所需要的属性或方法，那么你可以将新创建的类继承该类。</p>\n<p>利用继承的方法，可以重用已存在类的方法和属性，而不用重写这些代码。被继承的类称为超类（super class），派生类称为子类（subclass）。</p>\n<h3 id=\"接口\"><a class=\"anchor\" href=\"#接口\">#</a> 接口</h3>\n<p>在 Java 中，接口可理解为对象间相互通信的协议。接口在继承中扮演着很重要的角色。</p>\n<p>接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类。</p>\n<h3 id=\"java-源程序与编译型运行区别\"><a class=\"anchor\" href=\"#java-源程序与编译型运行区别\">#</a> Java 源程序与编译型运行区别</h3>\n<p><img data-src=\"https://i.loli.net/2021/05/18/9tewhnfaI18sz6S.jpg\" alt=\"img\" /></p>\n",
            "tags": [
                "JAVA"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/c09eead7.html",
            "url": "https://isviolet.github.io/p/c09eead7.html",
            "title": "HTTP协议超级详解",
            "date_published": "2021-05-18T12:01:06.193Z",
            "content_html": "<h3 id=\"http协议简介\"><a class=\"anchor\" href=\"#http协议简介\">#</a> HTTP 协议简介</h3>\n<p>​    \t超文本传输协议（英文：HyperText Transfer Protocol，缩写：HTTP）是一种用于分布式、协作式和超媒体信息系统的应用层协议。HTTP 是万维网的数据通信的基础。</p>\n<p>​    \tHTTP 的发展是由蒂姆・伯纳斯 - 李于 1989 年在欧洲核子研究组织（CERN）所发起。HTTP 的标准制定由万维网协会（World Wide Web Consortium，W3C）和互联网工程任务组（Internet Engineering Task Force，IETF）进行协调，最终发布了一系列的 RFC，其中最著名的是 1999 年 6 月公布的 RFC 2616，定义了 HTTP 协议中现今广泛使用的一个版本 ——HTTP 1.1。</p>\n<p>​\t\t2014 年 12 月，互联网工程任务组（IETF）的 Hypertext Transfer Protocol Bis（httpbis）工作小组将 HTTP/2 标准提议递交至 IESG 进行讨论，于 2015 年 2 月 17 日被批准。 HTTP/2 标准于 2015 年 5 月以 RFC 7540 正式发表，取代 HTTP 1.1 成为 HTTP 的实现标准。</p>\n<h3 id=\"http协议概述\"><a class=\"anchor\" href=\"#http协议概述\">#</a> HTTP 协议概述</h3>\n<p>​    \tHTTP 是一个客户端终端（用户）和服务器端（网站）请求和应答的标准（TCP）。通过使用网页浏览器、网络爬虫或者其它的工具，客户端发起一个 HTTP 请求到服务器上指定端口（默认端口为 80）。我们称这个客户端为用户代理程序（user agent）。应答的服务器上存储着一些资源，比如 HTML 文件和图像。我们称这个应答服务器为源服务器（origin server）。在用户代理和源服务器中间可能存在多个 “中间层”，比如代理服务器、网关或者隧道（tunnel）。</p>\n<p>​    \t尽管 TCP/IP 协议是互联网上最流行的应用，HTTP 协议中，并没有规定必须使用它或它支持的层。事实上，HTTP 可以在任何互联网协议上，或其他网络上实现。HTTP 假定其下层协议提供可靠的传输。因此，任何能够提供这种保证的协议都可以被其使用。因此也就是其在 TCP/IP 协议族使用 TCP 作为其传输层。</p>\n<p>​    \t通常，由 HTTP 客户端发起一个请求，创建一个到服务器指定端口（默认是 80 端口）的 TCP 连接。HTTP 服务器则在那个端口监听客户端的请求。一旦收到请求，服务器会向客户端返回一个状态，比如”HTTP/1.1 200 OK”，以及返回的内容，如请求的文件、错误消息、或者其它信息。</p>\n<h3 id=\"http工作原理\"><a class=\"anchor\" href=\"#http工作原理\">#</a> HTTP 工作原理</h3>\n<p>​    \tHTTP 协议定义 Web 客户端如何从 Web 服务器请求 Web 页面，以及服务器如何把 Web 页面传送给客户端。HTTP 协议采用了请求 / 响应模型。客户端向服务器发送一个请求报文，请求报文包含请求的方法、URL、协议版本、请求头部和请求数据。服务器以一个状态行作为响应，响应的内容包括协议的版本、成功或者错误代码、服务器信息、响应头部和响应数据。</p>\n<p>以下是 HTTP 请求 / 响应的步骤：</p>\n<ol>\n<li>客户端连接到 Web 服务器<br />\n一个 HTTP 客户端，通常是浏览器，与 Web 服务器的 HTTP 端口（默认为 80）建立一个 TCP 套接字连接。例如，<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5sdWZmeWNpdHkuY29tLi8=\">http://www.luffycity.com。</span></li>\n<li>发送 HTTP 请求<br />\n通过 TCP 套接字，客户端向 Web 服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行和请求数据 4 部分组成。</li>\n<li>服务器接受请求并返回 HTTP 响应<br />\n Web 服务器解析请求，定位请求资源。服务器将资源复本写到 TCP 套接字，由客户端读取。一个响应由状态行、响应头部、空行和响应数据 4 部分组成。</li>\n<li>释放连接 TCP 连接<br />\n若 connection 模式为 close，则服务器主动关闭 TCP 连接，客户端被动关闭连接，释放 TCP 连接；若 connection 模式为 keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求；</li>\n<li>客户端浏览器解析 HTML 内容<br />\n客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的 HTML 文档和文档的字符集。客户端浏览器读取响应数据 HTML，根据 HTML 的语法对其进行格式化，并在浏览器窗口中显示。</li>\n</ol>\n<p>例如：在浏览器地址栏键入 URL，按下回车之后会经历以下流程：</p>\n<ol>\n<li>浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址；</li>\n<li>解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立 TCP 连接；</li>\n<li>浏览器发出读取文件 (URL 中域名后面部分对应的文件) 的 HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器；</li>\n<li>服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器；</li>\n<li>释放 TCP 连接；</li>\n<li>浏览器将该 html 文本并显示内容；</li>\n</ol>\n<p><img data-src=\"https://i.loli.net/2021/05/18/VqWx2wsrXQlMEN8.jpg\" alt=\"img\" /></p>\n<p><strong>http 协议是基于 TCP/IP 协议之上的应用层协议。</strong></p>\n<h4 id=\"基于-请求-响应-的模式\"><a class=\"anchor\" href=\"#基于-请求-响应-的模式\">#</a> 基于 请求 - 响应 的模式</h4>\n<p>​    HTTP 协议规定，请求从客户端发出，最后服务器端响应该请求并 返回。换句话说，肯定是先从客户端开始建立通信的，服务器端在没有 接收到请求之前不会发送响应</p>\n<p><img data-src=\"https://i.loli.net/2021/05/18/nUIGf3MDOhPpXx9.jpg\" alt=\"img\" /></p>\n<h4 id=\"无状态保存\"><a class=\"anchor\" href=\"#无状态保存\">#</a> 无状态保存</h4>\n<p>​    HTTP 是一种不保存状态，即无状态 (stateless) 协议。HTTP 协议 自身不对请求和响应之间的通信状态进行保存。也就是说在 HTTP 这个 级别，协议对于发送过的请求或响应都不做持久化处理。<br />\n<img data-src=\"https://i.loli.net/2021/05/18/wrCv7U4ioDaHsSP.jpg\" alt=\"img\" /></p>\n<hr />\n<p>​    使用 HTTP 协议，每当有新的请求发送时，就会有对应的新响应产 生。协议本身并不保留之前一切的请求或响应报文的信息。这是为了更快地处理大量事务，确保协议的可伸缩性，而特意把 HTTP 协议设计成 如此简单的。可是，随着 Web 的不断发展，因无状态而导致业务处理变得棘手 的情况增多了。比如，用户登录到一家购物网站，即使他跳转到该站的 其他页面后，也需要能继续保持登录状态。针对这个实例，网站为了能 够掌握是谁送出的请求，需要保存用户的状态。HTTP/1.1 虽然是无状态协议，但为了实现期望的保持状态功能，于是引入了 Cookie 技术。有了 Cookie 再用 HTTP 协议通信，就可以管理状态了。有关 Cookie 的详细内容稍后讲解。</p>\n<h4 id=\"无连接\"><a class=\"anchor\" href=\"#无连接\">#</a> 无连接</h4>\n<p>无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间，并且可以提高并发性能，不能和每个用户建立长久的连接，请求一次相应一次，服务端和客户端就中断了。但是无连接有两种方式，早期的 http 协议是一个请求一个响应之后，直接就断开了，但是现在的 http 协议 1.1 版本不是直接就断开了，而是等几秒钟，这几秒钟是等什么呢，等着用户有后续的操作，如果用户在这几秒钟之内有新的请求，那么还是通过之前的连接通道来收发消息，如果过了这几秒钟用户没有发送新的请求，那么就会断开连接，这样可以提高效率，减少短时间内建立连接的次数，因为建立连接也是耗时的，默认的好像是 3 秒中现在，但是这个时间是可以通过咱们后端的代码来调整的，自己网站根据自己网站用户的行为来分析统计出一个最优的等待时间。</p>\n<h3 id=\"http请求方法\"><a class=\"anchor\" href=\"#http请求方法\">#</a> HTTP 请求方法</h3>\n<p>HTTP/1.1 协议中共定义了八种方法（也叫 “动作”）来以不同方式操作指定的资源：</p>\n<h4 id=\"get\"><a class=\"anchor\" href=\"#get\">#</a> <strong>GET</strong></h4>\n<p>向指定的资源发出 “显示” 请求。使用 GET 方法应该只用在读取数据，而不应当被用于产生 “副作用” 的操作中，例如在 Web Application 中。其中一个原因是 GET 可能会被网络蜘蛛等随意访问。</p>\n<h4 id=\"head\"><a class=\"anchor\" href=\"#head\">#</a> HEAD</h4>\n<p>与 GET 方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中 “关于该资源的信息”（元信息或称元数据）。</p>\n<h4 id=\"post\"><a class=\"anchor\" href=\"#post\">#</a> POST</h4>\n<p>向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。</p>\n<h4 id=\"put\"><a class=\"anchor\" href=\"#put\">#</a> PUT</h4>\n<p>向指定资源位置上传其最新内容。</p>\n<h4 id=\"delete\"><a class=\"anchor\" href=\"#delete\">#</a> DELETE</h4>\n<p>请求服务器删除 Request-URI 所标识的资源。</p>\n<h4 id=\"trace\"><a class=\"anchor\" href=\"#trace\">#</a> TRACE</h4>\n<p>回显服务器收到的请求，主要用于测试或诊断。</p>\n<h4 id=\"options\"><a class=\"anchor\" href=\"#options\">#</a> OPTIONS</h4>\n<p>这个方法可使服务器传回该资源所支持的所有 HTTP 请求方法。用’*’来代替资源名称，向 Web 服务器发送 OPTIONS 请求，可以测试服务器功能是否正常运作。</p>\n<h4 id=\"connect\"><a class=\"anchor\" href=\"#connect\">#</a> CONNECT</h4>\n<p>HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。通常用于 SSL 加密服务器的链接（经由非加密的 HTTP 代理服务器）。</p>\n<h5 id=\"注意事项\"><a class=\"anchor\" href=\"#注意事项\">#</a> 注意事项：</h5>\n<ol>\n<li>方法名称是区分大小写的。当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码 405（Method Not Allowed），当服务器不认识或者不支持对应的请求方法的时候，应当返回状态码 501（Not Implemented）。</li>\n<li>HTTP 服务器至少应该实现 GET 和 HEAD 方法，其他方法都是可选的。当然，所有的方法支持的实现都应当匹配下述的方法各自的语义定义。此外，除了上述方法，特定的 HTTP 服务器还能够扩展自定义的方法。例如 PATCH（由 RFC 5789 指定的方法）用于将局部修改应用到资源。</li>\n</ol>\n<p><strong>请求方式: get 与 post 请求（通过 form 表单我们自己写写看）</strong></p>\n<ul>\n<li></li>\n</ul>\n<p>GET 提交的数据会放在 URL 之后，也就是请求行里面，以？分割 URL 和传输数据，参数之间以 &amp; 相连，如 EditBook?name=test1&amp;id=123456.（请求头里面那个 content-type 做的这种参数形式，后面讲） POST 方法是把提交的数据放在 HTTP 包的请求体中.</p>\n<ul>\n<li></li>\n</ul>\n<p>GET 提交的数据大小有限制（因为浏览器对 URL 的长度有限制），而 POST 方法提交的数据没有限制.</p>\n<ul>\n<li></li>\n</ul>\n<p>GET 与 POST 请求在服务端获取请求数据方式不同，就是我们自己在服务端取请求数据的时候的方式不同了，这句废话昂。</p>\n<h3 id=\"http状态码\"><a class=\"anchor\" href=\"#http状态码\">#</a> HTTP 状态码</h3>\n<p>所有 HTTP 响应的第一行都是状态行，依次是当前 HTTP 版本号，3 位数字组成的状态代码，以及描述状态的短语，彼此由空格分隔。</p>\n<p>状态代码的第一个数字代表当前响应的类型：</p>\n<ul>\n<li>1xx 消息 —— 请求已被服务器接收，继续处理</li>\n<li>2xx 成功 —— 请求已成功被服务器接收、理解、并接受</li>\n<li>3xx 重定向 —— 需要后续操作才能完成这一请求</li>\n<li>4xx 请求错误 —— 请求含有词法错误或者无法被执行</li>\n<li>5xx 服务器错误 —— 服务器在处理某个正确请求时发生错误</li>\n</ul>\n<p>虽然 RFC 2616 中已经推荐了描述状态的短语，例如”200 OK”，”404 Not Found”，但是 WEB 开发者仍然能够自行决定采用何种短语，用以显示本地化的状态描述或者自定义信息。</p>\n<p><img data-src=\"https://i.loli.net/2021/05/18/v7T6mdVXyne9pAG.jpg\" alt=\"img\" /></p>\n<h3 id=\"url\"><a class=\"anchor\" href=\"#url\">#</a> URL</h3>\n<p>超文本传输协议（HTTP）的统一资源定位符将从因特网获取信息的五个基本元素包括在一个简单的地址中：</p>\n<ul>\n<li>传送协议。</li>\n<li>层级 URL 标记符号 (为 [//], 固定不变)</li>\n<li>访问资源需要的凭证信息（可省略）</li>\n<li>服务器。（通常为域名，有时为 IP 地址）</li>\n<li>端口号。（以数字方式表示，若为 HTTP 的默认值 “:80” 可省略）</li>\n<li>路径。（以 “/” 字符区别路径中的每一个目录名称）</li>\n<li>查询。（GET 模式的窗体参数，以 “?” 字符为起点，每个参数以 “&amp;” 隔开，再以 “=” 分开参数名称与数据，通常以 UTF8 的 URL 编码，避开字符冲突的问题）</li>\n<li>片段。以 “#” 字符为起点</li>\n</ul>\n<p>以<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5sdWZmeWNpdHkuY29tL25ld3MvaW5kZXguaHRtbD9pZD0yNTAmYW1wO3BhZ2U9MQ==\"> http://www.luffycity.com:80/news/index.html?id=250&amp;page=1</span> 为例，其中：</p>\n<ul>\n<li>http，是协议；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5sdWZmeWNpdHkueG4tLWNvbSUyQyUzQi1vODZodDl0Zm45YWR3Yi8=\">www.luffycity.com，是服务器；</span></li>\n<li>80，是服务器上的默认网络端口号，默认不显示；</li>\n<li>/news/index.html，是路径（URI：直接定位到对应的资源）；</li>\n<li>?id=250&amp;page=1，是查询。</li>\n<li>大多数网页浏览器不要求用户输入网页中 “http://” 的部分，因为绝大多数网页内容是超文本传输协议文件。同样，“80” 是超文本传输协议文件的常用端口号，因此一般也不必写明。一般来说用户只要键入统一资源定位符的一部分（<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5sdWZmeWNpdHkuY29tL25ld3MvaW5kZXguaHRtbD9pZD0yNTAmYW1wO3BhZ2U9MSVFRiVCQyU4OSVFNSVCMCVCMSVFNSU4RiVBRiVFNCVCQiVBNSVFNCVCQSU4NiVFMyU4MCU4Mg==\">www.luffycity.com:80/news/index.html?id=250&amp;page=1）就可以了。</span></li>\n</ul>\n<p>由于超文本传输协议允许服务器将浏览器重定向到另一个网页地址，因此许多服务器允许用户省略网页地址中的部分，比如 www。从技术上来说这样省略后的网页地址实际上是一个不同的网页地址，浏览器本身无法决定这个新地址是否通，服务器必须完成重定向的任务。</p>\n<h3 id=\"http请求格式请求协议\"><a class=\"anchor\" href=\"#http请求格式请求协议\">#</a> HTTP 请求格式 (请求协议)</h3>\n<p><img data-src=\"https://i.loli.net/2021/05/18/2rWcEJVwb3sOklf.jpg\" alt=\"img\" /></p>\n<p>URL 包含：/index/index2?a=1&amp;b=2；路径和参数都在这里。<br />\n<img data-src=\"https://i.loli.net/2021/05/18/MdgZRnNF7iupCEU.jpg\" alt=\"img\" /></p>\n<p>请求头里面的内容举个例子：这个 length 表示请求体里面的数据长度，其他的请求头里面的这些键值对，陆续我们会讲的，大概知道一下就可以了，其中有一个 user-agent，算是需要你记住的吧，就是告诉你的服务端，我是用什么给你发送的请求。</p>\n<p><img data-src=\"https://i.loli.net/2021/05/18/AJBQgmUZ1L62rHi.jpg\" alt=\"img\" /></p>\n<p>以京东为例，看一下 user-agent<br />\n<img data-src=\"https://i.loli.net/2021/05/18/z43a5uCxTXogN6p.jpg\" alt=\"img\" /><br />\n<img data-src=\"https://i.loli.net/2021/05/18/JE4ZjzR3FqiGpdt.jpg\" alt=\"img\" /><br />\n 看一个爬虫的例子，爬京东的时候没问题，但是爬抽屉的时候必须带着 user-agent，因为抽屉对 user-agent 做了判断，来判断你是不是一个正常的请求，算是反扒机制的一种。</p>\n<p><img data-src=\"https://i.loli.net/2021/05/18/MNWKtm9bsOFZzrQ.jpg\" alt=\"img\" /></p>\n<p>打开我们保存的 demo.html 文件，然后通过浏览器打开看看就能看到页面效果。</p>\n<p>写上面这些内容的意思是让你知道有这么个请求头的存在，有些是有意义的，请求头我们还可以自己定义，就在 requests 模块里面那个 headers={}，这个字典里面加就行。</p>\n<h3 id=\"http响应格式响应协议\"><a class=\"anchor\" href=\"#http响应格式响应协议\">#</a> HTTP 响应格式（响应协议）</h3>\n<p><img data-src=\"https://i.loli.net/2021/05/18/b6uKlL2UyqT1xEn.jpg\" alt=\"img\" /></p>\n<p><img data-src=\"https://i.loli.net/2021/05/18/DzcFJhQXemvOfAp.jpg\" alt=\"img\" /></p>\n",
            "tags": [
                "HTTP"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/37074.html",
            "url": "https://isviolet.github.io/p/37074.html",
            "title": "搭建项目工程（service）",
            "date_published": "2021-04-19T07:21:20.451Z",
            "content_html": "<h1 id=\"一-搭建service模块\"><a class=\"anchor\" href=\"#一-搭建service模块\">#</a> 一、搭建 service 模块</h1>\n<h2 id=\"1-在父工程guli-parent下面创建模块service\"><a class=\"anchor\" href=\"#1-在父工程guli-parent下面创建模块service\">#</a> 1、在父工程 guli-parent 下面创建模块 service</h2>\n<p><img data-src=\"https://i.loli.net/2021/04/09/gtZlkDxICWGTK5n.png\" alt=\"img\" /></p>\n<p><strong>选择 maven 类型，点击下一步</strong></p>\n<p><img data-src=\"https://i.loli.net/2021/04/09/slIN2wgCpvbKtAQ.png\" alt=\"img\" /></p>\n<p><strong>输入模块名称 service，下一步完成创建</strong></p>\n<p><img data-src=\"https://i.loli.net/2021/04/09/XFnohgb1RlIOCf8.png\" alt=\"img\" /></p>\n<h2 id=\"2-添加模块类型是pom\"><a class=\"anchor\" href=\"#2-添加模块类型是pom\">#</a> 2、添加模块类型是 pom</h2>\n<pre><code>&lt;artifactId&gt; 节点后面添加  pom类型\n</code></pre>\n<pre><code>&lt;artifactId&gt;service&lt;/artifactId&gt;\n&lt;packaging&gt;pom&lt;/packaging&gt;\n</code></pre>\n<h2 id=\"3-添加项目需要的依赖\"><a class=\"anchor\" href=\"#3-添加项目需要的依赖\">#</a> 3、添加项目需要的依赖</h2>\n<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;!--hystrix依赖，主要是用  @HystrixCommand --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;!--服务注册--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;!--服务调用--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;!--mybatis-plus--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.baomidou&lt;/groupId&gt;\n        &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;!--mysql--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;mysql&lt;/groupId&gt;\n        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- velocity 模板引擎, Mybatis Plus 代码生成器需要 --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;\n        &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;!--swagger--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;io.springfox&lt;/groupId&gt;\n        &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;io.springfox&lt;/groupId&gt;\n        &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;!--lombok用来简化实体类：需要安装lombok插件--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n        &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;!--xls--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;\n        &lt;artifactId&gt;poi&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;\n        &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;\n        &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;!--httpclient--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;\n        &lt;artifactId&gt;httpclient&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;!--commons-io--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;commons-io&lt;/groupId&gt;\n        &lt;artifactId&gt;commons-io&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;!--gson--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;\n        &lt;artifactId&gt;gson&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;junit&lt;/groupId&gt;\n        &lt;artifactId&gt;junit&lt;/artifactId&gt;\n        &lt;version&gt;4.12&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>\n<h1 id=\"二-搭建service-edu模块\"><a class=\"anchor\" href=\"#二-搭建service-edu模块\">#</a> 二、搭建 service-edu 模块</h1>\n<h2 id=\"1-在父工程service模块下面创建子模块service-edu\"><a class=\"anchor\" href=\"#1-在父工程service模块下面创建子模块service-edu\">#</a> 1、在父工程 service 模块下面创建子模块 service-edu</h2>\n<p><img data-src=\"https://i.loli.net/2021/04/09/HCusjXImQUz1tyc.png\" alt=\"img\" /></p>\n<p><strong>输入模块名称 service-edu，下一步完成创建</strong></p>\n<p><img data-src=\"https://i.loli.net/2021/04/09/BpflsOk6MrimZnq.png\" alt=\"img\" /></p>\n",
            "tags": [
                "springboot"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/3617.html",
            "url": "https://isviolet.github.io/p/3617.html",
            "title": "搭建项目工程（父工程）",
            "date_published": "2021-04-19T07:21:20.414Z",
            "content_html": "<h1 id=\"一-工程结构介绍\"><a class=\"anchor\" href=\"#一-工程结构介绍\">#</a> 一、工程结构介绍</h1>\n<h2 id=\"1-工程结构\"><a class=\"anchor\" href=\"#1-工程结构\">#</a> 1、工程结构</h2>\n<p>![img](file:///D:/My Knowledge/temp/64fdeecd-89b0-4a0d-993f-13d70adecd5b/128/index_files/592a017b-f501-4359-b92f-8b75875c45f7.png)</p>\n<h2 id=\"2-模块说明\"><a class=\"anchor\" href=\"#2-模块说明\">#</a> 2、模块说明</h2>\n<p><strong>guli-parent：在线教学根目录（父工程），管理四个子模块：</strong></p>\n<p><strong>canal-client</strong>：canal 数据库表同步模块（统计同步数据）</p>\n<p><strong>common</strong>：公共模块父节点</p>\n<p>common-util：工具类模块，所有模块都可以依赖于它</p>\n<p>service-base：service 服务的 base 包，包含 service 服务的公共配置类，所有 service 模块依赖于它</p>\n<p>spring-security：认证与授权模块，需要认证授权的 service 服务依赖于它</p>\n<p><strong>infrastructure</strong>：基础服务模块父节点</p>\n<p><strong>api-gateway</strong>：api 网关服务</p>\n<p><strong>service</strong>：api 接口服务父节点</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>service-acl：用户权限管理 api 接口服务（用户管理、角色管理和权限管理等）</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>service-cms：cms api 接口服务</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>service-edu：教学相关 api 接口服务</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>service-msm：短信 api 接口服务</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>service-order：订单相关 api 接口服务</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>service-oss：阿里云 oss api 接口服务</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>service-statistics：统计报表 api 接口服务</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>service-ucenter：会员 api 接口服务</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>service-vod：视频点播 api 接口服务</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h2 id=\"二-创建父工程\"><a class=\"anchor\" href=\"#二-创建父工程\">#</a> 二、创建父工程</h2>\n<p><strong>1、创建 sprigboot 工程 guli-parent</strong></p>\n<p>在 idea 开发工具中，使用 Spring Initializr 快速初始化一个 Spring Boot 模块，版本使用：2.2.1.RELEASE</p>\n<p>![img](file:///D:/My Knowledge/temp/64fdeecd-89b0-4a0d-993f-13d70adecd5b/128/index_files/871a0fee-b077-4abe-bf24-dc528124b828.png)</p>\n<p><strong>配置：</strong></p>\n<p>groupId：com.atguigu</p>\n<p>artifactId：guli-parent</p>\n<p>一直下一步到完成</p>\n<p>![img](file:///D:/My Knowledge/temp/64fdeecd-89b0-4a0d-993f-13d70adecd5b/128/index_files/951eecd3-0238-44f5-9e75-9d908a4de5b3.png)</p>\n<h2 id=\"2-删除-src-目录\"><a class=\"anchor\" href=\"#2-删除-src-目录\">#</a> <strong>2、删除 src 目录</strong></h2>\n<h2 id=\"imgfiledmy-knowledgetemp64fdeecd-89b0-4a0d-993f-13d70adecd5b128index_filesfbd1cb11-4103-4506-b6f3-ebe3f81a5d71png\"><a class=\"anchor\" href=\"#imgfiledmy-knowledgetemp64fdeecd-89b0-4a0d-993f-13d70adecd5b128index_filesfbd1cb11-4103-4506-b6f3-ebe3f81a5d71png\">#</a> ![img](file:///D:/My Knowledge/temp/64fdeecd-89b0-4a0d-993f-13d70adecd5b/128/index_files/fbd1cb11-4103-4506-b6f3-ebe3f81a5d71.png)</h2>\n<h2 id=\"3-配置-pomxml\"><a class=\"anchor\" href=\"#3-配置-pomxml\">#</a> 3、配置 pom.xml</h2>\n<p>修改版本为 ：2.2.1.RELEASE</p>\n<p>![img](file:///D:/My Knowledge/temp/64fdeecd-89b0-4a0d-993f-13d70adecd5b/128/index_files/1c2115d0-3dd7-4cb9-b498-e845c0266dd3.png)</p>\n<pre><code>&lt;artifactId&gt; 节点后面添加  pom类型\n</code></pre>\n<pre><code>&lt;artifactId&gt;guli-parent&lt;/artifactId&gt;\n&lt;packaging&gt;pom&lt;/packaging&gt;\n</code></pre>\n<p><strong>4、在 pom.xml 中添加依赖的版本</strong></p>\n<p><strong>删除 pom.xml 中的</strong> ** <code>&lt;dependencies&gt;内容</code>  **</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 以下内容删除 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>添加 &lt;properties&gt; 确定依赖的版本</strong></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>java.version</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>java.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>guli.version</span><span class=\"token punctuation\">></span></span>0.0.1-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>guli.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mybatis-plus.version</span><span class=\"token punctuation\">></span></span>3.0.5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mybatis-plus.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>velocity.version</span><span class=\"token punctuation\">></span></span>2.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>velocity.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>swagger.version</span><span class=\"token punctuation\">></span></span>2.7.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>swagger.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>aliyun.oss.version</span><span class=\"token punctuation\">></span></span>2.8.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>aliyun.oss.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>jodatime.version</span><span class=\"token punctuation\">></span></span>2.10.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>jodatime.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>poi.version</span><span class=\"token punctuation\">></span></span>3.17<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>poi.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>commons-fileupload.version</span><span class=\"token punctuation\">></span></span>1.3.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>commons-fileupload.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>commons-io.version</span><span class=\"token punctuation\">></span></span>2.6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>commons-io.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>httpclient.version</span><span class=\"token punctuation\">></span></span>4.5.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>httpclient.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>jwt.version</span><span class=\"token punctuation\">></span></span>0.7.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>jwt.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>aliyun-java-sdk-core.version</span><span class=\"token punctuation\">></span></span>4.3.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>aliyun-java-sdk-core.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>aliyun-sdk-oss.version</span><span class=\"token punctuation\">></span></span>3.1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>aliyun-sdk-oss.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>aliyun-java-sdk-vod.version</span><span class=\"token punctuation\">></span></span>2.15.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>aliyun-java-sdk-vod.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>aliyun-java-vod-upload.version</span><span class=\"token punctuation\">></span></span>1.4.11<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>aliyun-java-vod-upload.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>aliyun-sdk-vod-upload.version</span><span class=\"token punctuation\">></span></span>1.4.11<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>aliyun-sdk-vod-upload.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>fastjson.version</span><span class=\"token punctuation\">></span></span>1.2.28<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>fastjson.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>gson.version</span><span class=\"token punctuation\">></span></span>2.8.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>gson.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>json.version</span><span class=\"token punctuation\">></span></span>20170516<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>json.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>commons-dbutils.version</span><span class=\"token punctuation\">></span></span>1.7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>commons-dbutils.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>canal.client.version</span><span class=\"token punctuation\">></span></span>1.1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>canal.client.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>docker.image.prefix</span><span class=\"token punctuation\">></span></span>zx<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>docker.image.prefix</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>cloud-alibaba.version</span><span class=\"token punctuation\">></span></span>0.2.2.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>cloud-alibaba.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>配置 &lt;dependencyManagement&gt; 锁定依赖的版本</strong></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencyManagement</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">&lt;!--Spring Cloud--></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>Hoxton.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>type</span><span class=\"token punctuation\">></span></span>pom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>type</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>import<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-alibaba-dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;cloud-alibaba.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>type</span><span class=\"token punctuation\">></span></span>pom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>type</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>import<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">&lt;!--mybatis-plus 持久层 --></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.baomidou<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-plus-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;mybatis-plus.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">&lt;!-- velocity 模板引擎，Mybatis Plus 代码生成器需要 --></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.velocity<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>velocity-engine-core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;velocity.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">&lt;!--swagger--></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>io.springfox<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>springfox-swagger2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;swagger.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">&lt;!--swagger ui--></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>io.springfox<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>springfox-swagger-ui<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;swagger.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">&lt;!--aliyunOSS--></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.aliyun.oss<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>aliyun-sdk-oss<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;aliyun.oss.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 日期时间工具 --></span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>joda-time<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>joda-time<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;jodatime.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">&lt;!--xls--></span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.poi<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>poi<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;poi.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token comment\">&lt;!--xlsx--></span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.poi<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>poi-ooxml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;poi.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 文件上传 --></span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>commons-fileupload<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>commons-fileupload<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;commons-fileupload.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token comment\">&lt;!--commons-io--></span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>commons-io<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>commons-io<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;commons-io.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token comment\">&lt;!--httpclient--></span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.httpcomponents<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>httpclient<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;httpclient.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.google.code.gson<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>gson<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;gson.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token comment\">&lt;!-- JWT --></span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>io.jsonwebtoken<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jjwt<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;jwt.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token comment\">&lt;!--aliyun--></span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.aliyun<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>aliyun-java-sdk-core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;aliyun-java-sdk-core.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.aliyun.oss<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>aliyun-sdk-oss<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;aliyun-sdk-oss.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.aliyun<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>aliyun-java-sdk-vod<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;aliyun-java-sdk-vod.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.aliyun<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>aliyun-java-vod-upload<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;aliyun-java-vod-upload.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.aliyun<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>aliyun-sdk-vod-upload<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;aliyun-sdk-vod-upload.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>fastjson<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;fastjson.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.json<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>json<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;json.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>commons-dbutils<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>commons-dbutils<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;commons-dbutils.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.otter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>canal.client<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;canal.client.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencyManagement</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure>",
            "tags": [
                "springboot"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/21970.html",
            "url": "https://isviolet.github.io/p/21970.html",
            "title": "项目环境搭建",
            "date_published": "2021-04-19T07:21:20.359Z",
            "content_html": "<h1 id=\"一-数据库设计\"><a class=\"anchor\" href=\"#一-数据库设计\">#</a> 一、数据库设计</h1>\n<h2 id=\"1-数据库\"><a class=\"anchor\" href=\"#1-数据库\">#</a> 1、数据库</h2>\n<p>guli_edu</p>\n<h2 id=\"2-数据表\"><a class=\"anchor\" href=\"#2-数据表\">#</a> <strong>2、数据表</strong></h2>\n<pre><code>guli_edu.sql\n</code></pre>\n<h1 id=\"二-数据库设计规约\"><a class=\"anchor\" href=\"#二-数据库设计规约\">#</a> 二、数据库设计规约</h1>\n<p>以下规约只针对本模块，更全面的文档参考《阿里巴巴 Java 开发手册》：五、MySQL 数据库</p>\n<p>1、库名与应用名称尽量一致</p>\n<p>2、表名、字段名必须使用小写字母或数字，禁止出现数字开头，</p>\n<p>3、表名不使用复数名词</p>\n<p>4、表的命名最好是加上 “业务名称_表的作用”。如，edu_teacher</p>\n<p>5、表必备三字段：id, gmt_create, gmt_modified</p>\n<p>说明：</p>\n<p>其中 id 必为主键，类型为 bigint unsigned、单表时自增、步长为 1。</p>\n<p>（如果使用分库分表集群部署，则 id 类型为 verchar，非自增，业务中使用分布式 id 生成器）</p>\n<p>gmt_create, gmt_modified 的类型均为 datetime 类型，前者现在时表示主动创建，后者过去分词表示被 动更新。</p>\n<p>6、单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。 说明：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。</p>\n<p>7、表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint （1 表示是，0 表示否）。</p>\n<p>说明：任何字段如果为非负数，必须是 unsigned。</p>\n<p>注意：POJO 类中的任何布尔类型的变量，都不要加 is 前缀。数据库表示是与否的值，使用 tinyint 类型，坚持 is_xxx 的 命名方式是为了明确其取值含义与取值范围。</p>\n<p>正例：表达逻辑删除的字段名 is_deleted，1 表示删除，0 表示未删除。</p>\n<p>8、小数类型为 decimal，禁止使用 float 和 double。 说明：float 和 double 在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不 正确的结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数分开存储。</p>\n<p>9、如果存储的字符串长度几乎相等，使用 char 定长字符串类型。</p>\n<p>10、varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 text，独立出来一张表，用主键来对应，避免影响其它字段索 引效率。</p>\n<p>11、唯一索引名为 uk_字段名；普通索引名则为 idx_字段名。</p>\n<p>说明：uk_ 即 unique key；idx_ 即 index 的简称</p>\n<p>12、不得使用外键与级联，一切外键概念必须在应用层解决。外键与级联更新适用于单机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。</p>\n<h1 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h1>\n",
            "tags": [
                "springboot"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/2464.html",
            "url": "https://isviolet.github.io/p/2464.html",
            "title": "mybatis-plus条件构造器",
            "date_published": "2021-04-19T07:21:20.248Z",
            "content_html": "<h1 id=\"一-wapper介绍\"><a class=\"anchor\" href=\"#一-wapper介绍\">#</a> <strong>一、wapper 介绍</strong></h1>\n<p><img data-src=\"https://i.loli.net/2021/04/07/xFYwmHkcoTLdOfe.png\" alt=\"image-20210407220229246\" /></p>\n<p><img data-src=\"https://i.loli.net/2021/04/07/pIQPfNTF1gVtCie.png\" alt=\"img\" /></p>\n<p>Wrapper ： 条件构造抽象类，最顶端父类</p>\n<p>AbstractWrapper ： 用于查询条件封装，生成 sql 的 where 条件</p>\n<p>QueryWrapper ： Entity 对象封装操作类，不是用 lambda 语法</p>\n<p>UpdateWrapper ： Update 条件封装，用于 Entity 对象更新操作</p>\n<p>AbstractLambdaWrapper ： Lambda 语法使用 Wrapper 统一处理解析 lambda 获取 column。</p>\n<p>LambdaQueryWrapper ：看名称也能明白就是用于 Lambda 语法使用的查询 Wrapper</p>\n<p>LambdaUpdateWrapper ： Lambda 更新封装 Wrapper</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QueryWrapperTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserMapper</span> userMapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"二-abstractwrapper\"><a class=\"anchor\" href=\"#二-abstractwrapper\">#</a> 二、AbstractWrapper</h1>\n<p>** 注意：** 以下条件构造器的方法入参中的  <code>column </code> 均表示数据库字段</p>\n<h2 id=\"1-ge-gt-le-lt-isnull-isnotnull\"><a class=\"anchor\" href=\"#1-ge-gt-le-lt-isnull-isnotnull\">#</a> <strong>1、ge、gt、le、lt、isNull、isNotNull</strong></h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testDelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    queryWrapper</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">ge</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">isNotNull</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"delete return count = \"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>SQL：UPDATE user SET deleted=1 WHERE deleted=0 AND name IS NULL AND age &gt;= ? AND email IS NOT NULL</p>\n<h2 id=\"2-eq-ne\"><a class=\"anchor\" href=\"#2-eq-ne\">#</a> <strong>2、eq、ne</strong></h2>\n<p>** 注意：**seletOne 返回的是一条实体记录，当出现多条时会报错</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSelectOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectOne</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>SELECT id,name,age,email,create_time,update_time,deleted,version FROM user WHERE deleted=0 AND name = ?</p>\n<h2 id=\"3-between-notbetween\"><a class=\"anchor\" href=\"#3-between-notbetween\">#</a> <strong>3、between、notBetween</strong></h2>\n<p>包含大小边界</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSelectCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">between</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">Integer</span> count <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectCount</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>SELECT COUNT(1) FROM user WHERE deleted=0 AND age BETWEEN ? AND ?</p>\n<h2 id=\"4-alleq\"><a class=\"anchor\" href=\"#4-alleq\">#</a> <strong>4、allEq</strong></h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSelectList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">allEq</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    users<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>SELECT id,name,age,email,create_time,update_time,deleted,version</p>\n<p>FROM user WHERE deleted=0 AND name = ? AND id = ? AND age = ?</p>\n<h2 id=\"5-like-notlike-likeleft-likeright\"><a class=\"anchor\" href=\"#5-like-notlike-likeleft-likeright\">#</a> <strong>5、like、notLike、likeLeft、likeRight</strong></h2>\n<p>selectMaps 返回 Map 集合列表</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSelectMaps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    queryWrapper</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">notLike</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">likeRight</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> maps <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectMaps</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 返回值是 Map 列表</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    maps<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>SELECT id,name,age,email,create_time,update_time,deleted,version</p>\n<p>FROM user WHERE deleted=0 AND name NOT LIKE ? AND email LIKE ?</p>\n<h2 id=\"6-in-notin-insql-notinsql-exists-notexists\"><a class=\"anchor\" href=\"#6-in-notin-insql-notinsql-exists-notexists\">#</a> <strong>6、in、notIn、inSql、notinSql、exists、notExists</strong></h2>\n<p>in、notIn：</p>\n<pre><code>notIn(&quot;age&quot;,&#123;1,2,3&#125;)---&gt;age not in (1,2,3)notIn(&quot;age&quot;, 1, 2, 3)---&gt;age not in (1,2,3)\n</code></pre>\n<p>inSql、notinSql：可以实现子查询</p>\n<ul>\n<li>例:  <code>inSql(&quot;age&quot;, &quot;1,2,3,4,5,6&quot;)</code> ---&gt; <code>age in (1,2,3,4,5,6)</code></li>\n<li>例:  <code>inSql(&quot;id&quot;, &quot;select id from table where id &lt; 3&quot;)</code> ---&gt; <code>id in (select id from table where id &lt; 3)</code></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSelectObjs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//queryWrapper.in(\"id\", 1, 2, 3);</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">inSql</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"select id from user where id &lt; 3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> objects <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectObjs</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 返回值是 Object 列表</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    objects<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>SELECT id,name,age,email,create_time,update_time,deleted,version</p>\n<p>FROM user WHERE deleted=0 AND id IN (select id from user where id &lt; 3)</p>\n<h2 id=\"7-or-and\"><a class=\"anchor\" href=\"#7-or-and\">#</a> <strong>7、or、and</strong></h2>\n<p>** 注意：** 这里使用的是 UpdateWrapper</p>\n<p>不调用 <code>or</code>  则默认为使用  <code>and </code> 连</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testUpdate1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 修改值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    user<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Andy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 修改条件</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">UpdateWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userUpdateWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UpdateWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    userUpdateWrapper</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">like</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"h\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">between</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> userUpdateWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>UPDATE user SET name=?, age=?, update_time=? WHERE deleted=0 AND name LIKE ? OR age BETWEEN ? AND ?</p>\n<h2 id=\"8-嵌套or-嵌套and\"><a class=\"anchor\" href=\"#8-嵌套or-嵌套and\">#</a> <strong>8、嵌套 or、嵌套 and</strong></h2>\n<p>这里使用了 lambda 表达式，or 中的表达式最后翻译成 sql 时会被加上圆括号</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testUpdate2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 修改值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    user<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Andy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 修改条件</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">UpdateWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userUpdateWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UpdateWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    userUpdateWrapper</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">like</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"h\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-></span> i<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"李白\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ne</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> userUpdateWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>UPDATE user SET name=?, age=?, update_time=?</p>\n<p>WHERE deleted=0 AND name LIKE ?</p>\n<p>OR ( name = ? AND age &lt;&gt; ? )</p>\n<h2 id=\"9-orderby-orderbydesc-orderbyasc\"><a class=\"anchor\" href=\"#9-orderby-orderbydesc-orderbyasc\">#</a> <strong>9、orderBy、orderByDesc、orderByAsc</strong></h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSelectListOrderBy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">orderByDesc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    users<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>SELECT id,name,age,email,create_time,update_time,deleted,version</p>\n<p>FROM user WHERE deleted=0 ORDER BY id DESC</p>\n<h2 id=\"10-last\"><a class=\"anchor\" href=\"#10-last\">#</a> <strong>10、last</strong></h2>\n<p>直接拼接到 sql 的最后</p>\n<p>** 注意：** 只能调用一次，多次调用以最后一次为准 有 sql 注入的风险，请谨慎使用</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSelectListLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">last</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"limit 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    users<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>SELECT id,name,age,email,create_time,update_time,deleted,version</p>\n<p>FROM user WHERE deleted=0 limit 1</p>\n<h2 id=\"11-指定要查询的列\"><a class=\"anchor\" href=\"#11-指定要查询的列\">#</a> **11、** 指定要查询的列</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSelectListColumn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    users<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>SELECT id,name,age FROM user WHERE deleted=0</p>\n<h2 id=\"12-set-setsql\"><a class=\"anchor\" href=\"#12-set-setsql\">#</a> <strong>12、set、setSql</strong></h2>\n<p>最终的 sql 会合并 user.setAge ()，以及 userUpdateWrapper.set ()  和 setSql () 中 的字段</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testUpdateSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 修改值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    user<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 修改条件</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">UpdateWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userUpdateWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UpdateWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    userUpdateWrapper</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">like</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"h\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"老李头\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 除了可以查询还可以使用 set 设置修改的字段</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">setSql</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" email = '123@qq.com'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 可以有子查询</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> userUpdateWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>UPDATE user SET age=?, update_time=?, name=?, email = '123@qq.com' WHERE deleted=0 AND name LIKE ?</p>\n",
            "tags": [
                "springboot"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/39030.html",
            "url": "https://isviolet.github.io/p/39030.html",
            "title": "mybatis-plus CRUD接口",
            "date_published": "2021-04-19T07:21:20.118Z",
            "content_html": "<h1 id=\"一-insert\"><a class=\"anchor\" href=\"#一-insert\">#</a> <strong>一、insert</strong></h1>\n<h2 id=\"1-插入操作\"><a class=\"anchor\" href=\"#1-插入操作\">#</a> <strong>1、插入操作</strong></h2>\n<p><img data-src=\"https://i.loli.net/2021/04/07/i7zSoHT8ZAjEJln.png\" alt=\"image-20210407214956526\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CRUDTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserMapper</span> userMapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testInsert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Helen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"55317332@qq.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 影响的行数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//id 自动回填</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>** 注意：** 数据库插入 id 值默认为：全局唯一 id</p>\n<p><img data-src=\"https://i.loli.net/2021/04/07/gwDRoKjvcE64lGP.jpg\" alt=\"img\" /></p>\n<h2 id=\"2-主键策略\"><a class=\"anchor\" href=\"#2-主键策略\">#</a> 2、主键策略</h2>\n<p><img data-src=\"https://i.loli.net/2021/04/07/H7uETMzZtIawOhK.png\" alt=\"img\" /></p>\n<p><strong>（1）ID_WORKER</strong></p>\n<p>MyBatis-Plus 默认的主键策略是：ID_WORKER  <em>全局唯一 ID</em></p>\n<p>** 参考资料：分布式系统唯一 ID 生成方案汇总：**<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaGFveGlueXVlL3AvNTIwODEzNi5odG1s\">https://www.cnblogs.com/haoxinyue/p/5208136.html</span></p>\n<p><strong>（2）自增策略</strong></p>\n<ul>\n<li>\n<p>要想主键自增需要配置如下主键策略</p>\n</li>\n<li>\n<ul>\n<li>需要在创建数据表的时候设置主键自增</li>\n<li>实体字段中配置 @TableId (type = IdType.AUTO)</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@TableId</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token class-name\">IdType</span><span class=\"token punctuation\">.</span>AUTO<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>要想影响所有实体的配置，可以设置全局主键配置</p>\n<pre><code>#全局设置主键生成策略\nmybatis-plus.global-config.db-config.id-type=auto\n</code></pre>\n<p>其它主键策略：分析 IdType 源码可知</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Getter</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">IdType</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * 数据库 ID 自增</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">AUTO</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * 该类型为未设置主键类型</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">NONE</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 用户输入 ID</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * 该类型可以通过自己注册自动填充插件进行填充</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">INPUT</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">/* 以下 3 种类型、只有当插入对象 ID 为空，才自动填充。 */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * 全局唯一 ID (idWorker)</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">ID_WORKER</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * 全局唯一 ID (UUID)</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">UUID</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * 字符串全局唯一 ID (idWorker 的字符串表示)</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">ID_WORKER_STR</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token class-name\">IdType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"二-update\"><a class=\"anchor\" href=\"#二-update\">#</a> 二、update</h1>\n<h2 id=\"1-根据id更新操作\"><a class=\"anchor\" href=\"#1-根据id更新操作\">#</a> <strong>1、根据 Id 更新操作</strong></h2>\n<p><img data-src=\"https://i.loli.net/2021/04/07/phQuPJbad5SLji7.png\" alt=\"image-20210407214843542\" /></p>\n<p>** 注意：**update 时生成的 sql 自动是动态 sql：UPDATE user SET age=? WHERE id=?</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testUpdateById</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">updateById</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"2-自动填充\"><a class=\"anchor\" href=\"#2-自动填充\">#</a> 2、自动填充</h2>\n<p><img data-src=\"https://i.loli.net/2021/04/07/Hx4n1qzBEO5Qcr2.png\" alt=\"img\" /></p>\n<p>项目中经常会遇到一些数据，每次都使用相同的方式填充，例如记录的创建时间，更新时间等。</p>\n<p>我们可以使用 MyBatis Plus 的自动填充功能，完成这些字段的赋值工作：</p>\n<p><strong>（1）数据库表中添加自动填充字段</strong></p>\n<p>在 User 表中添加 datetime 类型的新的字段 create_time、update_time</p>\n<p><strong>（2）实体上添加注解</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>fill <span class=\"token operator\">=</span> <span class=\"token class-name\">FieldFill</span><span class=\"token punctuation\">.</span>INSERT<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> createTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//@TableField(fill = FieldFill.UPDATE)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>fill <span class=\"token operator\">=</span> <span class=\"token class-name\">FieldFill</span><span class=\"token punctuation\">.</span>INSERT_UPDATE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> updateTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>（3）实现元对象处理器接口</strong></p>\n<p><strong>注意：不要忘记添加 @Component 注解</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>handler</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>handlers<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MetaObjectHandler</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>reflection<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MetaObject</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Logger</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyMetaObjectHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MetaObjectHandler</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> LOGGER <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyMetaObjectHandler</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertFill</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MetaObject</span> metaObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"start insert fill ....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setFieldValByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"createTime\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> metaObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setFieldValByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"updateTime\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> metaObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updateFill</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MetaObject</span> metaObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"start update fill ....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setFieldValByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"updateTime\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> metaObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>（4）测试</strong></p>\n<h2 id=\"3-乐观锁\"><a class=\"anchor\" href=\"#3-乐观锁\">#</a> 3、乐观锁</h2>\n<p><img data-src=\"https://i.loli.net/2021/04/07/kEFZK5qY9T78ulR.png\" alt=\"image-20210407220003118\" /></p>\n<p><img data-src=\"https://i.loli.net/2021/04/07/sW8k5gBYeSDdxwI.png\" alt=\"image-20210407220046949\" /></p>\n<p>** 主要适用场景：** 当要更新一条记录的时候，希望这条记录没有被别人更新，也就是说实现线程安全的数据更新</p>\n<p><strong>乐观锁实现方式：</strong></p>\n<ul>\n<li>取出记录时，获取当前 version</li>\n<li>更新时，带上这个 version</li>\n<li>执行更新时， set version = newVersion where version = oldVersion</li>\n<li>如果 version 不对，就更新失败</li>\n</ul>\n<p><em><strong>*（1）数据库中添加 version 字段 *</strong></em></p>\n<pre><code class=\"language-mysql\">ALTER TABLE `user` ADD COLUMN `version` INT\n</code></pre>\n<p>![img](file:///D:/My Knowledge/temp/bea98035-e005-4023-9a84-ee40bbdfd5a0/128/index_files/7bf260f8-d483-49fe-b448-b2fbea3dddaf.png)</p>\n<p><em><strong>*（2）实体类添加 version 字段 *</strong></em></p>\n<p>并添加 @Version 注解</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Version</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>fill <span class=\"token operator\">=</span> <span class=\"token class-name\">FieldFill</span><span class=\"token punctuation\">.</span>INSERT<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> version<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><em><strong>*（3）元对象处理器接口添加 version 的 insert 默认值 *</strong></em></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertFill</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MetaObject</span> metaObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setFieldValByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"version\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> metaObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>特别说明:</strong></p>\n<p>支持的数据类型只有 int,Integer,long,Long,Date,Timestamp,LocalDateTime 整数类型下  <code>newVersion = oldVersion + 1``newVersion</code>  会回写到  <code>entity</code>  中仅支持  <code>updateById(id)</code>  与  <code>update(entity, wrapper)</code>  方法在  <code>update(entity, wrapper)</code>  方法下， <code>wrapper</code>  不能复用！！！</p>\n<p><strong>（4）*<em> 在 MybatisPlusConfig 中注册 Bean*</em></strong></p>\n<p>创建配置类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>extension<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PaginationInterceptor</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MapperScan</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableTransactionManagement</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@EnableTransactionManagement</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.atguigu.mybatis_plus.mapper\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MybatisPlusConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * 乐观锁插件</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OptimisticLockerInterceptor</span> <span class=\"token function\">optimisticLockerInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OptimisticLockerInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>（5）测试乐观锁可以修改成功</strong></p>\n<p>测试后分析打印的 sql 语句，将 version 的数值进行了加 1 操作</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 测试 乐观锁插件</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testOptimisticLocker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 查询</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 修改数据</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Helen Yao\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    user<span class=\"token punctuation\">.</span><span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helen@qq.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 执行更新</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">updateById</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>（5）测试乐观锁修改失败</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 测试乐观锁插件 失败</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testOptimisticLockerFail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 查询</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 修改数据</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Helen Yao1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    user<span class=\"token punctuation\">.</span><span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helen@qq.com1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 模拟取出数据后，数据库中 version 实际数据比取出的值大，即已被其它线程修改并更新了 version</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    user<span class=\"token punctuation\">.</span><span class=\"token function\">setVersion</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getVersion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 执行更新</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">updateById</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"三-select\"><a class=\"anchor\" href=\"#三-select\">#</a> <strong>三、select</strong></h1>\n<p><img data-src=\"https://i.loli.net/2021/04/07/DM96L1HyWskf4Jx.png\" alt=\"image-20210407220128734\" /></p>\n<h2 id=\"1-根据id查询记录\"><a class=\"anchor\" href=\"#1-根据id查询记录\">#</a> <strong>1、根据 id 查询记录</strong></h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSelectById</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"2-通过多个id批量查询\"><a class=\"anchor\" href=\"#2-通过多个id批量查询\">#</a> <strong>2、通过多个 id 批量查询</strong></h2>\n<p>完成了动态 sql 的 foreach 的功能</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSelectBatchIds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectBatchIds</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    users<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"3-简单的条件查询\"><a class=\"anchor\" href=\"#3-简单的条件查询\">#</a> <strong>3、简单的条件查询</strong></h2>\n<p>通过 map 封装查询条件</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSelectByMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Helen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectByMap</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    users<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>** 注意：**map 中的 key 对应的是数据库中的列名。例如数据库 user_id，实体类是 userId，这时 map 的 key 需要填写 user_id</p>\n<h2 id=\"4-分页\"><a class=\"anchor\" href=\"#4-分页\">#</a> 4、分页</h2>\n<p>MyBatis Plus 自带分页插件，只要简单的配置即可实现分页功能</p>\n<p><strong>（1）创建配置类</strong></p>\n<p>此时可以删除主类中的 <em>@MapperScan</em> 扫描注解 **<br />\n**</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 分页插件</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">PaginationInterceptor</span> <span class=\"token function\">paginationInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PaginationInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>（2）测试 selectPage 分页</strong></p>\n<p>** 测试：** 最终通过 page 对象获取相关数据</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSelectPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> page <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectPage</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    page<span class=\"token punctuation\">.</span><span class=\"token function\">getRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">.</span><span class=\"token function\">getPages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">.</span><span class=\"token function\">getTotal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">.</span><span class=\"token function\">hasPrevious</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>控制台 sql 语句打印：SELECT id,name,age,email,create_time,update_time FROM user LIMIT 0,5</p>\n<p><strong>（3）测试 selectMapsPage 分页：结果集是 Map</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSelectMapsPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> page <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> mapIPage <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectMapsPage</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 注意：此行必须使用 mapIPage 获取记录列表，否则会有数据类型转换错误</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    mapIPage<span class=\"token punctuation\">.</span><span class=\"token function\">getRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">.</span><span class=\"token function\">getPages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">.</span><span class=\"token function\">getTotal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">.</span><span class=\"token function\">hasPrevious</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"四-delete\"><a class=\"anchor\" href=\"#四-delete\">#</a> 四、delete</h1>\n<p><img data-src=\"https://i.loli.net/2021/04/07/HQiuGEeKFTlyB39.png\" alt=\"image-20210407220151397\" /></p>\n<h2 id=\"1-根据id删除记录\"><a class=\"anchor\" href=\"#1-根据id删除记录\">#</a> <strong>1、根据 id 删除记录</strong></h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testDeleteById</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">deleteById</span><span class=\"token punctuation\">(</span><span class=\"token number\">8L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"2-批量删除\"><a class=\"anchor\" href=\"#2-批量删除\">#</a> <strong>2、批量删除</strong></h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testDeleteBatchIds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">deleteBatchIds</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"3-简单的条件查询删除\"><a class=\"anchor\" href=\"#3-简单的条件查询删除\">#</a> <strong>3、简单的条件查询删除</strong></h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testDeleteByMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Helen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">deleteByMap</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"4-逻辑删除\"><a class=\"anchor\" href=\"#4-逻辑删除\">#</a> 4、逻辑删除</h2>\n<ul>\n<li>物理删除：真实删除，将对应数据从数据库中删除，之后查询不到此条被删除数据</li>\n<li>逻辑删除：假删除，将对应数据中代表是否被删除字段状态修改为 “被删除状态”，之后在数据库中仍旧能看到此条数据记录</li>\n</ul>\n<p><strong>（1）数据库中添加 deleted 字段</strong></p>\n<pre><code class=\"language-mysql\">ALTER TABLE `user` ADD COLUMN `deleted` boolean\n</code></pre>\n<p>![img](file:///D:/My Knowledge/temp/bea98035-e005-4023-9a84-ee40bbdfd5a0/128/index_files/bc4cbff4-c2b8-45d5-ae8d-53439dd2330c.png)</p>\n<p><strong>（2）实体类添加 deleted *<em> 字段 *</em></strong></p>\n<p>并加上 @TableLogic 注解 和 @TableField (fill = FieldFill.INSERT) 注解</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@TableLogic</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>fill <span class=\"token operator\">=</span> <span class=\"token class-name\">FieldFill</span><span class=\"token punctuation\">.</span>INSERT<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> deleted<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>（3）元对象处理器接口添加 deleted 的 insert 默认值</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertFill</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MetaObject</span> metaObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setFieldValByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"deleted\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> metaObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>（4）application.properties 加入配置</strong></p>\n<p>此为默认值，如果你的默认值和 mp 默认的一样，该配置可无</p>\n<pre><code>mybatis-plus.global-config.db-config.logic-delete-value=1\nmybatis-plus.global-config.db-config.logic-not-delete-value=0\n</code></pre>\n<p><strong>（5）在 MybatisPlusConfig 中注册 Bean</strong></p>\n<pre><code>@Bean\npublic ISqlInjector sqlInjector() &#123;\n    return new LogicSqlInjector();\n&#125;\n</code></pre>\n<p><strong>（6）测试逻辑删除</strong></p>\n<ul>\n<li>测试后发现，数据并没有被删除，deleted 字段的值由 0 变成了 1</li>\n<li>测试后分析打印的 sql 语句，是一条 update</li>\n<li>** 注意：** 被删除数据的 deleted 字段的值必须是 0，才能被选取出来执行逻辑删除的操作</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 测试 逻辑删除</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testLogicDelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">deleteById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>（7）测试逻辑删除后的查询</strong></p>\n<p>MyBatis Plus 中查询操作也会自动添加逻辑删除字段的判断</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 测试 逻辑删除后的查询：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 不包括被逻辑删除的记录</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testLogicDeleteSelect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    users<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试后分析打印的 sql 语句，包含 WHERE deleted=0</p>\n<p>SELECT id,name,age,email,create_time,update_time,deleted FROM user WHERE deleted=0</p>\n<h1 id=\"五-性能分析\"><a class=\"anchor\" href=\"#五-性能分析\">#</a> 五、性能分析</h1>\n<p>性能分析拦截器，用于输出每条 SQL 语句及其执行时间</p>\n<p>SQL 性能执行分析，开发环境使用，超过指定时间，停止运行。有助于发现问题</p>\n<h2 id=\"1-配置插件\"><a class=\"anchor\" href=\"#1-配置插件\">#</a> 1、配置插件</h2>\n<p><strong>（1）参数说明</strong></p>\n<p>参数：maxTime： SQL 执行最大时长，超过自动停止运行，有助于发现问题。</p>\n<p>参数：format： SQL 是否格式化，默认 false。</p>\n<p><strong>（2）在 MybatisPlusConfig 中配置</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * SQL 执行性能分析插件</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 开发环境使用，线上不推荐。 maxTime 指的是 sql 最大执行时长</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@Profile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"dev\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 设置 dev test 环境开启</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">PerformanceInterceptor</span> <span class=\"token function\">performanceInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">PerformanceInterceptor</span> performanceInterceptor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PerformanceInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    performanceInterceptor<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//ms，超过此处设置的 ms 则 sql 不执行</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    performanceInterceptor<span class=\"token punctuation\">.</span><span class=\"token function\">setFormat</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> performanceInterceptor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>（3）Spring Boot 中设置 dev 环境</strong></p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#环境设置：dev、test、prod</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token attr-name\">spring.profiles.active</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">dev</span></pre></td></tr></table></figure><p>可以针对各环境新建不同的配置文件 <code>application-dev.properties</code> 、 <code>application-test.properties</code> 、 <code>application-prod.properties</code></p>\n<p>也可以自定义环境名称：如 test1、test2</p>\n<h2 id=\"2-测试\"><a class=\"anchor\" href=\"#2-测试\">#</a> 2、测试</h2>\n<p><strong>（1）常规测试</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 测试 性能分析插件</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testPerformance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是Helen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    user<span class=\"token punctuation\">.</span><span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helen@sina.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    user<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>输出：</strong></p>\n<p><img data-src=\"https://i.loli.net/2021/04/07/QbkNdxqeCI2YVHp.png\" alt=\"img\" /></p>\n<p><strong>（2）将 maxTime 改小之后再次进行测试</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>performanceInterceptor<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//ms，超过此处设置的 ms 不执行</span></pre></td></tr></table></figure><p>如果执行时间过长，则抛出异常：The SQL execution time is too large,</p>\n<p><strong>输出：</strong></p>\n<p><img data-src=\"https://i.loli.net/2021/04/07/EMuR4rnQbxw1yKB.png\" alt=\"img\" /></p>\n<h1 id=\"六-其它\"><a class=\"anchor\" href=\"#六-其它\">#</a> 六、其它</h1>\n<p>如果想进行复杂条件查询，那么需要使用条件构造器 Wapper，涉及到如下方法</p>\n<p><strong>1、delete</strong></p>\n<p><strong>2、selectOne</strong></p>\n<p><strong>3、selectCount</strong></p>\n<p><strong>4、selectList</strong></p>\n<p><strong>5、selectMaps</strong></p>\n<p><strong>6、selectObjs</strong></p>\n<p><strong>7、update</strong></p>\n",
            "tags": [
                "springboot"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/64375.html",
            "url": "https://isviolet.github.io/p/64375.html",
            "title": "mybatis-plus入门",
            "date_published": "2021-04-19T07:21:20.035Z",
            "content_html": "<blockquote>\n<p>快速开始参考：<span class=\"exturl\" data-url=\"aHR0cDovL21wLmJhb21pZG91LmNvbS9ndWlkZS9xdWljay1zdGFydC5odG1s\">http://mp.baomidou.com/guide/quick-start.html</span><br />\n 测试项目： mybatis_plus<br />\n 数据库：mybatis_plus</p>\n</blockquote>\n<hr />\n<h1 id=\"一-创建并初始化数据库\"><a class=\"anchor\" href=\"#一-创建并初始化数据库\">#</a> 一、创建并初始化数据库</h1>\n<h2 id=\"1-创建数据库\"><a class=\"anchor\" href=\"#1-创建数据库\">#</a> 1、创建数据库：</h2>\n<p>mybatis_plus</p>\n<h2 id=\"2-创建-user-表\"><a class=\"anchor\" href=\"#2-创建-user-表\">#</a> 2、创建  <code>User</code>  表</h2>\n<p>其表结构如下：</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>age</th>\n<th>email</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Jone</td>\n<td>18</td>\n<td><span class=\"exturl\" data-url=\"bWFpbHRvOnRlc3QxQGJhb21pZG91LmNvbQ==\">test1@baomidou.com</span></td>\n</tr>\n<tr>\n<td>2</td>\n<td>Jack</td>\n<td>20</td>\n<td><span class=\"exturl\" data-url=\"bWFpbHRvOnRlc3QyQGJhb21pZG91LmNvbQ==\">test2@baomidou.com</span></td>\n</tr>\n<tr>\n<td>3</td>\n<td>Tom</td>\n<td>28</td>\n<td><span class=\"exturl\" data-url=\"bWFpbHRvOnRlc3QzQGJhb21pZG91LmNvbQ==\">test3@baomidou.com</span></td>\n</tr>\n<tr>\n<td>4</td>\n<td>Sandy</td>\n<td>21</td>\n<td><span class=\"exturl\" data-url=\"bWFpbHRvOnRlc3Q0QGJhb21pZG91LmNvbQ==\">test4@baomidou.com</span></td>\n</tr>\n<tr>\n<td>5</td>\n<td>Billie</td>\n<td>24</td>\n<td><span class=\"exturl\" data-url=\"bWFpbHRvOnRlc3Q1QGJhb21pZG91LmNvbQ==\">test5@baomidou.com</span></td>\n</tr>\n</tbody>\n</table>\n<p>其对应的数据库 Schema 脚本如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>DROP TABLE IF <span class=\"token class-name\">EXISTS</span> user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>CREATE <span class=\"token class-name\">TABLE</span> user</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    id <span class=\"token function\">BIGINT</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> NOT NULL COMMENT <span class=\"token string\">'主键ID'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    name <span class=\"token function\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span> NULL DEFAULT NULL COMMENT <span class=\"token string\">'姓名'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    age <span class=\"token function\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> NULL DEFAULT NULL COMMENT <span class=\"token string\">'年龄'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    email <span class=\"token function\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> NULL DEFAULT NULL COMMENT <span class=\"token string\">'邮箱'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">PRIMARY</span> KEY <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其对应的数据库 Data 脚本如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>DELETE <span class=\"token class-name\">FROM</span> user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>INSERT <span class=\"token class-name\">INTO</span> user <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">)</span> VALUES</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Jone'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'test1@baomidou.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Jack'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'test2@baomidou.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'test3@baomidou.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Sandy'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'test4@baomidou.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Billie'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'test5@baomidou.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"二-初始化工程\"><a class=\"anchor\" href=\"#二-初始化工程\">#</a> 二、初始化工程</h1>\n<p>使用 Spring Initializr 快速初始化一个 Spring Boot 工程</p>\n<p>Group：com.atguigu</p>\n<p>Artifact：mybatis-plus</p>\n<p>版本：2.2.1.RELEASE</p>\n<h1 id=\"三-添加依赖\"><a class=\"anchor\" href=\"#三-添加依赖\">#</a> 三、添加依赖</h1>\n<h2 id=\"1-引入依赖\"><a class=\"anchor\" href=\"#1-引入依赖\">#</a> 1、引入依赖</h2>\n<pre><code>spring-boot-starter`、```spring-boot-starter-test\n添加：mybatis-plus-boot-starter`、```MySQL、````lombok````、\n在项目中使用Lombok可以减少很多重复代码的书写。比如说getter/setter/toString等方法的编写\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependencies<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>test<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>scope<span class=\"token punctuation\">></span></span>test<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>scope<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>exclusions<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>exclusion<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>vintage<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>junit<span class=\"token operator\">-</span>vintage<span class=\"token operator\">-</span>engine<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>exclusion<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>exclusions<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>mybatis<span class=\"token operator\">-</span>plus<span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>baomidou<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>mybatis<span class=\"token operator\">-</span>plus<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">3.0</span><span class=\"token number\">.5</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>mysql<span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>mysql<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>mysql<span class=\"token operator\">-</span>connector<span class=\"token operator\">-</span>java<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>lombok用来简化实体类<span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>projectlombok<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>lombok<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependencies<span class=\"token operator\">></span></pre></td></tr></table></figure><p>** 注意：** 引入  <code>MyBatis-Plus</code>  之后请不要再次引入  <code>MyBatis</code>  以及  <code>MyBatis-Spring</code> ，以避免因版本差异导致的问题。</p>\n<h2 id=\"2-idea中安装lombok插件\"><a class=\"anchor\" href=\"#2-idea中安装lombok插件\">#</a> 2、idea 中安装 lombok 插件</h2>\n<p><strong>（1）idea2018 版本</strong></p>\n<p><img data-src=\"https://i.loli.net/2021/04/07/v3neC89FJXaO2YT.png\" alt=\"img\" /></p>\n<p><strong>（2）idea2019 版本</strong></p>\n<p><img data-src=\"https://i.loli.net/2021/04/07/DxEMK3cap9WAFVe.png\" alt=\"img\" /></p>\n<h1 id=\"四-配置\"><a class=\"anchor\" href=\"#四-配置\">#</a> 四、配置</h1>\n<p>在  <code>application.properties</code>  配置文件中添加 MySQL 数据库的相关配置：</p>\n<p>mysql5</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#mysql数据库连接</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>spring<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span>driver<span class=\"token operator\">-</span><span class=\"token keyword\">class</span><span class=\"token operator\">-</span>name<span class=\"token operator\">=</span><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mysql<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span></span>Driver</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>spring<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span>url<span class=\"token operator\">=</span>jdbc<span class=\"token operator\">:</span>mysql<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>localhost<span class=\"token operator\">:</span><span class=\"token number\">3306</span><span class=\"token operator\">/</span>mybatis_plus</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>spring<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span>username<span class=\"token operator\">=</span>root</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>spring<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span>password<span class=\"token operator\">=</span><span class=\"token number\">123456</span></pre></td></tr></table></figure><p>mysql8 以上（spring boot 2.1）</p>\n<p>** 注意：**driver 和 url 的变化</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>spring<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span>driver<span class=\"token operator\">-</span><span class=\"token keyword\">class</span><span class=\"token operator\">-</span>name<span class=\"token operator\">=</span><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mysql<span class=\"token punctuation\">.</span>cj<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span></span>Driver</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>spring<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span>url<span class=\"token operator\">=</span>jdbc<span class=\"token operator\">:</span>mysql<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>localhost<span class=\"token operator\">:</span><span class=\"token number\">3306</span><span class=\"token operator\">/</span>mybatis_plus<span class=\"token operator\">?</span>serverTimezone<span class=\"token operator\">=</span>GMT<span class=\"token operator\">%</span><span class=\"token number\">2</span>B8</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>spring<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span>username<span class=\"token operator\">=</span>root</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>spring<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span>password<span class=\"token operator\">=</span><span class=\"token number\">123456</span></pre></td></tr></table></figure><p><strong>注意：</strong></p>\n<p>1、这里的 url 使用了？serverTimezone=GMT%2B8 后缀，因为 Spring Boot 2.1 集成了 8.0 版本的 jdbc 驱动，这个版本的 jdbc 驱动需要添加这个后缀，否则运行测试用例报告如下错误：</p>\n<p>java.sql.SQLException: The server time zone value 'ÖÐ¹ú±ê×¼Ê±¼ä' is unrecognized or represents more</p>\n<p>2、这里的 driver-class-name 使用了  com.mysql.cj.jdbc.Driver ，在 jdbc 8 中 建议使用这个驱动，之前的 com.mysql.jdbc.Driver 已经被废弃，否则运行测试用例的时候会有 WARN 信息</p>\n<h1 id=\"五-编写代码\"><a class=\"anchor\" href=\"#五-编写代码\">#</a> 五、编写代码</h1>\n<p>1、主类</p>\n<p>在 Spring Boot 启动类中添加  <code>@MapperScan</code>  注解，扫描 Mapper 文件夹</p>\n<p>** 注意：** 扫描的包名根据实际情况修改</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.atguigu.mybatisplus.mapper\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MybatisPlusApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"2-实体\"><a class=\"anchor\" href=\"#2-实体\">#</a> 2、实体</h2>\n<p>创建包 entity 编写实体类  <code>User.java</code> （此处使用了 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucHJvamVjdGxvbWJvay5vcmcv\">Lombok</span> 简化代码）</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>查看编译结果</p>\n<p><img data-src=\"https://i.loli.net/2021/04/07/6scvlU1JhjqFXDe.jpg\" alt=\"img\" /></p>\n<p>Lombok 使用参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vdHVpL2FydGljbGUvZGV0YWlscy83OTAxMjg0Ng==\">https://blog.csdn.net/motui/article/details/79012846</span></p>\n<h2 id=\"3-mapper\"><a class=\"anchor\" href=\"#3-mapper\">#</a> 3、mapper</h2>\n<p>创建包 mapper 编写 Mapper 接口：  <code>UserMapper.java</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"六-开始使用\"><a class=\"anchor\" href=\"#六-开始使用\">#</a> 六、开始使用</h1>\n<p>添加测试类，进行功能测试：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MybatisPlusApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserMapper</span> userMapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSelectList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----- selectAll method test ------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//UserMapper 中的 selectList () 方法的参数为 MP 内置的条件封装器 Wrapper</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 所以不填写就是无任何条件</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        users<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>注意：</strong></p>\n<p>IDEA 在 userMapper 处报错，因为找不到注入的对象，因为类是动态创建的，但是程序可以正确的执行。</p>\n<p>为了避免报错，可以在 dao 层 的接口上添加 @Repository 注</p>\n<p>控制台输出：</p>\n<pre><code>User(id=1, name=Jone, age=18, email=test1@baomidou.com)\nUser(id=2, name=Jack, age=20, email=test2@baomidou.com)\nUser(id=3, name=Tom, age=28, email=test3@baomidou.com)\nUser(id=4, name=Sandy, age=21, email=test4@baomidou.com)\nUser(id=5, name=Billie, age=24, email=test5@baomidou.com)\n</code></pre>\n<p>通过以上几个简单的步骤，我们就实现了 User 表的 CRUD 功能，甚至连 XML 文件都不用编写！</p>\n<h1 id=\"七-配置日志\"><a class=\"anchor\" href=\"#七-配置日志\">#</a> 七、配置日志</h1>\n<p>查看 sql 输出日志</p>\n<pre><code>#mybatis日志\nmybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl\n</code></pre>\n<p><img data-src=\"https://i.loli.net/2021/04/07/2HxUlqIsAVrhyde.png\" alt=\"image-20210407215033821\" /></p>\n",
            "tags": [
                "springboot"
            ]
        },
        {
            "id": "https://isviolet.github.io/p/51605.html",
            "url": "https://isviolet.github.io/p/51605.html",
            "title": "mybatis-plus简介",
            "date_published": "2021-04-19T07:21:19.766Z",
            "content_html": "<h1 id=\"一-简介\"><a class=\"anchor\" href=\"#一-简介\">#</a> 一、简介</h1>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cDovL21wLmJhb21pZG91LmNvbS8=\">http://mp.baomidou.com/</span></p>\n<p>参考教程：<span class=\"exturl\" data-url=\"aHR0cDovL21wLmJhb21pZG91LmNvbS9ndWlkZS8=\">http://mp.baomidou.com/guide/</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Jhb21pZG91L215YmF0aXMtcGx1cw==\">MyBatis-Plus</span>（简称 MP）是一个 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5teWJhdGlzLm9yZy9teWJhdGlzLTMv\">MyBatis</span> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>\n<h1 id=\"二-特性\"><a class=\"anchor\" href=\"#二-特性\">#</a> 二、特性</h1>\n<ul>\n<li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li>\n<li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li>\n<li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li>\n<li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li>\n<li><strong>支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer2005、SQLServer 等多种数据库</li>\n<li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li>\n<li><strong>支持 XML 热加载</strong>：Mapper 对应的 XML 支持热加载，对于简单的 CRUD 操作，甚至可以无 XML 启动</li>\n<li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li>\n<li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li>\n<li><strong>支持关键词自动转义</strong>：支持数据库关键词（order、key......）自动转义，还可自定义关键词</li>\n<li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li>\n<li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li>\n<li><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li>\n<li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li>\n<li><strong>内置 Sql 注入剥离器</strong>：支持 Sql 注入剥离，有效预防 Sql 注入攻击</li>\n</ul>\n",
            "tags": [
                "springboot"
            ]
        }
    ]
}